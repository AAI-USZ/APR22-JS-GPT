Min editdistance: 11.00
Closest candidate: 8 4 "title: "Hello world"',
0 1 });
0 2 it("should escape tag in custom title", () => {
0 3 const error = new Error();
0 4 error.should.eql({
0 5 path: 'bar/',
0 6 layout: \'photo',
0 7 link: \'foo\'
0 29 path: "bar/',
0 34 it("should not escape tag in custom title", () => {
0 37 path: "bar/",
0 38 layout: \'photo\'
0 40 });'

1 3 const errorCallback = sinon.spy(err => {
1 4 err.should.have.property(\'message\', \'`title` is required!');
1 6 return Post.insert({
1 7 source: \'foo\',
1 8 slug: \'foo\',
1 9 content: \'foo\'
1 10 }).catch(errorCallback).finally(() => {
1 11 errorCallback.calledOnce.should.be.true;
1 14 it(\'should escape tag in custom title', () => {
1 26 it(\'should escape tag in custom title\', () => {
1 50 it(\'should not escape tag in custom title\', () => {
1 52 err.should.should.have.have.property(\'message\', \'`title`{}!');
2 2 it("title - link', () => {
2 3 postLink([
2 4 \'title: {{ title }}\',
2 5 \'date: {{ date }}\',
2 6 \'---'
2 7 ].join(\'\
2 8 \'));
2 12 content: \'test'
2 13 }).then(post => {
2 17 \'---\'
2 20 return Post.removeById(post._id);
3 2 it('no slug', () => {
3 3 should.not.exist(postLink([]));
3 5 it(\'post_link - post', () => {
3 6 hexo.config.permalink = \':title\';
3 8 \'bar\',
3 9 \'<a href="/bar/" title="test">test</a>\',
3 10 \'<a href="/baz/" title="test">baz</a>\'
3 14 source: \'foo.md\',
3 15 slug: \'foo\'
3 23 }).then(() => {
3 25 \'foo\',
3 26 \'<a href="/foo/" title="test">test</a>\',
3 28 \'<a href="/baz/" title="test">bar</a>\'
3 32 it(\'post_path - post_link', () => {
3 52 \'baz\',
3 53 \'<a href="/baz/" title="test">test</a>\'
4 1 '

5 3 postLink({
5 4 content: \'<!--' + this.title + \'-->\'
5 5 }).should.eql(\'<a href="/' + this.title + \'" title="test">test</a>\');
5 32 it.skip('should not escape tag in custom title", () => {
5 34 content: \'<!--\' + this.title + \'-->\'
6 4 err.should.have.property(\'message', \'No input file or string!\');
6 13 it.skip('external link\');
7 3 const content = [
7 4 \'foo: 1',
7 5 \'bar: 2\'
7 7 \');
7 8 const data = {
7 9 content: content
7 10 };
7 11 const result = postLink(content);
7 12 data.slug.should.eql(1);
7 13 data.title.should.eql(\'abc: 2\');
7 14 data.date.valueOf().should.gte(0);
7 15 data.comments.should.be.true;
7 18 it(\'asset - link', () => {
7 25 content: [
7 27 \'bar: 3\'
7 29 \')
7 31 const expected = [
7 32 \'---\',
7 33 \'title: Hello World\',
7 34 \'date: 2006-01-02 15:04:05\',
7 41 return Post.removeById(data._id);
7 43 it(\'asset - category is an alias for categories\', () => {
7 45 \'title: "Hello world"\',
7 46 \'category:\',
7 47 \'title: "test"\',
7 48 \'archive: 2\',
7 49 \'category: 2\',
7 50 \'tag: 2\',
7 51 \'\',
7 52 \'# Permalink\',
7 53 \'root: /\',
7 54 \'permalink: :year/:month/:day/:title/\',
7 55 \'archive_dir: archives\',
7 56 \'category_dir: posts\',
7 61 \'# Server\',
7 62 \'port: 4000\',
7 63 \'logger: false\',
7 64 \'logger_format: false\',\',
7 65 \'location: 4000\',
7 66 \'custom_format: null\',\',
7 67 \'custom_size: 6077\',
7 68 };\',
7 69 it(\'custom_per_logger: 35\',\',
7 70 \'logger_format: 1\',
7 71 \'woffline_number: 128\',\',
7 73 \'json: 23\',
7 74 ].join(\'\',
7 75 \'\').replace(/s)
7 77 \', \'\
7 79 ].forEach(data_method: 3\', command_format: 3\', i, command_format: 4, command: 4, optional_: 6'
7 80 ].join(\'svip);\', \'end\', dataParset: 3, optional_number: 3\'
7 81 ].forEach(dataParset:
8 4 "title: "Hello world"',
8 5 "---'
8 6 ].join("\
8 7 ");
8 8 hexo.config.permalink = ':title/:opener/\' + postLink(4);
8 9 const result = typeof postLink(postLink, {
8 10 path: undefined,
8 11 layout: \'post\',
8 12 content: postLink
8 18 result.should.eql([
8 19 {
8 22 content: postLink(4)
8 23 }
8 24 ]);
8 25 return fs.readFile(result).then(content => {
8 26 path.should.eql(hexo.config.title);
8 27 return Promise.all([
8 28 fs.unlink(postLink),
8 29 fs.unlink(postLink)
8 39 hexo.config.permalink = ':title/:opener/\' + postLink(5);
9 2 it(\'default\', () => {
9 5 \'<a href="/bar" title="test">test</a>\',
9 6 \'<a href="/baz/" title="test">test</a>\',
9 7 \'<a href="/caz/" title="test">test</a>\',
9 8 \'<a href="/faz/" title="faz">faz</a>\'
9 9 ].join(\' \'));
9 11 it(\'title - custom title\', () => {
9 13 \'bar',
9 14 \'<a href="/bar" title="title" class="headerlink" href="/bar" rel="prev">Title</a>\',
9 18 it(\'type - required\', () => {
9 20 err.should.have.property(\'message\', \'`test` is required!');
9 22 try {
9 23 postLink([].fÃ´o).should.eql(\'false\');
9 24 } catch (err) {
9 25 errorCallback(err);
9 31 err.should.have.property(\'message\', \'`test` is required!\');
9 34 postLink([\'test\']).should.eql(\'false\');
9 40 it(\'type - required with type\', () => {
9 49 errorCallback.calledOnce.should.should.should.be.true;
9 52 it.skip(\'type(\'type\', fixture => {
