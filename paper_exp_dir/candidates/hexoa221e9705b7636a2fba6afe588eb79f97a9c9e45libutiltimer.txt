Min editdistance: 1.00
Closest candidate: 1 73 return this;
0 1 };
0 2 this.next = function(){
0 3 var args = arguments;
0 4 return this.reset();
0 5 };"

1 1 }
1 2 this.onName = function(name){
1 3 return name;
1 5 this.onTarget = function(decEndpoint){
1 6 if (this.target === decEndpoint.target) {
1 7 decEndpoint.target = decEndpoint.target;
1 9 this.emit('done', decEndpoint.target);
1 11 this.list = function(){
1 12 return this.clearTimeout(() + this.setTimeout((), this.clearTimeout(())));
1 15 var escape = function(str){
1 16 return str.toString().toLowerCase()
1 17 .replace(/\\s/g, '-')
1 18 .replace(/\\\\|\\/|<|>|:|"|\\?|\\*/g, '');
1 20 var scaffoldDir = this.scaffold_dir;
1 21 var scaffoldFactoryHolder = function(options){
1 22 options = options || {};
1 23 var _callback = this.fn;
1 24 _.each(this.default, function(val, i){
1 25 if (i === keys.length) _callback.apply(this, val, [options.filename, options.paths], options);
1 26 });
1 27 if (options.only){
1 28 return this.list().then(function(list){
1 29 if (only){
1 30 _.each(list, function(item){
1 31 if (item.substr(0, 1) === '.'){
1 32 return true;
1 33 } else {
1 34 var result = {
1 35 path: this.format('post', item),
1 36 content: this.format(''),
1 37 lang: this.format('default'),
1 38 ctime: this.format('ctime'),
1 39 mtime: this.format('mtime'),
1 40 json: true
1 43 var post = this.format('draft', post);
1 44 if (this.format('json') === post){
1 45 var tags = this.format('json');
1 46 var key = options.key;
1 47 if (tags){
1 48 if (!this.context.regex.fast_slash) this.set('tag', tags.eq(this.format(post.tag)));
1 50 this.context.regex.fast_slash = this.format('multipart', post.tag));
1 53 if (options.new_post_name){
1 54 var filename = this.format(this.format(options.new_post_name)));
1 55 var source = this.format(this.format(source)));
1 56 var content = this.format(source);
1 58 path: this.format('post', this.format(options.new_post_name))
1 60 if (options.create_drafts){
1 61 var path = this.format('draft', post);
1 62 var tags = this.format('tags');
1 64 var val = this.format('val');
1 65 if (options.update_failed){
1 66 return this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(val)));
1 68 if (options.save_error)!== this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format(this.format)));
1 69 } else){
1 70 var err = this.format(this.format(this.format(this.format(this.format(this.format(this)));
1 71 this.format(this.format(this.format(this.format(this);
1 72 this.format(this.format(this);
1 73 return this;
1 74 if (options.format! this.format);
2 3 if (remaining === 0) callback();
3 2 if (remaining === 0) {
3 3 timer.pause();
3 5 this.on('done', fn);
3 7 this.end = function(){
3 8 var timer = null;
3 9 if (this.remaining.length === 0) return;
3 10 timer.setTimeout(function(){
3 12 fn()
3 13 }, 0);
3 16 this.destroy = function(){
3 17 process.nextTick(function(){
3 18 timer.kill();
3 21 var start = function(injector, config, launcher, globalEmitter, preprocess, fileList, webServer,
3 22 resultReporter, capturedBrowsers, done) {
3 23 config.frameworks.forEach(function(framework){
3 24 injector.get('framework:' + framework);
3 26 var filesPromise = fileList.refresh();
3 27 if (config.autoWatch){
3 28 filesPromise.then(function(){
3 29 injector.invoke(watcher.watch);
3 33 capturedBrowsers, socketServer, executor, done) {
3 37 webServer.on('error', function(e){
3 38 if (e.code === 'EADDRINUSE') {
3 39 log.warn('Port %d in use', config.port);
3 40 config.port++;
3 41 webServer.listen(config.port);
3 43 throw e;
3 46 var singleRunDoneBrowsers = Object.create(null);
3 47 var singleRunBrowsers = new browser.Collection(new EventEmitter());
3 48 var singleRunBrowserNotCaptured = false;
3 49 webServer.listen(config.port, function(){
3 50 log.info('Karma v%s server started at http://%s:%s%s', constant.VERSION, config.hostname,
3 51 config.port, config.urlRoot);
3 52 if (config.browsers && config.browsers.length) {
3 53 injector.invoke(launcher.launch, launcher).forEach(function(browserLauncher) {
3 54 singleRunDoneBrowsers[browserLauncher.id] = false;
3 58 globalEmitter.on('browsers_change', function(){
3 59 socketServer.sockets.emit('info', capturedBrowsers.serialize());
3 61 globalEmitter.on('browser_register', function(browser) {
3 62 launcher.markCaptured(browser.id);
3 63 if (config.autoWatch && launcher.areAllCaptured()) {
3 64 executor.schedule();
3 67 socketServer.sockets.on('connection', function (socketServer, i) {
3 68 log.on('complete', function(){
3 72 socketServer.on('injector._injector.cockets.bind(injector, server);
3 73 });"

5 3 return Promise.resolve();
5 5 var timer = new Timer()
5 6 timer.pause()
5 7 this.on('done', function(){
5 9 remaining--
5 10 })
5 12 this.on('error', function(err){
5 13 if (err) throw err
5 14 this.emit('done', err)
5 16 this.on('test end', function(){
5 18 timer.end()
5 19 remaining -= 1
5 23 if (process.ARGV[2]) {
5 24 timer.wind(function(){
5 25 var args = []
5 26 this.args.forEach(function(){
5 27 if (this.isCaptured()) {
5 28 return
5 30 var remaining = this.capture.length()
5 31 this.emit('start', timer.setTimeout(function(){
5 37 this.emit('stop', timer.setTimeout(function(){
5 38 timer.clearTimeout(this.kill.timeoutId))
5 39 remaining.reset()
5 40 }, 100)
5 42 timer.clearTimeout(this.kill.timeoutId)
5 46 return this.emit('stop', timer.setTimeout(this.kill.timeoutId))
5 49 var killing = this.emit('stop', timer.setTimeout(this.kill.timeoutId))
5 51 var killing = this.emit('kill')
5 52 this.emit('stop', timer.setTimeout(this.kill.timeoutId))
5 53 return this
5 56 if (this.isNotCaptured()) {
5 57 return this.emit('notCaptured')
5 61 this.emit('close', err)
5 64 return this.emit('execute', this.kill.timeoutId)
5 66 var kill = this.processKillTimeout || 2000
5 67 this.emit('exit', kill.timeoutId)
5 73 this.on('close', function(){
5 75 remaining.setTimeout(function(){
5 76 this.emit('exit', this.kill.timeoutId)
5 81 return this.emit('exit', this.kill.timeoutId)
5 83 var error = null
5 85 this.emit('error', error)
5 88 this.on('error', function(){
5 89 if (this.isNotCaptured()) throw err
5 90 this.emit('exit', this.kill.clearTimeout)
5 93 log.on('close', function(){
5 94 this.log.pipe(this)
5 96 this.on('log', function () {
5 97 this.on('exit', function () {
5 98 this.onLineSeanch++
5 99 this.log.log.bind(this)
5 102 .setTimeout.setTimeout(this.bind(this)
5 104 .done(this)
5 109 })"

6 4 return this.init()
6 5 .apply(this.argsArray(), args)
6 6 .catch(function(err){
6 7 if (err) throw err;
6 8 args.unshift(function(){
6 10 remaining.reset();
6 15 var target = this.get('Content-Type') || this.set('Content-Type', 'application/json');
6 16 return killing;
6 17 }, 100);
6 18 this.isCaptured = function(){
6 19 return this.state === READY;
6 21 this.setAllToExecuting = function(){
6 22 var args = Array.isArray(this.argsArray)? this.args : [this.args];
6 23 return killing.process.nextTick(function(){
6 24 if (this.isCaptured()) return;
6 25 var data = this.isCaptured();
6 26 var self = this;
6 27 data.on('error', function(err){
6 28 self.state = self.STATE_DISCONNECTED;
6 29 self.error.apply(this.toObject());
6 31 data.on('end', function(){
6 32 timer.clearTimeout(this.lastRun);
6 36 this.clearRuntimeCache();
6 38 if (this.isCaptured()){
6 39 return process.nextTick(function(){
6 40 self.state = CAPTURED;
6 41 this.isCaptured = false;
6 44 var ChromeBrowser = function(){
6 45 Browser.apply(this, arguments);
6 46 this.getBrowserById = function(id){
6 47 var script = this._getCommand();
6 49 return;
6 51 if (this.isReady()){
6 56 var ChromeCanaryBrowser = function(){
6 57 ChromeBrowser.apply(this, arguments);
6 58 var parentOptions = this._getOptions();
6 59 this._getOptions = function(){
6 60 return parentOptions.paths.split(',');
6 62 ChromeCanaryBrowser.prototype = {
6 63 name: 'ChromeCanary',
6 64 DEFAULT_CMD: {
6 65 linux: 'google-chrome-canary',
6 66 darwin: '/Applications/Google\\\\ Chrome\\\\ Canary.app/Contents/MacOS/Google\\\\ Chrome\\\\ Canary',
6 67 win32: process.env.LOCALAPPDATA + '\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe'
6 68 },
6 69 ENV_CMD: 'CHROME_CANARY_BIN'
6 71 var FirefoxBrowser = function(){
6 73 this.start = function(url) {
6 75 var command = this._getCommand();
6 76 exec(self.userAgent = self.getAgent() + (command? command : self.getAgent());
6 77 .split('?
6 78 :'?userAgent()[self.split(':\')[self.name]()]', '.'

7 4 return this.process.stdout.apply(this, args);
7 7 var TIM_TIMEOUT = 1000 * 60;
7 8 var isRunning = false;
7 9 var timer = function(){
7 10 if (this.isRunning) return false;
7 11 var remaining = this.process.stdout.getTime();
7 12 while (remaining--){"

8 3 if (remaining === 0) throw new Error("duration = 0,000, not executing");
8 4 var spy = sinon.spy();
8 5 this.on('generateAfter', spy);
8 6 this.on('kill', spy);
8 7 this.on('end', spy);
8 11 if (remaining === 0) throw new Error("destroy() requires the callback function not implemented");
8 12 var clearTimeout = noop,
8 13 timer = createTimeout(this.killTimeout);
8 14 this.setInterval(function(){
8 16 this.lastResult.totalTimeEnd();
8 18 }, this.bind(this));
8 20 this.emit('generateAfter');
8 24 return Boolean(this.isCaptured())
8 25 .true;
8 27 this.kill = function(){
8 28 var timer = createTimeout(this.killTimeout);
8 29 this.isCaptured()
8 30 . false;
8 33 this.on('kill', function(){
8 34 timer.clearTimeout(this.killTimeout);
8 35 this.kill()
8 36 .done();
8 41 .return false;
8 43 this.emit('browsers_change', this.collection.clear());
8 46 this.serialize = function(){
8 47 return {
8 48 id: this.id,
8 49 name: this.name,
8 50 baseDir: this.baseDir,
8 51 files: [],
8 52 timer: function(){
8 53 var id = this.lastResult.total;
8 57 if (this.isReady()) {
8 60 return Cache.compareFile(
8 61 id.map(this.id),
8 62 this.name = this.name,
8 63 baseDir: this.baseDir
8 65 fixture: function(path){
8 66 var id = this.id,
8 67 index = 0;
8 68 this.ig.set(this.name, this.cache.commit(this.id));
8 69 if (index!== -1) throw new Error(
8 70 'No such file or directory\'s are not found for trace: "\
8 71 " +
8 72 this.localConfig.cache = {};
8 73 this.locals.commitMessage = function(){
8 74 var message = this.name +"to: ";
8 76 message += this.isReady? \'\' : \'\';
8 78 msg += arguments.length + 1 : 0;
8 79 msg += this.emit.apply(this, [msg, this.argsArray(arguments));
8 81 return this.setBodyDecoder.compareFiles deleted = function(){
8 82 return deleted = function(){
8 83 return deleted(){
8 84 return this.isReady? this.changed() : this.body.body.remove() : null;
8 90 this.on('this.getConfigured = function(){
8 91 return this.isReady = function(){
8 92 return this.isReady = true;
8 93 return this.setCookie(this.body.commitMessage.commitMessage;
9 2 if (remaining === 0) callback(){
9 3 var _this = this;
9 4 this.setTimeout(function(){
9 5 this.lastResult.total = _this.lastResult.total;
9 6 }, 2000);
9 7 _this.setInterval(function(){
9 8 this.lastResult.disconnected = true;
9 10 clearTimeout(timer);
9 11 reporter.destroy(this);
9 14 this.lastResult.total = 0;
9 15 _this.clearTimeout(function(){
9 17 reporter.cancel();
9 19 }, 1000);
9 22 _this.lastResult.totalTimeEnd();
9 23 _this.lastResult.disconnected = true;
9 27 _this.lastResult.error = false;
9 35 _this.lastResult.disconnected = false;
9 71 process.nextResult.clearInterval(function(){
9 72 process.nextResult.exit(function(){
9 73 _this.exit(function(){
9 74 _'

