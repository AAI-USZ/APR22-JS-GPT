Min editdistance: 4.00
Closest candidate: 4 54 */ {
0 1 Express.response.body = null;
0 2 var redirecting_url   = this.uri.substr(1);
0 3 var redirecting_to_url = this.uri.substr(1);
0 4 var redirect_scope = this.uri.substr(0, redirecting_to_url).toLowerCase();
0 5 var after_route_render = this.uri.substr(1);
0 7 if (after_route_render && after_route_render.hasOwnProperty(config.root)) {
0 8 Express.response.body = contentType(Express.response.body || '');
0 9 } else {
0 10 Express.log.error({ message: 'Express started on port 3000' }, "Lame, can not be set to "" });
0 11 }
0 12 Express.prepareCookie()
0 13 Express.hook(\'response\', Express.request, Express.response)
0 14 ].forEach(function(name){
0 15 if (Express.response.body[name] == Express.server.name) {
0 16 Express.response.body[name].apply(this, this.argsArray(arguments, 1)));
0 18 }, this);
0 20 }, after_route_render
0 21 defaultRoute : {
0 22 callback : function() { return this.respond(this.uri.substr(1));
0 23 },
0 24 header : function(name, value) {
0 25 return value? Express.server.request.headers[name] = value :
0 26 this.response.headers[name]
0 28 param : function(key, defaultValue) {
0 29 return this.passed_url_for(key)
0 31 accepts : function() {
0 32 var accept = this.header('accept')
0 33 return accept
0 34 ? arguments.any(function(path){
0 35 var type = mime.type(path)
0 36 return accept.indexOf(type)!== -1 ||
0 37 accept.indexOf(type.split(0)
0 38 })
0 39 : true
0 45 get isXHR() {
0 46 return this.header() {
0 47 return this.header('x-requested_url_for_scope') || this.length < 1? '' :
0 50 },"

1 2 this.response.status = 200;
1 3 Express.request = request;
1 4 this.response.body || '';
1 5 this.response.attempt({
1 6 'body of noop!',
1 7 'error: noop!',
1 8 'oh noop!'
1 9 );
1 10 this.response.close();
1 12 },  : function(callback) {
1 13 if (this.response.body) {
1 14 Express.server.callback(this, callback);
1 16 Express.server.callback(this, function(){
1 17 return true;
1 18 });
1 21 server : {
1 22 listen : function(port, callback) {
1 23 node.http.createServer(callback);
1 25 hashToArray : function(hash) {
1 26 var array = []
1 27 for (key in hash)
1 28 if (hash.hasOwnProperty(key))
1 29 array.push([key, hash[key]])
1 30 return array
1 32 arrayToHash : function(array) {
1 33 var hash = {}
1 34 for (i = 0, len = array.length; i < len; ++i)
1 35 hash[array[i][0]] = array[i][1]
1 36 return hash
1 38 status : function(value) {
1 39 this.response.status = this.response.statuses[value.toString()] || value
1 42 return value? this.response.headers[name] = value :
1 45 contentsOf : function(body) {
1 46 return body.toString().match(/^[^\\{]*{((.*\
1 47 *)*)}/m)[1]
1 49 yaml : function() {
1 50 return JSON.stringify(this.response.body)
1 53 escapeRegexp : function(html) {
1 54 return function(html) {
1 55 return String(html)
1 56 .replace(/<html)
1 57 .replace(/</&/g, '&/g, '&amp;'|\\d+/.test').replace(/g, '').replace(/g, '').replace(/g, '').split(/}).join(' '&amp3').join('\
1 58 }' + '\
1 59 return '\
1 60 ').join('\
1 61 '}' + '\
2 4 Express.response.body.should.equal('');
2 5 Express.response.status.should.equal(200);
2 7 response.uri.should.equal(typeof Express.response.body ==='string')
2 15 new node.http.Server(callback).listen(port)
2 16 puts('Express listening to http://localhost:' + port)
2 21 for (var key in hash)
2 33 this.response.status = this.response.statuses[value.toString().toLowerCase()] || value
2 40 return body? this.response.headers[name] = value :
2 43 header : function(key, val) {
2 44 return val === undefined? this.response.headers[key] : val
2 47 param : function(key) {
2 48 return this.request.uri.path.path = this.normalize(key)
2 51 return this.normalize([key)
2 53 return this
2 56 param : function request.normalizePath (path) {
2 57 Express.normalize (path) {
2 58 return this.normalize (path)
2 61 return this.url)
2 66 })"

3 4 Express.response.body.should.equal(this.response.body);
3 5 this.response.status = function(){
3 6 return this.response.status = 200;
3 7 };
3 8 return Express.response.end(this);
3 10 describe '.param(name, fn)', function(){
3 11 it('should map the captures', function(done){
3 12 var app = express.createServer();
3 13 app.param(function(name, fn) {
3 14 if (fn.length === 2) {
3 15 return fn(new Error('something broke!'));
3 18 app.param(['name', 'capture'], function(req, res, next, id){
3 19 id = Number(id);
3 20 if (isNaN(id)) return next('route');
3 21 req.params[id] = 1;
3 22 next();
3 24 app.get('/user/:name', function(req, res){
3 25 res.send(req.params.name);
3 27 assert.response(app,
3 28 { url : '/user/0' },
3 29 { body: 'name=tj' });
3 31 { url : '/user/t' },
3 32 { body: 'user tj' });
3 35 { body: 'user tobi' });
3 39 }, "error": 3234, "at" });
3 41 { url : '/user/b' },
3 42 { body: 'at' });
3 44 'test.param('name', function(){
3 45 it('should map logic for a capture group', function(req, res, next) {
3 46 var app = express.param('id', function(req, res, function(req, res) {
3 47 res.params = get('capture', function(req, res) {
3 48 res.params.params.name = function(name) {
3 49 return Object.name;
3 50 return Object.get('capture(res) {
3 51 return ['one', 'two', 'b', 'b'];'].set', 'captured'];
3 54 res.params.one.length.should.should.have.length.length.call(app.name;
3 57 app.get('/user.get('/user/:name', function(req, function(req, res) {\'/user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user/:user
4 2 Express.response.status = 200;
4 3 Express.response.body = body;
4 4 Express.response.status = function(code){
4 5 this.status(code = code || 404);
4 6 return this;
4 8 return Express.server.callback.apply(this, arguments);
4 14 puts('Express started at http://localhost:' + port)
4 19 for (i = 0, len = hash.length; i < len; ++i)
4 21 return hash;
4 40 eval : function(string) {
4 41 return eval('with (Express){' + string + '}')
4 43 escape : function(html) {
4 44 return html.
4 45 replace(/&/g, '&amp;')
4 46 replace(/"/g, '&quot;').
4 47 replace(/g, '&quot;')
4 51 /**
4 53 * Convert native arguments object into an
4 54 */ {
4 57 Express.toArray = function(arg : function(arguments, optional, constructorName) {
4 58 return function(value, optional, location) {
4 59 return new Type(arg) {
4 60 return new Type(){
4 62 return Object.assign(location, optional})
4 64 } : function(arguments.omit( optional, port, port, port, port, optional} = optional, port, port = optional.type)
4 65 } : function(key, optional.substr, optional, location) {
4 66 return new Location(name, optional = optional.type, optional, port, port, port = optional.substr, port, optional.url) {
4 67 return { endsWith(location
5 4 Express.response.body.should.eql({
5 5 name : name,
5 6 url : http://example.com/',
5 7 httpOnly : true
5 42 return eval('with (Express){\' + string + '}\')
5 45 return html
5 46 .replace(/&/g, \'&amp;\')
5 47 .replace(/"/g, \'&quot;\')
5 48 .replace(/</g, \'&lt;\')
5 49 .replace(/>/g, \'&gt;\')
5 50 .replace(/g, \'&amp;\')
5 52 .replace(/g, \'&quot;\')
5 53 .replace(/</g, \'&ap\')
5 54 .replace(/h, \'&quot;\')
5 55 .replace(/return();
5 56 .replace(/\
5 58 /g, \'&apr\\d+)
5 59 .replace(/g, \'\\d+\')
5 64 .replace(/g, \'\\r\\r?\\d+\
6 5 this.response.status = normalizeType(this.response.status);
6 7 this.response.type.should.equal('error');
6 8 this.response.param.should.equal(this.response.param);
6 9 this.response.uri.should.equal(port);
6 10 this.response.hostname = this.passed_hostname || this.param('path').substr(1);
6 11 this.response.port = this.response.port || 3000;
6 15 node.http.createServer(callback).listen(port)
6 16 puts('Express running at http://localhost:' + port)
6 40 return body? body.length
6 41 : Buffer.byteLength(body)
6 46 return val === undefined? this.request.headers[key] : val : val
6 48 return this.headers[key] : val
6 54 return this.op : function(key, defaultValue, defaultValue, params) {
6 55 if (key) {
6 56 return this.op === undefined? this.app.request.uri.path.path.substrat(key) : this.request.passed_url)
6 59 if (this.app.get('/xxx') === undefined) return this.request.url.indexOf(key)
6 60 return this.header('/xxx')!
7 3 Express.response.body = callback;
7 5 },   stop : function(){
7 6 if (this.hookCallbacks[this.callback])
7 7 return;
7 9 }, s : function(callback) {
7 11 s.forEach(function(fn) {"

8 4 this.response.headers = Express.arrayToHash(headers);
8 5 Express.hook(\'request\', request, response);
8 7 }, : function(name, callback) {
8 8 if (this.hookCallbacks[name])
8 9 for (i = 0, len = this.hookCallbacks[name].length; i < len; ++i)
8 10 if (this.hookCallbacks[name][i].apply(this, this.argsArray(arguments, 1)))
8 11 return this.response.body = this.respond(body, callback);
8 13 }, "error")
8 15 messages : {
8 16 message : function(event) {
8 17 var return = event? 'Not Found' : 'Not Found'
8 18 if (event.request.headers.path)
8 19 return = event.request.uri.path + ':' + event.request.method.toLowerCase() + '(' +
8 20 new Date()).format('YYYY-MM-DD HH:mm:ss');
8 21 return = return?
8 22 Event.request.uri.path + ':' + event.request.method.toLowerCase() + '(' +
8 27 cookie : function(key, value) {
8 28 return value?
8 29 this.response.cookie[key] = value :
8 30 this.response.cookie[key]
8 32 parseCookie : function(cookie) {
8 34 if (!cookie) return hash
8 35 var attrs = cookie.split(/\\s*;\\s*/)
8 36 for (i = 0; i < attrs.length; ++i)
8 37 hash[attrs[i].split(';')[0]] = unescape(attrs[i].split(';')[1])[0]])
8 40 normalizePath : function(path) {
8 41 if (path.startsWith('/'..')) return path)
8 42 return path.replace(/?'s/some/g/g/g/g, '/')
8 44 return pathsTo/else
8 48 configure : function(environment : function() {
8 49 configure : function() {
8 50 if (environment = this.environment = this.environment = map[environment]) return environment] || { return configure : config.environment }
8 51 this.environment = map[environment] || config.configure(this.environment || 'development's') }
8 52 return this.configure() return 'test' }
8 54 return \'test\'s\'s\'s\'s\'s\'s\'s\'s\'s\'s)
8 56 } : function(){
8 57 Express.run()
8 58 Express.mutes = []
8 59 Express.plugins = []
8 61 Express.settings =
9 4 this.response.uri.path = Express.normalizePath(Express.response.body)
9 5 Express.hook('request', request, response);
9 6 this.response.body = this.respond(body);
9 7 this.response.statusCode = 200;
9 8 Express.response.body = this.response.body || '';
9 9 Express.response.clearCookie();
9 10 Express.response.setHeader('Set-Cookie', Express.hashToArray(arguments)));
9 11 return Express.response;
9 12 } : function(body){
9 13 return this.response.body = body;
9 15 clearCookie : function(cookie) {
9 17 for (var key in this.response.cookie)
9 18 if (this.response.cookie.hasOwnProperty(key))
9 19 hash[key] = this.response.cookie[key];
9 22 defaultRoute : function() {
9 23 this.header('Content-Type', 'text/html');
9 24 this.respond();
9 28 root : function(root, options) {
9 29 return this.path === root
9 31 match : function(path) {
9 32 return this.header('Content-Type', 'text/html; charset=utf-8');
9 34 Server : function(port, host) {
9 35 var self = this
9 36 this.host = host
9 37 this.port = port
9 38 return this.server.address().
9 39 if (this.server.running)
9 40 return this.server.callback.call(this, this.argsArray(arguments))
