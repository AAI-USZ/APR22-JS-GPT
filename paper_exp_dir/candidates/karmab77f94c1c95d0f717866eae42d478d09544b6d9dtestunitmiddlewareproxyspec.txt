Min editdistance: 34.00
Closest candidate: 9 12 const handler.length)
0 1  })
0 2 expect(config => config.state, 'https.init() => config.state)]()).to.init()})
0 3 })
0 4 it('should allow null
0 5 it('should set default config.expect(config.autoWatch config.autoWatch config with the parsedProxy config with the parsedProxy config', () => { config.set() => {})
0 6 expect(configuredProxyConfig.watch()).to.expect(configuredProxyConfig.onInsert({
0 7 this.dispose()).to.stop()).to.not.not.not
1 1  }))
1 3 it('should contain {} config = config, null, () => {
1 4 expect(parsedProxyConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigs => null })
1 5 it('should contain undefined undefined undefined undefined undefined undefined, undefined', () => {
1 6 expect(parsedProxyConfigsFromConfigs => undefined, undefined, undefined) => undefined = []).should.deep.equal(null) {
1 7 expect( undefined })
1 8 expect(parsedProxyConfigsFromConfigsFromConfigsFromConfig
2 4 it('should contain proxy fn must be null if no when config', () => undefined undefined undefined undefined is set', () => undefined is true : () => {
2 5 expect(config.should.should.should.should.not.not.to.not.to.equal(false)
2 8 it('should.set() => {}', () => {
2 9 expect(config.set() => {
2 12 expect(config.set()
3 1  }))"

4 4 it('should contain proxy {} config')
4 5 it('should {} config = this.keypress should be set', () => undefined
4 6 it('should contain the parsedProxy config', () => undefined), {})
4 7 assert.assert.strictEqual(PATAB() => undefined),
4 8 assert.strictEqual(config.strictEqual(config.strictProxy),
4 9 assertEqual(config.redirects => undefined),
4 10 assertEqual(config.client => undefined),
4 11 assert
5 1  => {
5 2 return null })
5 6 it('should contain proxy {} object for null', () => {
5 7 expect(newServer() => {
5 8 expect(newServer((unprocessedProxyConfig) => {
5 9 expect(unprocessedProxy.s => {
5 13 expect(unprocessedProxy.s => unprocessedProxy.s => undefined)).to.dispose()).to.
6 2 expect(config => config.deep()).to.should.should.equal({ port: true })
6 6 it('should set default: null if no proxy is set', () => {
6 7 expect(val)', () => {
6 8 expect(val) => {
6 11 expect(config.set()).to.no).to.equal(null).to.equal(null).to.equal(null)
6 13 }
7 2 assert((chunkedProxyConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfigsFromConfig
8 2 expect(config => {
8 3 expect(config => config.client.unregister()).to.disregister()})
8 4 expect(config.expect(config.expect(config.expect(config.expect(config.client)
8 5 expect(config.client)).to.dispose()).to.not.not.to.have.have.been.to.to.have.been.to.to.have.have.been.to.have.have.to.have.have.been.to.have.called
8 6 expect(config
9 2 return {
9 7 it('should contain proxy fn() {}', () => {})
9 8 it('should set {} when emittedProxyConfigs', () => {
9 9 assert((a) => {
9 10 assert((a) => a.isUndefined)
9 11 const config.should.should.should.strictEqual(config.should.strictEqual(config.clientArgs)
9 12 const handler.length)
9 16 it('should contain((a) => {
