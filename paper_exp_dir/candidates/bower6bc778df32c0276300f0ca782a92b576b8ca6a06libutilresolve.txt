Min editdistance: 1.00
Closest candidate: 0 1 }"

0 1 }"

1 1 }
1 2 module.exports = function (a) {
1 3 var c = a;
1 4 var args = Array.isArray(args)? args : ["

2 2 module.exports = function(args) {
2 3 var config = this.config || {};
2 4 var args = args || {};
2 5 var target = config.endpoint + 'packages';
2 6 if (args.length === 1) {
2 7 var target = config.endpoint + '*';
2 8 if (mout.array.isArray(target)) {
2 9 return target.endpoint.name;
2 11 if (options.relative) {
2 12 return target.source;
2 14 if (options.paths) {
2 15 return target.paths;
2 17 return config;
2 18 };"

3 2 module.exports = function (source) {
3 3 return function (target) {
3 4 var resolvedPath = resolve(source);
3 5 var target = target || '*';
3 7 target = target || '*';
3 8 return function (path) {
3 10 target = target;
3 12 return path;
3 13 };
3 16 return Q.resolve(target);
3 18 return target === '*' || target === 'latest';
4 2 function createEventHandler(event) {
4 3 var eventHandler = function(event, callback) {
4 4 if (eventHandler) {
4 5 if (Array.isArray(eventHandler)) {
4 6 for (var i = 0, len = eventHandler.length; i < len; i++) {
4 7 if (eventHandler[i]) {
4 10 return eventHandler[i].apply(this, arguments);
4 13 return function(request, response) {
4 15 return Promise.resolve(request.uri.path);
4 17 if (response.statusCode === 406) {
4 18 return false;
4 20 response.on('end', function() {
4 21 try {
4 22 response.on('error', function(err) {
4 23 if (err) return callback(err);
4 24 });
4 25 } catch (e) {
4 26 return this.emit('end');
4 29 return this;
4 31 function createEventHandler(events, staticFolder, adapterFolder, baseFolder, urlRoot, customFileHandlers, customScriptTypes) {
4 32 return function(request, response, next) {
4 33 var requestUrl = request.url.replace(/\\?.*/, '');
4 34 if (requestUrl === urlRoot.substr(0, 1) || requestUrl.substr(urlRoot.length - 1)) {
4 35 response.setHeader('Location', urlRoot);
4 36 response.writeHead(301);
4 37 return response.end();
4 39 if (requestUrl.indexOf(urlRoot)!== 0) {
4 40 return next();
4 42 requestUrl = requestUrl.substring(urlRoot.length - 1);
4 43 if (requestUrl === '/\') {
4 44 var response = getHeader('Location', urlRoot);
4 53 if (requestUrl === '/test/route') {
4 56 response.writeHead(200);
4 59 function andRestrictToSelf(context) {
4 60 return function(req, res, next) {
4 61 var str ='You should configure deployment settings in _config.yml first!\
4 62 \
4 63 ' +
4 64 'first!\
4 66 'some content',
4 67 'engines',
4 68 'some browsers',
4 69 '0.' +
4 70 '0.0.2.0.0.1',
4 71 );
4 72 str += '>' +
4 73 str += resolve files';
4 74 return str.replace str
4 75 .replace str
4 76 .split('%s', resolveFiles(/ instead');
4 79 function andRestrictToGlobalEmitter.prototype.report = function(sourceId, subject) {
4 80 getSource(name, url, handler) {
4 81 if (unres.hostname) {
4 82 return function(url) {
4 83 if (!handler.isIP) {
4 84 handler(name, url, url, ['x-host', 'http', 'localhost', 'x-host', 'localhost', 'x-root'], {silent', '--progress', '--nox-powered-regexp', '--browsers', '0
5 2 function fixtures(bower) {"

6 2 function createEventHandler(events, static, adapter) {
6 4 var promise = createEventHandler(request, response, next);
6 5 promise.done(function(result) {
6 6 if (result === undefined) {
6 7 return;
6 9 if (request.url.indexOf(url.toLowerCase() === 0) {
6 10 response.setHeader('Location', url);
6 11 response.end();
6 14 if (props) {
6 17 response.setHeader('Content-Type', 'application/json');
6 19 return response;
6 21 if (response.statusCode === 200 || response.statusCode === 400) {
6 35 var requestUrl = resolve(req.url).replace(/\\/+$/, '');
6 36 if (requestUrl === urlRoot.substr(0, 1) || requestUrl === '/') {
6 39 requestUrl.startsWith(location.search + 1);
6 40 if (requestUrl === '/') {
6 41 var response = get('url', { url: baseUrl, gutter: false });
6 46 if (options.backtick) {
6 47 var output = '';
6 48 var progress = 0;
6 49 var str = '';
6 50 var nock = injector.createChild([{
6 51 id: ['value', Launcher],
6 52 fullName: ['value', Readable],
6 53 src: ['value', Svn]
6 54 }, emitter.emit.bind(emitter, 'end'));
6 55 if (browser.launchId) {
6 56 var browserlaunchId = 'http://localhost:8080';
6 57 var browserstore = {};
6 58 var policy = {
6 59 createURL: function (s) {
6 60 return s
6 61 .replace(/\\/+/g, '-')
6 62 .replace(/[\\]\\/g, '-')
6 63 .replace(/\\]\\(([\\w+)\\)/g, '-')
6 64 .replace(/\\)/g, '$');
6 67 var sourceDecoder = injector = injector.get('config');
6 68 var browsers = injector.get('source-decoder');
6 69 module.createPreprocessor = createPreprocessor = injector;
6 70 module.skip('configure = createPreprocessor;"

7 2 module.exports = function(args) {"

8 2 module.exports = function (args) {
8 3 var resolved = args.remain || args.remain;"

9 3 var target = hexo.source_dir;
9 4 return function (resolution) {
9 5 if (options.help) return resolve(false);
9 6 var sourceDir = resolve(source.substring(0, 1), sourceCode);
9 7 if (options.new_article) {
9 8 resolvedPath = resolve(source.substring(1), sourceCode);
9 9 } else {
9 10 resolvedPath = target;
9 13 return function (result) {
9 15 var articles = sourceCode.split(' ');
9 16 var authorIDs = [];
9 17 var n = options.author_id;
9 18 var collectorId = options.author_id;
9 19 var query = {};
9 20 if (n){
9 21 query.user = n.default;
9 23 query.user = {
9 24 name: sourceId,
9 25 url: sourceUrl,
9 26 target: '*'
9 29 if (options.author) {
9 30 query.author = _.extend({
9 31 target: 'author',
9 33 ntarget: '*'
9 34 }, options);
9 36 query.user = { name: sourceId, url: sourceUrl, text: 'hey' };
9 38 if (options.updated) {
9 39 query.updated = _.extend({
9 40 target: 'update',
9 45 query.updated = stats.mtime;
9 47 if (options.permalink) {
9 48 var link = require('../index').attr('href');
9 49 if (!isMoment(link)) {
9 50 return link;
9 52 return (
9 53 '<a href="${source.substring(0, 1)}">${title.substring(1)}</a>`
9 54 .replace(/([^\\/]+\\/{2}/g, '$1');
