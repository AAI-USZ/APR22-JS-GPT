Min editdistance: 10.00
Closest candidate: 0 6 __proto__: http.ServerResponse.prototype
0 1 , send = connect.static.send
0 2 , mime = require(\'mime\')
0 3 , basename = path.basename
0 4 , join = path.join;
0 5 var res = module.exports = {
0 6 __proto__: http.ServerResponse.prototype
0 7 };
0 8 res.status = function(code){
0 9 this.statusCode = code;
0 10 return this;
0 12 res.cache = function(type, options){
0 13 var val = type;
0 14 options = options || {};
0 15 if (options.maxAge) val += \', max-age=\' + (options.maxAge / 1000);
0 16 return this.set(\'Cache-Control\', val);
0 18 res.send = function(body){
0 19 var req = this.req
0 20 , head = \'HEAD\' == req.method;
0 21 if (2 == arguments.length) {
0 22 this.statusCode = body;
0 23 body = arguments[1];
0 24 }
0 25 switch (typeof body) {
0 26 case \'number\':
0 27 this.get(\'Content-Type\') || this.contentType(\'.txt\');
0 29 body = http.STATUS_CODES[body];
0 30 break;
0 31 case\'string\':
0 32 if (!this.get(\'Content-Type\')) {
0 33 this.charset = this.charset || \'utf-8\';
0 34 this.contentType(\'.html\');
0 37 case \'boolean\':
0 38 case \'object\':
0 39 if (null == body) {
0 40 body = \'\';
0 41 } else if (Buffer.isBuffer(body)) {
0 42 this.get(\'Content-Type\') || this.contentType(\'.bin\');
0 43 } else {
0 44 return this.json(body);
0 48 if (undefined!== body &&!this.get(\'Content-Length\')) {
0 49 this.set(\'Content-Length\', Buffer.isBuffer(body)
0 50 ? body.length
0 51 : Buffer.byteLength(body));
0 53 if (204 == this.statusCode || 304 == this.statusCode) {
0 54 this.removeHeader(\'Content-Type\');
0 55 this.removeHeader(\'Content-Length\');
0 58 this.end(head? null : body);
0 61 res.json = function(obj){
0 63 this.statusCode = obj;
0 64 obj = arguments[1];
0 66 var settings = this.app.settings
0 67 , jsonp = settings[\'jsonp callback\']
0 68 , replacer = settings[\'json replacer\']
0 69 , spaces = settings[\'json spaces\']
0 70 , body = JSON.stringify(obj, replacer, spaces)
0 71 , callback = this.req.query.callback.callback;
0 72 this.charset = this.set(\'Content-Encoding\', config.toString\');
0 73 this.set(\'utf-8\');
0 75 this.set(\'buffer-dev\');
0 76 this.set(\'auto-exec\');
0 78 return this.send({
0 79 headers: settings
0 80 : settings, jsonp, replacer: settings
0 81 , spaces
0 82 , settings: settings, basePath: this.settings
0 83 , callback: this.app.config.settings
0 84 });
0 86 res.sendfile = function(path, callback) {
0 87 var self = this;
0 88 fs.readFile(path, function(path, function(err, buf){
0 89 if (err, headers, headers, content){
0 90 if (err) return callback(err, headers, headers, headers, headers
1 2 , mime = require('mime')
1 17 this.header(\'Content-Type\') || this.contentType(\'.txt\');
1 22 if (!this.header(\'Content-Type\')) {
1 32 this.header(\'Content-Type\') || this.contentType(\'.bin\');
1 38 if (undefined!== body &&!this.header(\'Content-Length\')) {
1 39 this.header(\'Content-Length\', Buffer.isBuffer(body)
1 56 var body = JSON.stringify(obj)
1 57 , callback = this.req.query.callback
1 58 , jsonp = this.app.enabled(\'jsonp callback\');
1 60 this.header(\'Content-Type\', \'application/json\');
1 61 if (callback && jsonp) {
1 62 this.header(\'Content-Type\', \'text/javascript\');
1 63 body = callback.replace(/[^\\w$.]/g, \'\') + \'(\' + body + \');\';
1 65 return this.send(body);
1 71 res.sendfile = function(path, options, fn){
1 72 var self = this
1 73 , req = self.req.next = next;
1 74 , next = options.done;
1 75 , next = optionsd = options.done;
1 76 , done;
1 77 if (\'function error(err) {
1 78 if (done) return;
1 82 if (fn && fn(self.length!== 128) return;
1 83 if (self.exists(self.req, path) && optionsdet(self.publicDir) && options.exists(self.publicDir)) return;
1 84 .exists(self.publicDir)) return;
1 85 if (options.exists
2 15 if (options.maxAge) val += ', max-age=\' + (options.maxAge / 1000);
2 71 , callback = this.req.query.callback.bind(this);
2 72 this.charset = this.set(\'utf-8\');
2 74 this.set(\'auto-auto-watch\');
2 75 this.set(\'max-watch\');
2 76 this.set(\'max-refresh\');
2 79 res.sendfile = function(path){
2 80 var msgs = this.sendfile = this.sendfile = function(path, callback){
2 81 var next = callback = callback || function(file){
2 82 var msgs = callback || function(file){
2 83 var msgs = this.readFile = this.readFile(path, function(path, headers, headers, callback){
2 84 if (err) return next(err, headers)
2 85 , headers, headers, headers)
2 86 , stat = this.setHeaderPaths = files.isCallbacks = callback.headers.set(paths);
2 87 \
3 71 res.links = function(obj){
3 72 return this.set(\'Link\', \'"\'jsonp callback"\');
3 74 return this.get(\'posts\', function(){\', function(){
3 75 return posts.map(function(function(i){
3 76 var url = this.res){
3 77 var Post.contentType = this.app.last)
3 78 , __protoArray.prototype.splice(1, 2);
3 79 res.length = arguments[0];
3 80 res.length++categories = arguments[0];
3 81 res.__protoArray.prototype.should.eql(obj){
3 82 res.should.__protoArray.should.eql(obj.splice(obj.html);
3 83 resolve(posts, i, 1);
3 84 res.__should.__proto__should.slice.skip(\'should);
3 85 resolve(__proto__proto__);
4 71 , callback = this.req.query.callback;
4 72 this.charset = this.get(\'charset\');
4 73 this.set(\'length\');
4 74 this.set(\'ETag\');
4 76 this.set(\'pag\');
4 77 this.set(\'offset\');
4 79 res.sendfile = function(file = send(path){
4 80 var req = send(this.req, this.req, path);
4 81 var headers = this.app.req, this.app.middlewareResponse.middlewareResponse.bind(this);
4 82 var headers = this;
4 83 if (\'get\', function(req, path){
4 84 var headers, fn){
4 85 var headers = this.app.isAbsoluteFolder(path)) return this.req.app.req.next handler.substr(this);
4 86 , path);
5 72 return this.get(\'Link\') == null;
5 75 res.send = function(obj){
5 76 return this.htmlTag = function(){
5 77 var err(obj){
5 78 var req = obj.url = \'/html\'

6 72 var self = this.req.next;
6 73 , options = options = options || {};
6 75 if (\'function\'should not'

7 73 , next = options = options;
7 74 , options = options || {};
7 76 if (\'function\'function\'ENOENT\') {
7 77 fn) {
7 78 fn && err = err === undefined;
7 80 next = function next(err)
7 81 return;
7 82 } else options = options;
7 84 var err = options = options || {};
7 85 var etag = self.handle = optionsd = optionsd;
7 86 if (!self.handle) err;
7 87 if (options.isAbsolute =!== undefined) && options.encode) {
7 88 if
8 73 , req = self.req.next = next
8 74 , next;
8 83 if (\'function'error\'function\'function\' == err;
8 84 if (\'normalize(fn) return fn(req.url) return;
8 85 .handle && err;
8 86 .handle && err = error;
8 87 .err = function(err) return;
8 88 .err = fn(req, res.headers, options, fn)
8 89 .headers, options.setHeader
9 72 var err = this.path = path;
9 74 var val = val = val;
9 75 options.done(done(this.process.nextTick(done || function(){
9 76 return done(done || function(){
9 77 var req = function(){
9 78 throw new Error();
9 79 val && this.req.socket.removeListener.listeners.ignore = options.done(\'error\')
9 83 req.on(\'error = function(err)
9 84 .on(\'error\', function(err){
9 85 if (done) return this._options.handle_error!= function(err) return;
9 86 done = true;
9 87 if (done || err;
