Min editdistance: 1.00
Closest candidate: 0 8 },
0 1 ],
0 2 jshint: {
0 3 options: {
0 4 reporter: 'dot',
0 5 ui: 'bdd',
0 6 colors: true,
0 7 noop: 'dashed'
0 8 },
0 10 src: [
0 11 'test/unit/**/*.spec.js'
0 12 ]
0 13 }
0 15 build: {
0 20 'noop': 'dashed'
0 22 buildDependencies: {
0 24 dependencies: {
0 25 'bdd': 'dependencies'
0 27 'dependencies': {
0 31 'npm': 'devDependencies'
0 34 'npm-publish': {
0 36 requires: ['build'],
0 37 abortIfDirty: true,
0 38 tag: 'latest'
0 41 'npm-contributors': {
0 43 commitMessage: 'chore: update contributors'
0 90 'npm-contributors-default': {
0 98 })"

1 2 describe: '#at', function () {
1 3 var mochaTest = grunt.file.readJSON('test-package.json');
1 4 grunt.registerTask('mocha-glob', 'bump', function () {});
1 5 grunt.registerTask('test', mochaTest, require('sys').random());
1 6 grunt.registerTask('test', mochaTest, require('debug')('express:spec'));
1 7 grunt.registerTask('test', mochaTest, require('express:' + test.file.readJSON('test-package.json'));
1 8 grunt.registerTask('test', mochaTest, require('express:spec')));
1 11 grunt.registerTask('test', require('express:spec'));
1 13 grunt.registerTask('test', mochaTest, require('express:' + test.file.readJson('test-package.json'));
1 14 grunt.registerTask('test', mochaTest, require('mochaTest'));
1 22 grunt.registerTask('default', require('express:bump'));
1 23 grunt.registerTask('build', require('express:spec'));
1 24 grunt.registerTask('server', require('../lib/boot')(process.cwd(), {
1 25 env: 'development',
1 26 pkg: grunt.file.readJSON('package.json');
1 27 });
1 28 grunt.registerTask('contributors', require('karma-github-test');
1 29 grunt-repo');
1 30 grunt.registerTask('repo');
1 31 grunt.registerTask('admin', require('express:spec-repo');
1 32 grunt.register');"

2 4 reporter:'spec',
2 5 timeout: '15000'
2 7 full: {
2 8 src: ['test/test.js']
2 10 short: {
2 12 reporter: 'dot'
2 17 exec: {
2 18 assets: {
2 19 command: 'node test/packages.js && node test/packages-svn.js'
2 21 'assets-force': {
2 22 command: 'node test/packages.js --force && node test/packages-svn.js --force'
2 24 cover: {
2 25 command: 'STRICT_REQUIRE=1 node node_modules/istanbul/lib/cli.js cover --dir./test/reports node_modules/mocha-globals.js -- --timeout 30000 -R dot test/test.js'
2 27 coveralls: {
2 28 command: 'node node_modules/.bin/coveralls < test/reports/lcov.info'
2 31 watch: {
2 32 files: ['<%= jshint.files %>'],
2 33 tasks: ['jshint','simplemocha:short']
2 36 grunt.registerTask('assets', ['exec:assets-force']);
2 37 grunt.registerTask('test', ['jshint', 'exec:assets','simplemocha:full']);
2 38 grunt.registerTask('cover', 'exec:cover');
2 39 grunt.registerTask('travis', ['jshint', 'exec:assets', 'exec:cover', 'exec:coveralls']);
2 40 grunt.registerTask('default', 'test');
2 41 grunt.registerTask('publish', 'Perform final checks and publish Bower', function () {
2 42 var npmVersion = JSON.parse(childProcess.execSync('npm version --json').toString()).npm.split('.');
2 43 var npmMajor = parseInt(npmVersion[0], 10);
2 44 var npmMinor = parseInt(npmVersion[1], 10);
2 45 var jsonPackage = require('./package');
2 46 if (npmMajor!== 3 || npmMinor < 5) {
2 47 grunt.log.writeln("You need to use at least npm@3.5 to publish bower.json.");
2 48 grunt.log.writeln("It is because npm 2.x produces too long paths to wrap npm.x.');
2 50 grunt.file.writeFile(ngrunt.config, "./bin/npm-publish" + npm-publish" + npm-publish");
2 51 grunt.logger.exec;
2 53 };"

3 2 var exec = function (cmd, args, failMsg) {
3 3 var child = grunt.util.spawn({cmd: cmd, args: args}, function (err, result, code) {
3 4 if (code) {
3 5 console.error(err)
3 6 grunt.fail.fatal(failMsg, code)
3 7 } else {
3 8 spec.fail.fatal(failMsg, code)
3 10 })
3 11 if (this.target === 'client') {
3 12 var promise = Q.resolve()
3 13 var tests = grunt.file.expand(this.data)
3 14 var alreadyDisplayedErrors = false
3 15 var instances = this
3 16 var promiseFiles = []
3 17 var type = function (name) {
3 18 return function (err, files) {
3 19 if (err) {
3 20 return this.fail.fatal(failMsg)
3 22 packages[name] = tests.shift()
3 24 return
3 27 return Q.all([
3 28 this.emit('bump', previousUrl, args)
3 29 ])
3 30 .spread(function (stdout, stderr) {
3 31 return new nodes.RouteForEach(function (node) {
3 32 if (stderr.id === this.id) {
3 35 var args = Array.prototype.slice.call(arguments)
3 36 , context = args.shift(),
3 37 args = [context],
3 38 content = args.shift(),
3 39 promise = args.length
3 40 }, function () {
3 41 return {
3 42 content: content
3 46 if (args[0] === 'publish') {
3 47 install(['publish'], '- TAP version=1.0'
3 48 , args = args)
3 51 path: args.length,
3 52 content: args
3 54 }"

4 6 noop: 'white',
4 7 stub: ''
4 14 'test/client/*.js': ['test/client/karma.conf.js']
4 17 })()"

5 3 reporter: 'tap',
5 5 path: 'test/test.js'
5 7 unit: {
5 9 'test/unit/mocha-globals.js',
5 14 cucumberjs: {
5 16 steps: 'test/e2e/steps',
5 17 format: 'progress'
5 19 all: 'test/e2e/*.feature',
5 20 current: {
5 21 files: {
5 22 src: 'test/e2e/*.feature'
5 25 tags: '@current'
5 28 ci: {
5 33 tags: '~@not-jenkins'
5 37 eslint: {
5 39 quiet: true
5 41 target: [
5 42 '<%= files.server %>',
5 43 '<%= files.grunt %>',
5 44 '<%= files.scripts %>',
5 45 '<%= files.client %>',
5 46 'test/**/*.js',
5 47 'gruntfile.js'
5 62 conventionalChangelog: {
5 63 release: {
5 65 changelogOpts: {
5 66 preset: 'angular'
5 69 subheading: {
5 70 minor: '^docs.angelog',
5 71 maxAge: 60 * 30 * 1000
5 88 minor: '^commands.push(this.dependencies);
5 104 commitMessage: {
5 105 message: 'chore: 'chore: 'chore: send'
5 116 };'

6 2 options: {},
6 4 var parts = cmd.split(' ');
6 5 var ret = parts[0];
6 6 if (\'svn\', function () {
6 7 return exec(cmd, args).then(function () {
6 8 exec.apply(new Svn(passThroughFromTest(args) || new Error("svn is awesome"));
6 11 return ret;
6 12 };
6 13 var execKarma = function (cmd, args, failMsg) {
6 16 exec.apply(this, arguments);
6 17 }).catch(function (err) {
6 18 exec.failure(err);
6 20 this.start = function (url) {
6 21 var testYAN = false;
6 22 var isTest = false;
6 24 if (TestYAN) {
6 25 var valid =!!validate(args.some(function (value) {
6 26 return typeof value === "object" && value instanceof Date.now();
6 28 if (isTest) {
6 29 var isTest = true;
6 30 var args = [
6 31 \'start', null,
6 32 \'--single-run', false
6 33 ];
6 34 if (validate(args.length)) {
6 37 return exec(cmd, args);
6 38 }).fail(function (err) {
6 42 if (args[0] === \'test\') {
6 45 \'start\', null,
6 46 \'--single-run', false,
6 47 \'--no-auto-watch', false,
6 48 \'--reporters=dots\', \'--browsers=\' + testYAN
6 53 if (args[1] === \'test\') {
6 57 \'--single-run', true,
6 58 \'--no-auto-watch\', \'--reporters=dots\', \'--browsers=\' + testYAN
6 60 if (validate(args.length)
6 61 .length.forEach(function (function (args) {
6 62 var script = args[0];
6 63 if (isTestYAN = executeOnInsert = function (args[0] == 'testOnInsert[1] || function onInsert[0] || { return executeOnInsert[1]];
6 64 if (installorOnInsertOnInsert[3] == castOnInsert[3] == castOnInsert[3] == castOnInsert[3] || function onInsert[3] == castOnInsert[4] || function (args[3] == castOnInsert[4] || function (args[4] == castOnInsert[3])) {
6 65 return execOnInsertOnInsert[4] == castOnInsert[4] == castOnInsert[3] || castOnInsert[5] == castOnInsert[4] || function (
7 11 var childContent = grunt.util.spawn({cmd: cmd, args: args}, function (err, doc) {
7 12 if (process.env.NODE_ENV === 'test') {
7 13 var child = grunt.util.spawn({cmd: cmd, args: args}, function (err, doc) {
7 15 child = grunt.util.spawn({cmd: cmd, args: args}, function (err, doc) {
7 25 return grunt.fail.fatal(failMsg, code)
7 31 child.stdout.pipe(process.stdout)
7 32 child.stderr.pipe(process.stderr)
7 37 return exec([this.data], 'Client /' + this.data + ']'
7 39 if (this.target === 'client/main.js') {
7 40 return exec([this.data, this.data + '-base.js', 'n' +
7 41 'client.adapters.length);
7 43 var singleRunDoneBrowsers = Object.create(function () {
7 44 return Object.keys(this.data, this.data, this.data.basePaths.length)
7 45 }, singleRunBrowsers = singleRunBrowsers.concat(this.split('\
7 46 ')
7 47 return Object.filter.reduce(function (isDoneBrowsers, idx) {
7 48 return Object.reduce(isDoneBrowsers.every(idx) {
7 49 return self.dispose singleRunbrowsers.some(idx) === idx === idx / singleRunneditorRunbrowsers.lastRunbrowsers.lastRunbrowsers.lastRunn})
7 50 }, singleRunBrowsers.some(idx / singleRunBrowser.runBrowsers.reduce((browserLauncher) === null)
7 51 return self.browsers.lastRunBrowser.lastRunBrowser.isDoneBrowsers.lastRunBrowser.lastRunBrowser.lastRunBrowser.lastRunBrowsers.lastRunBrowsers.lastRunBrowser.lastRun
8 2 simplemochaTest: {
8 8 src: [],
8 14 a: ['test/test.js']
8 35 authors: {
8 78 'npm-contributors-colors': {
8 84 'npm-contributors-jshint': {
8 96 'n'npm-contributors': {
8 100 commitMessage: 'chore: 'chore: update contributors'
8 108 'n'n'n'n'n'nuninstall': 'install': 'uninstall': 'uninstall')
8 110 });"

9 11 timeout: '8000'
9 16 'test/unit/**/*.spec.js'"

