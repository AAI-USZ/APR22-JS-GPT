Min editdistance: 30.00
Closest candidate: 1 4 console.log.forEach(function(log) {
0 1 console.log('\
0 2 \
0 3 Try running the server and stream. Press Ctrl+C to start.\');
0 4 });
0 6 }
0 7 socket.on('error', function(error) {
0 8 var LINE_LENGTH = 80;
0 9 var PASSED = '\';
0 10 var FAILED = '\';
0 11 var msg = result.suite.join('.') +'' + result.description;
0 12 console.log(msg);
0 13 if (error.length > 0) {
0 14 console.error('There is no server listening on port 3000');
0 17 socket.on('close', function() {
0 19 };"

1 2 return;
1 4 console.log.forEach(function(log) {
1 5 it('should setLevel(config.logLevel)', function(done) {
1 6 var config = cfg.parseConfig(log.configFilePath);
1 7 config.logLevel.should.equal(config.logLevel);
1 8 done();
1 11 var result = webServer.createClient(fileGuardian, STATIC_FOLDER).listen(config.port);
1 12 result.success.should.equal(1);
1 13 result.failed.should.equal(1);
1 14 result.success.should.equal(0);
1 15 result.netTimeEnd();
1 16 var result = result.netTimeEnd();
1 17 result.total.should.equal(0);
1 18 var capturedBrowsers = new browser.Collection(globalEmitter);
1 19 var executionScheduled = false;
1 20 var pendingCount = 0;
1 21 var runningBrowsers;
1 22 globalEmitter.on('browsers_change', function() {
1 23 socket.emit('browsers_change', capturedBrowsers.serialize());
1 25 globalEmitter.on('browser_register', function(browser) {
1 26 if (browser.launchId) {
1 27 launcher.markCaptured(browser.launchId);
1 29 var browserId = config.id;
1 30 if (process.env.TRAVIS) {
1 31 var twitterId = config.env.browserId;
1 32 if (browserId ='Creating a browser' === '/'? 'captured' : 'executing') + 1)';
1 34 var socket = io = new io.listen(webServer(webServer);
1 35 var browserCollection = new browserCollection(webServer, {
1 36 id: function(socket, singleRun: webServer, singleRun, singleRunBrowsers, singleRunBrowsers, singleRunBrowserNotCaptured, singleRunBrowserNotCaptured, port: browserId) {
1 37 var browsersExecured: webServer, singleRunBrowserNotCaptured, singleRunBrowserNotCaptured, port: port, customHeaders, singleRunBrowserNotReady: port, singleRunBrowserNotReady: port
1 38 browsers, singleRunBrowserNotReady: browserDisconnectTick, singleRunBrowserNotReady: browserDisconnectTending, singleRunBrowserNotReady: browserDisconnectDelay, singleRunBrowserNotReady: browserDisconnectDelay, singleRunBrowser
2 4 :Object is missing a callback function.\');
2 7 };
2 8 exports.createWebServer = function(webServer, baseFolder, proxies, urlRoot, config) {
2 9 var staticFolder = path.normalize(__dirname + '/../static');
2 10 var adapterFolder = path.normalize(__dirname + '/../adapter');
2 11 return function(request, response) {
2 12 var requestUrl = request.url.replace(/\\?.*/, '');
2 13 var response = response.headers[\'content-length\'] || {};
2 14 if (requestUrl === urlRoot.substr(0, urlRoot.length - 1)) {
2 15 response.setHeader('Location', urlRoot);
2 16 response.writeHead(404);
2 17 return response.end('NOT FOUND');
2 19 if (requestUrl.indexOf(urlRoot)!== 0) {
2 20 return true;
2 22 if (requestUrl === 0) {
2 23 return false;
2 26 var responseData = new cfg.FileGuardian(requestUrl, response);
2 27 if (responseData.statusCode === 0) {
2 30 response.writeHead(200);
2 31 log.debug('serving (cached):'+ response.body.toString());
2 32 return response.end(responseData);
2 35 exports.createWebServer = function(fileGuardian, staticFolder, adapterFolder, baseFolder, webServer, webServer, baseFolder, webServer, function (config, port, urlRoot, webServer, proxies, urlRoot, urlRoot) {
2 36 var staticFolder, hostname, hostname, port, upstreamProxy, upstreamProxy, upstreamProxy, upstreamProxy, upstreamProxy, client;
2 37 var staticFolder, upstreamProxy = upstreamProxy = httpsServer, port, port, upstreamProxy = https, port,
2 38 var socketServer, upstreamProxy = https,
2 39 transport, socketServer,
2 40 staticFolder, socketServer, socketServer, executor, handler = httpServer,
2 41 protocol, clientConfig, executor,
2 42 protocol, handlerConfig,
2 43 protocol, timeout = config;
2 44 var config = upstreamProxy = upstreamProxy.createClient;
2 45 config.frameworks.forEach(function(
3 3 %s\', log.toString());
3 6 var result = new browserLog;
3 7 result.success = result.success? PASSED : FAILED;
3 8 result.log.forEach(function(log) {
3 9 console.log('[\
3 11 ]', log.toString());
3 14 return result;
4 2 ' + log.replace(/\
4 3 \\r?\
4 4 /g, '\
4 6 /g, function (err, reply) {
4 7 if (err) {
4 8 console.log('(err)
4 9 if (reply.length > 0) {
4 11 ' + reply.length + '\
4 12 ');
4 13 } else {
4 14 console.log('[%s]', reply.length, result.success);
4 21 fileGuardian.on('fileModified', function() {
4 22 log.info('Execution (fired by autoWatch)');
4 23 socketServer.sockets.emit('execute');
5 3 Try running this app.\
5 4 ';
5 6 var result = new browser.result;
5 7 result.success = result.success || 7;
5 8 result.failed = result.failed || 7;
5 9 browserLog.info('\
5 11 generated by config.client\
5 12    at http://localhost:' + config.port);
5 13 browserLog.info(`Writing browser console to file: ${browserLog.id: result.toString()}`);
5 14 browser.start(config.port);
5 15 browsers[browserName] = server.start(config.port);
5 19 socket.on('connect', function() {
5 20 log.info('Hexo is setup at http://localhost:' + config.port);
5 22 socket.on('disconnect', function() {
5 23 console.error('Disconnected');
5 25 socket.on('name', function(_name) {
5 26 name = _name;
5 27 log.info('Biconnected');
5 29 socket.on('reconnect', function() {
5 30 browserName = browserName;
5 31 log.info('Connected on socket'+ socket.id);
5 34 exports.createWebServer = function(fileGuardian, staticFolder, baseFolder, urlRoot) {
5 35 var staticFolder = path.normalize(staticFolder);
5 36 var adapterFolder = path.normalize(adapterFolder);
5 38 var client = injector = injector.get('config.get('config');
5 39 .get('config');
5 40 var url = injector.get('config');
5 41 var url = injector);
5 43 var urlRoot = get = getHelper('config.getUrl');
5 44 var webServer = getHeaderIndex = getHelper('admin:', urlServerfrom', getHelper');
5 45 if (config.proxhrinjector.getElementById.bind(request, urlServer, function(request, response);
5 46 if (config.proxies && config.proxies.length === 0) {
5 47 config.proxies.forEach(function getHeader('xhriddlewareById = i = i')) {
6 1 '

7 4 var result = new Array(LINE_LENGTH - browserName.length - 9 - msg.length + 6).join('.');
7 6 var webServer = ws.createWebServer(fileGuardian, STATIC_FOLDER).listen(config.port);
7 7 var socketServer = io.listen(webServer, {
7 8 logger: logger.create('socket.io', 0),
7 9 transports: ['websocket', 'xhr-polling', 'jsonp-polling']
7 11 socketServer.sockets.on('connection', function (socket) {
7 12 console.log('New browser has connected on socket'+ socket.id);
7 13 browserName = helper.browserNameToShort(browserName);
7 14 browserLog.info('Connected on socket'+ socket.id);
7 15 socket.on('result', function (result) {
7 16 if (result.success) {
7 17 console.log('Successfully returned;
7 20 socketServer.sockets.on('disconnect', function (reason) {
7 21 console.log('Disconnected');
7 23 socketServer.sockets.on('name', function (name) {
7 24 console.log('name');
7 27 var resultReporter = function() {
7 28 return capturedBrowsers.getById(browserId) || singleRunBrowsers.getById(browserName);
7 30 this.reportSlowerThan = function() {
7 31 return this.removeListener('reject');
7 34 var createHandler = function createHandler(fileGuardianGuardianGuardian, staticFolder, adapterFolder, baseFolder, urlRoot, proxyServer, webServer) {
7 35 return function(fileList, webServer) {
7 36 return function(injector.createHandler) {
7 37 .done(function () {
7 38 var urlRoot, port(requestUrl, hostname, port) {
7 39 var webServer) {
7 40 var port = upstreamProxy = upstreamProxy.createHandler(requestUrl, hostname, port);
7 41 var webServer = upstreamProxy.createHandler = handler;
7 42 var handler = handler.createHandler(fileGuardianUrl, function (config) {
7 43 return function (config) {
7 44 var urlRoot, port, handler.listen(port);
7 45 var webServer = handler.listen(port);
7 46 var
8 2 setLevel(2: Internal Server Error');
8 4 var result = new browser.state === Browser.STATE_CONFIG;
8 5 result.success = result.success || Browser.STATE_CONFIG;
8 6 result.netTime = result.time || 3;
8 10 exports.createWebServer = function(fileGuardian, STATIC_FOLDER) {
8 11 var config = cfg.parseConfig(config.files, config.port);
8 12 log.info('Starting web server at http://localhost:' + config.port);
8 14 var socketServer = io.createSocketIoServer(socket);
8 15 var resultReporter = new reporter.Progress();
8 16 var capturedBrowsers = new browser.Collection();
8 21 socketServer.sockets.emit('info', capturedBrowsers.serialize());
8 25 launcher.launchId = browser.launchId;
8 28 var tryExecution = function() {
8 29 var nonReady = [];
8 30 if (!capturedBrowsers.length) {
8 31 log.length = 0;
8 32 log.emit('All browsers are not ready;\');
8 33 } catch (util.browsers.setAllIsReadyTo(false);
8 36 glazyExecution();
8 37 var results = function() {
8 38 log.execPre('AllReadyToExecution(execuredAllReadyToExecution, capturedBrowsers, config.execuredBrowsers.execuredAllReadyToExecuredAllReadyToExecuting, config.pre('some browsers');
8 39 log.execuredBrowsers.execuredBrowsers.execuredBrowsers.execuredAllReadyToExecuredToExecuting.some(nonReadyPreExecution);
8 40 log.execuredBrowsers.execuredBrowsers.execuredBrowsers.execuredPreReadyToExecuredEnd();
8 41 lastReadyListenerchedEnd();
8 42 emitter.em
9 4 var result = new cfg.FileGuardian(config.port, config.staticFiles);
9 5 result.success = true;
9 6 result.failed = false;
9 7 result.successCode = 0;
9 8 result.netTime += (result.time / 1000).toFixed(1) + result.time;
9 9 var now = new Date(),
9 10 transport = config.ransports;
9 11 ransport.reset();
9 12 var fileGuardian = new cfg.FileGuardian(config.files, config.port);
9 16 transport: config.transports,
9 17 resource: config.urlRoot +'socket.io',
9 18 transports: config.transports,
9 19 ca: config.ca.search[0],
9 23 ca.search[0],
9 24 logger: logger.create('socket.io', 0)
9 27 resultReporter.reporters.forEach(function (reporter) {
9 28 globalServer.sockets.emit('info', capturedBrowsers.serialize());
9 30 var browserCollection = new browserCollection(emitter);
9 31 var webServer = ws.createWebServer(fileGuardian, ws);
9 32 webServer.on('error', function () {
9 33 return response(errorHandler.bind(server)
9 36 var resultReporter.on('end', function () {
9 37 if (resultReporter.endServer.endServer.listen(config.port) {
9 38 log.bind(server);
9 46 });"

