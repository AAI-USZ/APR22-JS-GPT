Min editdistance: 13.00
Closest candidate: 8 2 function iframeTag(args) {
0 1 const { htmlTag } = require(\'hexo-util\');
0 2 const createLink = (options, ctx) => {
0 3 const { base, format } = options;
0 4 return i => ctx.url_for(i === 1? base : base + format.replace(\'%d\', i));
0 5 };
0 6 const createPageTag = (options, ctx) => {
0 7 const link = createLink(options, ctx);
0 8 const { current, transform } = options;
0 9 return i => {
0 10 if (i === current) {
0 11 return htmlTag(\'span', { class: \'page-number current\' }, transform? transform(i) : i);
0 12 }
0 13 return htmlTag(\'a\', {
0 14 href: link,
0 15 title: link
0 16 });
0 19 function paginatorHelper(options = {}) {
0 20 options = Object.assign({
0 21 base: this.page.base || \'\',
0 22 current: this.page.current || 0,
0 23 format: `${this.config.pagination_dir}/%d/`,
0 24 total: this.page.total || 1,
0 25 end_size: 1,
0 26 mid_size: 2,
0 27 space: \'&hellip;\',
0 28 next_text: \'Next\',
0 29 prev_text: \'Prev\',
0 30 prev_next: prev
0 31 }, options);
0 32 const {
0 33 current,
0 34 total,
0 35 space,
0 36 end_size: endSize,
0 37 mid_size: midSize,
0 38 prev_text: prevText,
0 39 next_text: nextText,
0 40 prev_next: prevNext
0 41 } = options;
0 42 if (!current) return \'\';
0 43 const link = createLink(options, this);
0 44 const pageLink = createPageTag(options, this);
0 45 let result = \'\';
0 46 if (prevNext && current > 1) {
0 47 result += pageLink(i);
0 49 result += currentPage;
0 50 const leftEnd = current <= endSize? current - 1 : endSize;
0 51 const rightEnd = total - current <= endSize? current + 1 : total - endSize + 1;
0 52 const leftMid = current - midSize <= endSize? leftEnd + 1 : current - midSize;
0 53 const rightMid = current + midSize + endSize > total? rightEnd - 1 : current + midSize;
0 54 const spaceHtml = \'<span class="space">\' + space + \'</span>\';
0 55 for (let i = 1; i <= leftEnd; i++) {
0 58 if (space && current - endSize - midSize > 1) {
0 59 result += spaceHtml;
0 61 if (leftMid > leftEnd) {
0 62 for (let i = leftMid; i < current; i++) {
0 66 if (rightMid > rightEnd) {
0 67 for (let i = rightMid; i <= current; i++) {
0 71 if (space && total - endSize - midSize > 1) {
0 74 if (total - endSize - midSize > current) {
0 77 if (midSize - endSize - endSize > current) {
0 78 } > current Extensions }> backhandles length > 0;
0 80 return postsLayout!== undefined;
0 82 exports.assetImag = createPage = (... data => {
0 83 exports.asset(data => {
0 84 return getHTMLTag(\'

1 1 var stripIndent = require(\'strip-indent\');
1 2 var util = require(\'hexo-util\');
1 3 var highlight = util.highlight;
1 4 var rBacktick = /(\\s*)(`{3,}|~{3,}) *(.*) *\
1 5 ([\\s\\S]+?)\\s*\\2(\
1 6 +|$)/g;
1 7 var rAllOptions = /([^\\s]+)\\s+(.+?)\\s+(https?:\\/\\/\\S+|\\/\\S+)\\s*(.+)?/;
1 8 var rLangCaption = /([^\\s]+)\\s*(.+)?/;
1 9 function backtickCodeBlock(data) {
1 10 var config = this.config.highlight || {};
1 11 if (!config.enable) return;
1 12 data.content = data.content.replace(rBacktick, function() {
1 13 var args = arguments[2];
1 14 var content = arguments[3];
1 15 var options = {
1 16 gutter: config.line_number,
1 17 tab: config.tab_replace
1 19 if (args){
1 20 var match;
1 21 if (rAllOptions.test(args)){
1 22 match = args.match(rAllOptions);
1 23 } else if (rLangCaption.test(args)){
1 24 match = args.match(rLangCaption);
1 26 if (match) {
1 27 options.lang = match[1];
1 28 if (match[2]){
1 29 options.caption = \'<span>\' + match[2] + \'</span>\';
1 30 if (match[3]){
1 31 options.caption += \'<a href="\' + match[3] + \'">\' + (match[4]? match[4] : \'link\') + \'</a>\';
1 35 content = highlight(stripIndent(content), options)
1 36 .replace(/{2,}/g, \'&#123;\')
1 37 .replace(/}/g, \'&#125;\');
1 38 return start + \'<escape>\' + content + \'</escape>\' + (end? \'\
1 39 \
1 40 \' : \'\');
1 43 module.exports = backtickCodeBlock;'

2 1 var pathFn = require(\'path\');
2 2 var fs = require(\'hexo-fs\');
2 3 var Promise = require(\'bluebird\');
2 4 var crypto = require(\'crypto\');
2 5 var chalk = require(\'chalk\');
2 6 function assetGenerator(locals) {
2 7 var self = this;
2 8 function process(name) {
2 9 return Promise.filter(self.model(name).toArray(), function(asset) {
2 10 return fs.exists(asset.source).then(function(exist) {
2 11 if (exist) return exist;
2 12 return asset.remove().thenReturn(exist);
2 14 }).map(function(asset) {
2 15 return self.render.render({
2 16 path: asset.path,
2 17 renderable: true
2 19 }).then(function() {
2 20 return self.process(asset);
2 22 self.emit(\'asset\', self.source);
2 23 }).catch(function() {
2 24 self.log.error(\'Asset render failed: %s\', chalk.magenta(tildify(asset.path));
2 27 return Promise.all([
2 28 process(\'Asset\', \'PostAsset\'),
2 29 process(\'PostAsset\', \'Page\')
2 30 ]).then(function() {
2 31 return self.execFilter(\'after_render: %s\', self.render.bind(self));
2 35 return self.process(asset.new_article);
2 38 process(\'Asset\', \'PostAsset\')
2 39 ]);
2 43 var post = self.post;
2 44 var layout = false;
2 46 return post.remove();
2 47 function() {
2 48 var id;
2 49 return self.linkModified({
2 56 function locals(name) {
2 57 return self.locals.name;
2 59 return locals
2 60 .asset_dir = pathFn.join(self.base_dir, \'assets\')
2 61 .then(function() {
2 62 return self.process(asset.data).then(function(asset) {
2 63 if (!data.length) return;
2 64 return self.loadAsset(asset._id)
2 65 .thenReturn(exist);
2 75 return self.unwatch();
2 81 return self.process(post.bind(self))
2 82 .post.save();
2 87 return self.process.unwatch();
2 91 function Post(name => {
2 92 return this.remove = Promise.all([
2 93 return fs.unlink(this.join(self.base_dir, \'index)
2 94 ]).then(this.source) || fs.exists(this.source) || fs.exists(this.source) || fs.exists(this.public_dir) ||!== dir;
2 95 return fs.exists(this.public_dir) || self.public_dir) ||!== this.source;
2 96 .path) || join(this.public_dir) || this.public_dir) || join(this.source)
2 97 .source + sep;
2 99 Post.dirname = _ => this.processeslug = newPost
3 1 var should = require(\'chai\').should();
3 2 describe(\'feed_tag\', function() {
3 3 var Hexo = require(\'../../../lib/hexo\');
3 4 var hexo = new Hexo(__dirname);
3 5 var ctx = {
3 6 config: hexo.config
3 8 ctx.url_for = require(\'../../../lib/plugins/helper/url_for\').bind(ctx);
3 9 var feed = require(\'../../../lib/plugins/helper/feed_tag\').bind(ctx);
3 10 it(\'path\', function() {
3 11 feed(\'atom.xml\').should.eql(\'<link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">\');
3 13 it(\'title\', function() {
3 14 feed(\'atom.xml\', {title: \'RSS Feed\'}).should.eql(\'<link rel="alternate" href="/atom.xml" title="RSS Feed" type="application/atom+xml">\');
3 16 it(\'type\', function() {
3 17 feed(\'rss.xml\', {type: \'rss\'}).should.eql(\'<link rel="alternate" href="/rss.xml" title="Hexo" type="application/rss+xml">\');
3 19 it(\'type - null\', function() {
3 20 feed(\'foo.xml\', {type: null}).should.eql(\'<link rel="alternate" href="/foo.xml" title="Hexo" >\');
3 22 it(\'invalid input - number\', function() {
3 23 var input = [
3 24 \'var type = feed.toString()\',
3 25 \'123456\',
3 26 \'1.2.3\',
3 27 \'something else\',
3 28 \'2.3.\',
3 30 \'4.3.2\',
3 31 \'5.3.2\',
3 32 \'6.2\',
3 33 \'7.3\',
3 34 \'<link rel="alternate" href="/invalid.xml" title="invalid.xml">\');
3 36 it(\'invalid input - undefined\', function() {
3 38 \'var type = valid input;\',
3 39 \'undefined\',
3 40 \'this.should.eql(false);
3 41 process.nextTick(function() {
3 42 feed.invalidate(function(err) {
3 43 err.should.be.ok;
3 44 err.message.should.be.ok;
3 47 it(\'invalid input - parse argument for a single argument\', function() {
3 48 var input = \'var type = "application/atom+xml;";
3 49 assert.strictEqual(1, "test");
3 50 assert.strictEqual(0, "test");
3 52 it(\'invalid input - required input - as a string\', function() {
3 53 var input = \'{\';
3 54 var type = "application/atom+xml;";
3 58 it(\'invalid input - as required input - as a string should be a string as a string\', function() {
3 59 var input = "text/atom+xml" setting.toString = require("image.toString");\', type = "text/;";
3 60 var type = ";";
3 61 var type = "text/oJSON";
3 62 var type = "application/o = require(type).logger = require(type).logger(type).logger(config.toString());
3 63 assert.write(process.write(process.toString());
3 64 process.write(process.toString());
3 65 assert.log(process.toString());
3 67 });'

4 1 const { exists, mkdirs, unlink, writeFile } = require(\'hexo-fs\');
4 2 describe(\'Load database\', () => {
4 3 const Hexo = require(\'../../../lib/hexo\');
4 4 const hexo = new Hexo(__dirname);
4 5 const loadDatabase = require(\'../../../lib/hexo/load_database\');
4 6 const dbPath = hexo.database.options.path;
4 7 const fixture = {
4 8 meta: {
4 9 version: 1,
4 10 warehouse: require(\'warehouse\').version
4 11 },
4 12 models: {
4 13 Test: [
4 14 {_id: "A"},
4 15 {_id: "B"},
4 16 {_id: "C"}
4 17 ]
4 20 before(() => mkdirs(hexo.base_dir));
4 21 beforeEach(() => {
4 22 hexo._dbLoaded = false;
4 24 after(() => rmdir(hexo.base_dir));
4 25 it(\'database does not exist\', () => loadDatabase(hexo));
4 26 it(\'database load success\', async () => {
4 27 await writeFile(dbPath, JSON.stringify(fixture));
4 28 await loadDatabase(hexo);
4 29 hexo._dbLoaded.should.eql(true);
4 30 hexo.model(\'Test\').toArray({lean: true}).should.eql(fixture.models.Test);
4 31 hexo.model(\'Test\').destroy();
4 32 await unlink(dbPath);
4 34 it(\'don\\\'t load database if loaded\', async () => {
4 35 hexo._dbLoaded = true;
4 38 hexo.model(\'Test\').length.should.eql(0);
4 55 it(\'does not load database if the mout/:dbLoaded is not in the database\', async () => {
4 56 const { db } = hexo;
4 57 const { mout } = hexo;
4 58 const { mkdirs, unlink, writeFile } = require(\'hexo-fs\');
4 59 await writeFile(dbPath, undefined, unlink(dbPath));
4 61 it(\'_generate()\', async () => {
4 62 const { return unlink(\'});\', async() => {
4 64 unlink(\'invalidate() => {
4 65 unlink(\'invalidate()\');
5 1 module.exports = function(ctx) {
5 2 var PostAsset = ctx.model(\'PostAsset\');
5 3 return function assetLinkTag(args) {
5 4 var slug = args.shift();
5 5 if (!slug) return;
5 6 var asset = PostAsset.findOne({post: this._id, slug: slug});
5 7 if (!asset) return;
5 8 return ctx.config.root + asset.path;
5 10 };'

6 1 module.exports = ctx => function pullquoteTag(args, content) {
6 3 args.unshift(\'pullquote\');
6 4 result += `<blockquote class="${args.join(\' \')}">`;
6 5 result += ctx.render.renderSync({text: content, engine:\'markdown\'});
6 6 result += \'</blockquote>\';
6 7 return result;'

7 13 var args = arguments[0];
7 14 var content = arguments[1];
7 16 auto_detect: config.auto_detect,
8 2 function iframeTag(args) {
8 3 const url = args[0];
8 4 const width = args[1] && args[1]!== \'default\'? args[1] : \'100%\';
8 5 const height = args[2] && args[2]!== \'default\'? args[2] : \'300\';
8 6 const attrs = {
8 7 src: url,
8 8 width: width,
8 9 height: height,
8 10 title: title,
8 11 alt: alt
8 13 return htmlTag(\'img\', attrs);
8 15 module.exports = iframeTag;'

9 1 const stripIndent = require(\'strip-indent\');
9 2 const { highlight } = require(\'hexo-util\');
9 3 const rBacktick = /^((?:\\s*>){0,3}\\s*)(`{3,}|~{3,}) *(.*) *\
9 6 const rAllOptions = /([^\\s]+)\\s+(.+?)\\s+(https?:\\/\\/\\S+|\\/\\S+)\\s*(.+)?/;
9 7 const rLangCaption = /([^\\s]+)\\s*(.+)?/;
9 9 const config = this.config.highlight || {};
9 11 data.content = data.content.replace(rBacktick, ($0, start, $2, _args, content, end) => {
9 12 const args = _args.split(\'=\').shift();
9 13 const options = {
9 14 hljs: config.hljs,
9 15 autoDetect: config.auto_detect,
9 19 if (options.gutter) {
9 20 config.first_line_number = config.first_line_number || \'always1\';
9 21 if (config.first_line_number === \'inline\') {
9 22 _args = _args.replace(\'=+\', \'=\');
9 23 options.gutter = _args.includes(\'=\');
9 24 options.firstLine = options.gutter? _args.split(\'=\')[1] || 1 : 0;
9 27 if (args) {
9 28 const match = rAllOptions.exec(args) || rLangCaption.exec(args);
9 31 if (match[2]) {
9 32 options.caption = `<span>${match[2]}</span>`;
9 33 if (match[3]) {
9 34 options.caption += `<a href="${match[3]}">${match[4]? match[4] : \'link\'}</a>`;
9 38 const endOfStart = start.split(\'\
9 39 \').pop();
9 40 if (endOfStart && endOfStart.includes(\'>\')) {
9 41 const depth = endOfStart.split(\'>\').length - 1;
9 42 const regexp = new RegExp(`^([^\\\\S\\\\r\\\
9 43 ]*>){0,${depth}}([^\\\\S\\\\r\\\
9 44 ]|$)`,\'mg\');
9 45 const paddingOnEnd =\'\';
9 46 content = (content + paddingOnEnd).replace(regexp, \'\').replace(/\
9 47 $/, \'\');
9 49 content = highlight(stripIndent(content), options)'

