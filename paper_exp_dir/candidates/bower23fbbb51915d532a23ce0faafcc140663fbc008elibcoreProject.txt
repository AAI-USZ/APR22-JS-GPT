Min editdistance: 6.00
Closest candidate: 5 10 })(this);
0 1 'should have different refs = { verbose does not.resolve, resolved } if (http://github.com/compat least-resolve } that promise : function (tcached = true }; }; }; } toData
1 1  http { start: function () {
1 2 return; } = start: function () {
1 3 return this.reset() {
1 4 return this.reset(); }'

2 1  module.exports = function (resolve, resolved, resolved, resolved, resolved, resolved) {'http://this._working; }
3 1 function clean(end )
3 2 return function clean(endpoint) {
3 3 it('ShouldFix objects', function(object) {
3 4 var resolved targets = endpoints, resolved targets = source endpoints, source, source, target = { targets = source, target = {};
3 5 return Q.object.endpoints;
3 6 endpoints['differents', 'incompatible'];
3 7 endpoints[initialSource] = decEndpoints = decEndpoints || {};
3 8 return object.
4 1 'should restoreNode(this._analyse if this._options());"requirejs');\')
4 2 return function () {
4 3 return this.json = function (encode, resolved };
4 4 return;
4 5 configure.encode = function (var use(env) {
4 6 config) {
4 7 var promises;
4 8 return env, called;
4 9 return this.decomposed = true;
4 10 }
4 12 };'

5 1  (layout: function () => {
5 2 get(), this._manager.install = {install = function () {
5 3 return that = install;
5 4 return that;
5 6 return that = this;
5 7 return that.install();
5 10 })(this);
5 13 }());"

6 1 ', function () {
6 2 global.home = function () {
6 3 return that = function () { configuninstall(targv, resolved };        = resolved : function (included:    this, resolved() {};       : this, resolved: this } });
6 4 return that     );
6 5 return that
6 6 });
6 9 }; function () {
6 10 if (this._json = launcher.launch;
6 11 .
7 1  };'

8 1  (decEndpoints) {
8 2 it('should merge locals if url, resolved to the project)', function (resolved targets are merged() and resolve targets are merged', function (non) {
8 3 return that._resolved targets = { configuring, configuring, configuring, configuring) {
8 4 return that.then(this.set targets are merged() } this.gettersizes as resolved targets'solved, configuring);
8 5 return that.getterservice(resolved') } });
8 6 }).set targets;
8 7 .then(resolved()).resolve
