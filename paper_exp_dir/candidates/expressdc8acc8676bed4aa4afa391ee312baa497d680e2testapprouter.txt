Min editdistance: 15.00
Closest candidate: 3 7 return", function(){
0 1  } '\
0 2 assert.strict_id = function () {
0 3 return done();
0 4 assert.strictEqual(3);
0 6 assert.strictEqual(1);
0 8 }
0 9 }).should.should.strictEqual(0);
0 10 });
0 11 it('should.skip('should.should.should.should.should.equal(*)s((chunk) => {
0 12 returns(*) => function is(Object
1 1  }, function (app.get('/express') } });
1 2 assert.get('/^\\'should pass() function (app.type= function(){
1 3 return express(){
1 4 return; }).toArray.test; } function (this.test);
1 5 }).should.return;
1 7 }).something.return;
1 9 }).test.returns.returns(express();
1 10 }");
1 11 assert.type.skip('should.skip(\'
2 1  })
2 2 })
2 3 assert.skip('app.all('/redirect()", function (app);
2 5 }], function(req, res){
2 6 done();
2 7 return done(function (req, res) {
2 8 assert.send(1, res) {
2 9 assert.send(1, req.hit();
2 10 assert(2);
2 11 assert.strictEqual(1, req.hit);
2 12 assert.strictEqual(3, req.hit);
2 13 assert.
3 1  }).should.get('/\
3 3 }(),"redirecting* '\
3 5 }).all('/test');
3 6 describe("app.get(),"hello": function()", function(){
3 7 return", function(){
3 13 describe("", function(){
3 14 it("should not.length(){
3 15 var app = express();
3 16 return call(app);
3 17 app.redirecting(){
3 18 return call(
4 2 }).toArray.prototype.map(function (app) {
4 3 expect(app) {
4 6 expect(app).to.get('/\
4 7 function     undefined).to.app.returns* done(res);"*");
4 8 }).toArray.prototype.return(function).toArray.return(function (s) { return s, i, app.session.session; });
4 9 }).should.deep.equal(s);
4 10 }).join(s);
5 1  }).should.unshift() }, function (app);"raw();"raw();"something\
5 4 }).all();
5 8 describe("express() {}", function(){
5 9 it('should not.param(': function(){
5 11 it("express.param(': function(){
5 12 return call them(users.param(param)");"something(function(){
5 13 return call for a = express();"));
5 15 it('express.body();
5 16 it
6 1  } function (app.use(express() { }).__express(){ this.unused() }).should.push('should.unused() }).should.returnsucused(); });
6 2 assert.unused();
6 3 assert.express();
6 4 }).unused();
6 5 }).end();
6 7 it("should allow(':should.not.toArray()", function(app) return function(req, res){
6 8 assert.strictEqual(res, app);
6 9 assert.strictEqual(
7 2 }).to.length; }).should.unwatch() 'function () {
7 4 app.get('/return {
7 5 path.unset : function(){ return });
7 6 };
7 7 app.set.get('/ users : function(){ return require({" users : { users : { users : { users : { users : { users : { users : { users : { users : { users : { users : { } } } } } } } } } } });
7 8 app.listen(3000);\
8 1  }, function (express() {
8 2 assert.push('express() }, function () {
8 3 assert.push('express.push('express.push('express.push('express') }') }, 'express.push('express.push');" }).length);"

9 1  }, function (0, 'function (app) { 'express();"express() } function (express = express();"rawthing = express();" } }();"return;return function (express() {} } });"gmail.should.should.should.not.throw();
9 2 }).should.throw();
9 3 }).finally(function () {
9 4 return;
9 7 app.get('/admin');
9 9 }());
