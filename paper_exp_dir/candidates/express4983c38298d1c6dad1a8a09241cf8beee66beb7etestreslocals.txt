Min editdistance: 1.00
Closest candidate: 4 16 describe('.locals', function(){
0 1 res.locals.user.should.equal('tobi');
0 2 res.locals.age.should.equal(1);
0 3 res.end();
0 4 });
0 5 app.use(function(req, res){
0 6 res.send('res');
0 8 request(app)
0 9 .get('/')
0 10 .expect(200, done);
0 11 })
0 12 it('should work when mounted', function(done){
0 13 var blog = express()
0 14 , app = express();
0 15 app.use(blog);
0 16 function done(err){
0 17 if (err) return done(err);
0 25 .expect('blog', done);
0 42 })"

1 6 res.send(req.params.lat +'' + req.params.long);
1 13 var app = express();
1 14 var blog = express();
1 16 res.locals.res = function(){
1 17 res.send('hey');
1 18 };
1 20 res.send('requsted');
1 24 .expect('Created');
2 6 res.render('user.jade', {
2 7 locals: {
2 8 name: req.params.name
2 9 }
2 10 }).should.equal('tobi');
2 20 var fallback = express();
2 21 var redirecting_url = 'http://redirecting-url.com';
2 23 res.redirect('http://example.com:3000/' + blog + '/');
2 26 res.statusCode.should.equal(302);
2 27 res.headers.should.have.property('location', 'http://example.com:3000/');
2 28 done();
2 32 .expect('Location', 'http://bower.io/')
2 33 .expect(302, done);
2 41 res.redirecting_url = 'http://bower.io/blog/' + blog + '/');
2 45 res.headers.should.have.property('location', 'http://bower.io/blog/' + blog + '/');
3 10 .end(function(res){
3 11 res.body.should.equal('res');
3 16 var app = express()
3 17 , blog = express()
3 18 , blogAdmin = express();
3 21 res.setHeader('x-powered-by', 'Express');
3 22 res.send('updated user'+ req.params.id);
3 25 res.enable('x-powered-by');
3 26 res.setHeader('x-powered-i', 'Hexo');
3 32 res.body.should.equal('email sent');
3 37 describe('.use(fn)', function(){
3 38 it('should utilize qvalues in negotiation', function(done){
3 41 res.use(function(req, res){
3 42 res.set('Accept','text/html; q=.5, application/json, */*; q=.1, */*; q=.2');
3 43 res.send('ok');
3 46 res.header('X-Foo', 'bar');
3 47 res.contentType('.html');
3 53 res.headers.should.have.property('content-type', 'text/html; q=.5, text/plain;q=.1');
3 54 res.body.should.equal('hey');
3 55 res.statusCode.should.equal(200);
3 59 it('should allow wildcard type/subtypes', function(done){
3 62 res.set('Accept','text/html; q=.5, text/plain;q=.1, application/*, text/*;q=.1');
3 67 .set('Accept', 'text/html; q=.5, text/plain;q=.1, application/json, */*;q=.1')
3 68 .end();
3 70 it('should default the Content-Type', function(done){
3 73 res){
3 74 res.set('Accept','text/html; q=.5, text/plain; q=.2');
3 75 res.writeHead(hey');
3 78 app.use(function(res);
3 79 request(app);
3 81 .use(function(app)
3 82 .get('/regular');
3 83 .use(function(req, res){
3 86 res.headers.end();
3 89 });"

4 2 res.locals.age.should.equal(2);
4 16 describe('.locals', function(){
4 17 it('should be empty by default', function(done){
4 20 res.locals.should.have.property('message', 'Nolocals were found');
4 24 res.locals.should.have.property('message', 'Configured package');
4 34 res.body.should.equal('Configured package');
4 42 , admin = express();
4 43 admin.use(function(req, res){
4 44 res.locals.should.have.property('message', 'Resolved admin');
4 47 app.use('/blog', blog);
4 49 .get('/blog')
4 51 res.body.should.equal('blog');
4 56 describe('.get()', function(){
4 57 it('should get the name from the path', function(done){
4 60 res.locals.name = 'tobi';
4 61 res.locals.age = 1;
4 67 res.body.should.equal('tobi');
4 72 describe('.use()', function(){
4 73 it('should use an array for resolving relative lookup', function(done){
4 76 , app = express()
4 77 , blogAdmin = express()
4 88 res.body.should.should.equal('tobi');
4 98 it('should.skip('should.skip('should.skip('should.limit to 3');
4 99 done');
4 103 it('should.skip('should.skip('should.limit to 3');
4 104 done());"

5 15 var blogAdmin = express();
5 17 var now = Date.now();
5 18 var clock;
5 19 if (! clock) app.use(function(req, res){
5 20 return fs.lstat(req.params.time);
5 21 }).then(function(){
5 22 return done();
5 23 }).catch(function(err){
5 24 if (err.message === 'layout') return next();
5 25 var route = express();
5 29 if (user.name === 'loki') return;
5 33 res.header('x-powered-by', 'Hexo');
5 34 res.content.should.equal('tobi');
5 42 var ret = app.use(function(req, res){
5 43 res.locals.user.should.equal(app);
5 44 res.setHeader('x-powered-by', 'Hexo');
5 64 res.send('x-powered-by');
6 11 res.body.should.equal('<p>tobi</p>');
6 19 res.locals.res = {
6 20 __proto__: express.locals
6 36 res.set('title', 'House of Manny');
6 42 res.body.should.equal('<p>This is Manny</p>');
7 21 users: ['Tobi', 'Jane', 'Bandit']
7 27 res.body.should.equal('<h1>blog</h1><p>Jane</p> <strong>strong></strong></strong>');
7 31 it('should allow fallthrough', function(done){
7 34 res.set('root', __dirname + '/fixtures/blog');
7 40 res.body.should.equal('<h1>blog</h1><p>Jane</p> <strong></strong></strong>');
7 44 it('should allow fallthrough with a leading slash', function(done){
7 53 res.body.should.equal('<h1>blog</h1><p>Jane</p><strong></strong>');
7 66 res.body.should.equal('<h1>blog</h1><p>Jane</p><strong></strong></strong>');
8 1 res.locals.user.should.equal('tj');
8 6 res.send('res.json');
8 11 res.body.should.equal('tj');
8 18 , app2 = express();
8 21 res.send('res.body.x-powered-by');
8 27 res.body.should.equal('x-powered-by');
8 40 res.send('res.status.txt');
9 15 it('should set ETag', function(done){
9 18 var str = Array(1024 * 2).join(res.send(str));
9 20 var str = str.replace(/\\u2028/g, '\\\\u2028');
9 21 assert(!res.headerSent);
9 22 res.send(str);
9 24 app.use(function(err, req, res, next){
9 26 res.headers.should.have.property('content-type', 'text/plain');
9 27 res.text.should.equal('hey');
9 32 it('should not override Content-Type', function(done){
9 35 res.set('Content-Type', 'text/plain');
9 39 res.send(err);
9 47 describe('.send(Buffer)', function(){
9 48 it('should send as octet-stream', function(done){
9 51 res.send(new Buffer('hello!'));
9 56 res.headers.should.have.property('content-type', 'application/octet-stream');
9 57 res.text.should.equal('hello');
9 69 var str = str = str.toString('.');
9 70 str.should.equal('/a');
9 71 str.replace('/b');
9 72 res.send('/c');
9 76 .end(function(function(res){
9 77 .end(res);
9 82 it('should.end(function(*)n});
9 83 it('should.end(function(*)n})"

