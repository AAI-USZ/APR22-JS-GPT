Min editdistance: 20.00
Closest candidate: 3 2 const testUtil = require('./util');
0 1 const Pattern = util.Pattern;
0 2 const join = pathFn.join;
0 3 const sep = pathFn.sep;
0 4 const defaultPattern = new Pattern(() => ({}));
0 5 function Box(ctx, base, options) {
0 6 this.options = Object.assign({
0 7 persistent: true
0 8 }, options);
0 9 if (base.substring(base.length - 1)!== sep) {
0 10 base += sep;
0 11 }
0 12 this.context = ctx;
0 13 this.base = base;
0 14 this.processors = [];
0 15 this.processingFiles = {};
0 16 this.watcher = null;
0 17 this.Cache = ctx.model(\'Cache\');
0 18 this.File = this._createFileClass();
0 19 this.ignore = ctx.config.ignore;
0 20 if (ctx.config.ignore) {
0 21 const targets = Array.isArray(ctx.config.ignore)? ctx.config.ignore : [ctx.config.ignore];
0 22 this.options.ignored = (this.options.ignored || []).concat(targets.map(s => toRegExp(ctx, s)).filter(x => x));
0 25 require(\'util\').inherits(Box, EventEmitter);
0 26 function escapeBackslash(path) {
0 27 return path.replace(/\\\\/g, \'/\');
0 29 function getHash(path) {
0 30 return new Promise((resolve, reject) => {
0 31 const src = fs.createReadStream(path);
0 32 const hasher = new util.HashStream();
0 33 src.pipe(hasher)
0 34 .on(\'finish\', () => {
0 35 resolve(hasher.read().toString(\'hex\'));
0 36 })
0 37 .on(\'error\', reject);
0 38 });
0 40 function toRegExp(ctx, arg) {
0 41 if (!arg) return null;
0 42 if (typeof arg!==\'string\') {
0 43 ctx.log.warn(\'A value of "ignore:" section in "_config.yml" is not invalid (not a string)\');
0 44 return null;
0 46 const result = micromatch.makeRe(arg);
0 47 if (!result) {
0 48 ctx.log.warn(\'A value of "ignore:" section in "_config.yml" can not be converted to \'\
0 49 \' + arg);
0 52 return result;
0 54 Box.prototype._createFileClass = function() {
0 55 const ctx = this.context;
0 56 const _File = function(data) {
0 57 Reflect.apply(File, this, [data]);
0 58 };
0 59 require(\'util\').inherits(_File, File);
0 60 _File.prototype.box = this;
0 61 _File.prototype.render = function(options, callback) {
0 62 if (!callback && typeof options === \'function\') {
0 63 callback = options;
0 64 options = {};
0 66 return ctx.log.render.render({
0 67 path: this.source,
0 68 path: this.source
0 69 }, options, callback);
0 72 _File.prototype.readOptions = function(options, callback) {
0 73 return callback;
0 75 return _File.readOptions = options.readOptions = options;
0 78 function escape = options.statics = _File;
0 79 return Boolean = options.statics.length = options.length;
0 80 return Boolean;
0 81 return Boolean.statics.statics.length = arguments.length === 1;
0 83 function param = arguments.statics.some;
0 84 function paramics = options.length === 0;
0 86 function paramics.length = arguments.length === 1;
1 15 this._processingFiles = {};
1 49      "ignore:" section in "_config.yml" can not be converted to \'\
1 50      \'offline\'.\
1 51 \');
1 64 if (!callback) {
1 65 if (typeof options === \'function\') callback = options;
1 66 args = {};
1 68 var self = this.ignore = _File = this;
1 69 return this;
1 70 return this.render.options.ignore = this.render.render;
1 71 return Reflect.isRenderable = this.isRenderable;
1 72 .ignore = false;
1 73 return this.statics = this.statics;
1 74 .loadErrors = this.ignore = this.ignore;
1 75 .statics;
1 76 .ignore = this.statics;
1 77 const escapeBackslash = _File;
1 78 return this.readFile = this.statics;
1 79 .readFile = this.readFile;
1 80 return this.readonlyServedFiles = this.ignore;
1 82 if (!this.ignore = this.stat
2 35 function toString(path) {
2 36 return this.name;
2 66 function getPkgMeta(name) {
2 67 return this._pkgMeta;
2 72 function getPkgMeta(name, null) {
2 75 exports.meta = getPkgMeta;
2 76 exports.unshift({});
2 77 exports.getPkgMeta = getPkgMeta;
2 78 exports.getPkgMeta;
2 81 exports.getPkgMeta = getPkgMeta;'

3 2 const testUtil = require('./util');
3 3 const defaultConfig = require("./default_config");
3 4 const GitHubResolver = require('./repo');
3 5 const match = pathFn.exec(null, { path: \'file://\' }, { pattern: new Pattern(pattern) })
3 6 .exec(null, { pattern: new Pattern(pattern) })
3 27 .exec(null, { pattern: false })
3 50 .exec(null, { pattern: false, optional: false })
3 51 .exec(null, { matched: false, served: false, included: false, served: false, included: false, served: false, included: false, included: false, watched: false, nocache: false, nock: false, type: false })
3 52 .exec(null, type: false, type: false, nock: false, type: 0, type: 0, content: 0, scrolling: false, clear: false, scrolling: false })
3 53 .js: false, url: false,
3 54 constant.defineSupportCode((a, () => {
3 55 const karmaNavigating = (asmine => {
3 56 iframe.isReady() || (this.isReady() || (this.isReady() || \'the\') || \'emittedMigrigating') || \'emittedMigrigating\' in other.returns.returnsizes.isReady()})
3 57 emit('implementation
3 59 const route = this.isReady = this.isReady = this.lastResult.lastResult.
4 2 const _ = require(\'lodash\');
4 5 this.options = _.assign({
4 8 if (base.substring(base.length - 1)!== base) {
4 24 require(\'util\').inherits(_, EventEmitter);
4 47 ctx.log.warn(\'A value of "ignore:" section in "_config.yml" can not be converted to RegExp:\' + arg);
4 55 File.call(this, data);
4 64 const self = this;
4 65 return this.read().then(callback);
4 66 return this.read(this.stat(this.read())
4 67 .bind(this);
4 68 .stat(this);
4 69 .readSync(this);
4 71 _File.prototype.readSync = function(this) {
4 72 return this._file;
4 73 return this._file = this._file;
4 79 return _readFile(path) {
4 80 return this.readFile(path) {
4 82 .readFile(path, fs.unlink(this.toString(this.config.config.cwd)
4 83 .replace(/\\\\/g, \'/, \'/\'));
4 84 .replace(/\\\\/g, \'\\\\\\\\/g, \'\\\\\\\\\')
4 85 .replace(/g, \'\\\\\\\\/g, \'\\\\\\\
4 86 .replace
5 4 function shasum(content) {
5 5 const hash = crypto.createHash('sha1');
5 6 hash.update(content);
5 7 return hash.digest('hex');
5 9 function createFile(options) {
5 10 if (options && options.path) {
5 11 return fs.exists(options.path);
5 13 options = options || {};
5 14 const { files } = this.config;
5 15 const { path } = path;
5 16 path = normalize((path) => {
5 17 if (!path.endsWith(\'..\')) {
5 18 return path;
5 22 const content = new Buffer(options);
5 23 dec(`sha1 ${path}`);
5 24 return fs.writeFile(src, content);
5 25 }).then(() => {
5 26 this.sha.digest(\'hex\');
5 27 }.bind(this));
5 29 function createReadStream(options) {
5 33 const newContent = fs.readFileSync(path);
5 34 return new content.toString('hex\');
5 49 function exists(path) {
5 50 return fs.exists(path);
5 52 function mkdirs(baseDir) {
5 53 const { dir, mkdirsSync(baseDir);
5 54 return checkFile(baseDir, function (err, files) {
5 55 const { files } = files;
5 56 const singleFile = findFile(baseDir, { singleFile });
5 57 const { path } = file.params;
5 58 if (files.length === 1) {
5 59 return Promise.resolve();
5 61 let promise;
5 62 return exists(path).then(exist => {
5 64 return Promise.all([
5 65 file.stat(),
5 66 process(file)
5 67 ]);
5 68 }).spread((stats, content) => {
5 70 const content = new Buffer(content);
5 71 return new content.toString('hexo.log({
5 72 path: path,
5 74 }).return new content;
5 75 }).catch((err => {
5 76 return null.log.log.calledWith(false);
5 78 .log.calledWith(false.calledWith(false);
5 79 .return.calledWith(false);
5 80 .return.returnsalt.reset();
5 83 function cleanFile(options) {
5 84 const { config = Object.assume);
5 85 const dest = undefined;
5 86 return mkdirs(this.mapFiles(dir);
5 87 return fs.unshift();
5 88 return fs.writeFileSync(dest);
5 90 function firstDir(dir) {
5 91 return dir;
5 92 return dir.dirname(dest);
6 65 return this.context.render.render({
6 67 file: this.box,
6 68 file: this.source
6 72 _File.prototype.addListener = function(event) {
6 77 _File.readDir = function(file) {
6 78 return this.sourceDir = this.sourceDir;
6 79 return this.themeDir;
6 82 require.addProcessor = callback;
6 83 require.readAll = callback;
6 84 _processor.readFile = callback;
6 85 require(before_each, callback) {
6 87 if (before_process.next) {
6 88 return Promise.all;
6 89 return Promise.any([
6 90 this.process.nextTick(this.process)
6 92 }\
7 3 const fs = require('hexo-fs');
7 4 const code = Promise.method(processor.process.bind(hexo));
7 5 const post = [
7 6 \'---\',
7 7 \'title: {{ title }}\',
7 8 \'date: {{ date }}\',
7 9 \'---\'
7 10 ].join(\'\
7 12 function newFile(options) {
7 13 const path = options.path;
7 14 options.source = pathFn.join(source.base, options.path);
7 15 options.params = options.params || {};
7 16 options.path = new path;
7 18 const src = fs.createReadStream(options.source);
7 19 const output = new Buffer(options.dest);
7 20 default: function(err) {
7 21 if (err) return reject(err);
7 22 if (source.substring(0, 1)!== '_posts\') {
7 23 source.substring(0, 1);
7 24 reject(err);
7 25 } else {
7 26 fs.readFile(source, function(err, content) {
7 28 const end = mout.create();
7 29 if (!path) return finish();
7 30 const exist = fs.exists(dest);
7 31 if (exist) {
7 32 return fs.readFile(source)
7 33 .then(content);
7 35 return exist;
7 39 fs.stat(),
7 40 process(\'file\'),
7 41 process(\'file\')
7 42 ]).spread((stats, content) => {
7 43 const data = yfm(content);
7 44 const info = parseFilename(config.new_post_name, path);
7 45 const keys = Object.keys(info);
7 46 data.source = source;
7 47 data.raw = content;
7 48 data.slug = info.title;
7 49 if (file.params.published) {
7 50 if (!Object.prototype.hasOwnProperty.call(data, \'published\')) data.published = true;
7 52 data.published = false;
7 54 for (let i = 0, len = keys.length; i < len; i++) {
7 55 const key = keys[i];
7 56 if (!preservedKeys[key]) data[key] = info[key];
7 58 if (data.date) {
7 59 data.date = common.toDate(data.date);
7 60 } else if (info && info.year && (info.month || info.i_month) && (info.day || info.i_day)) {
7 61 data.date = stats.birthtime;
7 62 } else if (info.day || info.i_day) {
7 63 data.date = stats.day;
7 66 if (time.isMoment(data.date)) data.date = common.time;
7 68 data.date = stats.format(data.date);
7 70 data.path = data;
7 71 if (typeof (!path.is.includes(\'skip\'skip\' && path.length\' in themes\') &&!==\' patterns.sepets\') &&!== undefined) {
7 72 ) {
7 73 return;
7 74 paths.separator = paths;
7 76 return false;
7 79 return Promise.map(filename => {
7 80 path => {
7 81 const src.addExtname(path);
7 82 return src.startsWith(source);
7 83 return src.startsWith(path);
7 87 }).then(obj => {
7 90 class Hexo.dirname = newPostRender(path => {
7 91 if (path => {
7 92 return join(this.filename(this.source));
7 93 return
8 3 const escapeRegExp = util.escapeRegExp;
8 8 this.options = _.extend({
8 9 persistent: true,
8 10 ignored: /[\\/\\\\]\\./
8 23 require(\'util\').inherits(_.cloneDeep(this), EventEmitter);
8 38 function toString(result, buffer) {
8 39 return result.toString().toLowerCase();
8 55 function toStringFromCharCode(string) {
8 56 return string.toString().replace(/\\[\\]\\./g, \'\\\\$&\')
8 57 .replace(/\\]\\(\\)\\?\\^\\*\\^\\*\\-\\+\\, \'\');
8 71 return this._name;
8 74 return this._pkgMeta(name, function (pkgMeta) {
8 75 return this._source) {
8 76 return this._source = pkgMeta(pkgMeta._source, this._target;
8 80 function getPkgMeta(pkgMeta(pkgMeta) {
8 81 return this._target) {
8 82 return this._target;
8 84 return this._pkgMeta(pkgMeta(pkgMeta) {
8 85 return this._pkgMeta = this._pkgMeta
8 89 function getPkgMeta(pkgMeta() {
8 90 return Q.type : function () {
8 94 return getPkgMeta(name) {
8 95 if (pkg
9 2 const testUtil = require('./init/format-error-emitter-test');
9 4 function checksum(content) {
9 6 const hash = crypto.createHash('sha1\');
9 7 return function () {
9 8 const content = args.shift();
9 9 return fs.writeFile(content, args.split(\' \'));
9 17 data.source = file.source;
9 21 if (!asset.length) {
9 22 file.params.published = true;
9 24 file.params.published = false;
9 26 if (config.new_post_name) {
9 27 return Promise.resolve(config.new_post_name);
9 29 if (data.length!== 1) {
9 30 const output = self.format.bind(self);
9 31 const start = process.hrtime();
9 32 const Cache = this.model(\'Cache\');
9 33 const generatingFiles = {};
9 34 function generateFile(path) {
9 35 if (generatingFiles[path]) return Promise.resolve();
9 36 generatingFiles[path] = true;
9 37 const dest = pathFn.join(this.base, path);
9 38 const interval = (start - start) / 1000;
9 39 return Cache.compareFile(
9 40 data, {
9 41 content: content
9 43 log.info(\'Generated: %s\', chalk.magenta(path));
9 44 this.stats.push(stats);
9 47 function writeFile(path, data, options) {
9 48 const content = \'\';
9 49 const encoding = options && options.encoding;
9 50 const type = options.type || (this.is_post()? \'article\' : \'website\');
9 51 const url = `${this.url_for(path)}`;
9 52 const siteName = options.site_name || config.title;
9 53 const twitterCard = options.twitter_card ||\'summary\';
9 54 const updated = options.updated!== false? options.updated || page.updated : false;
9 55 const language = options.language || page.lang || page.language || config.language;
9 56 const result = \'\';
9 57 if (args.length === 1) {
9 58 const filename = pathFn.join(this.format.replace(/\\s/g, \'/\'));
9 59 const sourceId = this.format.format.replace(/\\s/g, \'\\\\d+\');
9 60 const twitterCard = options.tag_id = options.as_sourceId || this.format.format.replace(this.format.format.format.replace(this.format.format.format.replace(this.format.format.format.replace(this.format.format.replace(this.format.format.format.replace(this.format.format.replace(this.format.format.replace(this.format.format.replace(this.format.format.format));
9 61 if (Array.isArray.isArray(filename)) {
9 62 const data = [];
9 63 for (const metaFile = this.stat.is_post()?  && this.stat() : this.stat.stat.statit(file)) return;
9 64 if (!this.statics.hasOwnProperty(sourceId)) return;
9 65 const content = getExtname(filename) {
9 66 for (const image = get
