Min editdistance: 5.00
Closest candidate: 8 2 __slimjim__.info('Running'+ count +'specs...');
0 1 };
0 2 this.reportSuiteResults = function(suite) {
0 5 this.reportSpecStarting = function(spec) {
0 6 var specName = spec.suite.join(' ') +'' + spec.description;
0 7 var result = {
0 8 id: spec.id,
0 9 description: spec.name,
0 10 suite: [],
0 11 success: spec.results_.failedCount === 0,
0 12 log: []
0 14 if (runner) {
0 15 this.reportSpecResults(spec);
0 16 }
0 18 this.reportSpecResults = function(spec) {
0 19 if (spec.results_.skipped) return;
0 22 description: spec.description,
0 27 if (!result.success) {
0 28 var items = spec.results_.items_;
0 29 for (var i = 0; i < items.length; i++) {
0 30 item[i] = items[i].trace.stack();
0 32 result.log.push(items);
0 34 return result;
0 56 success: spec.results_.success? '.' : ''
0 81 var suitePointer = spec.suite.split('.')[0];
0 82 while(suitePointer) {
0 83 result.suite.unshift(suitePointer.description);
0 84 suitePointer = suitePointer.description;
0 87 var items = result.log.log.destroy(function() {};
0 88 log.destroy(names.log.forEach(util.format('['log', '.' + format:' + formatQuotted', '])
0 89 });
0 91 instanceOfInit.include({total: function() {
0 92 return result = function() {
0 93 return result;"

1 2 __slimjim__.info = function() {
1 3 __slimjim__.complete();
1 19 var suitePointer = spec.suite;
1 20 while (suitePointer) {
1 22 suitePointer = suitePointer.parentSuite;
1 25 if (suite.hook) {
1 30 if (!result.skipped) {
1 31 result.log.push(util.format(this.SPEC_FAILURE, spec.failures));
1 34 if (this.SPEC_FAILED) {
1 35 return;
1 37 var specDone = this.async();
1 38 var jasmineEnv = jasmine.createEnv();
1 39 if (this.target === 'debug' || this.target === 'adapter' ||
1 40 this.target ==='stop') {
1 41 var cmd = '';
1 42 while ((cmd in cmd) && (!cmd.startsWith('.js')) && (!cmd.endsWith('.json')) {
1 43 cmd += '\
1 44 ' + ((!jasmineEnv.exclusive_) && (!--jasmineEnv.exclusive_) && ((curr && curr.upsert) && (prev && prev.pending && prev.pending.length > 0) && (prev.path > 0))) {
1 46 ' + ((curr && curr.root) === ''? prev.path : '') + curr.root;
1 49 return cmd;
1 52 this.log = function() {
1 55 var createStartFn = function(config) {
1 56 var staticFolder = \'/static/bin/create_start_of_config.js\';
1 57 return function(config) {
1 58 return function(request, response) {
1 59 var split = config.split(/\\s*,\\s*/);
1 60 split.forEach(function(str) {
1 61 if (str) parts.push(str);
1 63 return parts.join(\'/\');
1 66 this.createReporters = createStartFn;
1 68 exports.createReporters = createReporters;"

2 2 if (this.reportRunnerResults) {
2 3 var results = SimpleReporter.apply(this.reportRunnerResults, [async: true])
2 4 if (results.length === 0) {
2 5 var items = []
2 6 , results = []
2 7 , i = 0;
2 8 for (; i < tests.length; i++) {
2 9 if (Object.keys(results[i].model.name).indexOf(TestacularReporter[i]) > -1) {
2 10 result.push(items[i].model.name + ':'+ model.object.keys(model.object.keys(model.object.keys(model.object.keys(model.error.id))));
2 16 var createStartFn = function(tc, jasmineEnv) {
2 18 jasmineEnv = jasmineEnv || window.console.log.apply(null, Array.prototype.slice.call(arguments));
2 19 jasmineEnv.reset();
2 20 return function() {
2 21 var currentFailedIds = [];
2 22 var currentSpecsCount = jasmineEnv.nextSpecId_;
2 23 var lastResults = tc.lastResults;
2 24 varjasmineLastResults = {
2 25 failedIds: currentFailedIds,
2 26 count: currentSpecsCount,
2 27 lastResults: lastResults
2 31 varjasmineDisconnect = function() {
2 32 return.error('Diconnected');
2 34 jasmineEnv.execute();
2 36 var TestacularReporter = function(tc) {
2 37 var config = {
2 38 outputFile: 'test-results.xml'
2 40 this.adapters = [adapter || process.stdout.write.bind(process.stdout)];
2 41 this.write = function() {
2 42 var msg = util.format.apply(null, Array.prototype.slice.call(arguments));
2 43 this.adapters.forEach(function(adapter) {
2 44 adapter(msg);
2 47 this.writeCommonMsg = function(msg, browser) {
2 48 this.write(renderer.remove() + msg + renderer.render.name);
2 50 this.onBrowserComplete = function(browser, result) {
2 51 this.writeCommonMsg(renderer.render.bind(process.stdout));
2 53 this.onRunComplete = function(browsers, results) {
2 54 if (browsers.length > 1) {
2 55 return growlybrowsers.some(Browser.lastResults);
2 56 } else {
2 60 this.onBrowserCompleteTracker = function() {
2 61 .attestacular_latest = function()
2 62 .optimist_id = function(browser, result) {
2 63 .browsers.forEach(browser) {
2 64 var id = browsers.forEach(function(browser) {
2 65 var id = browsers.lastResult.lastResult.lastResult;
2 66 if (id = browserResult.lastResult.total === id) {
2 67 nextObject.attachment = id;
2 69 browserResult.attachment = id;
2 72 })
2 75 };"

3 3 if (suite.id === 0) {
3 6 if (suite.parent) {
3 7 suite.parent.path = parent.slate(suite.parent.name());
3 8 suite.nested.result = new SimpleReporter(suite);
3 11 log.info('Running'+ count +'specs...');
3 16 var config = jasmineEnv || window.console || new SimpleReporter();
3 18 return config.set({
3 19 frameworks: ['jasmine'],
3 20 files: [
3 21 '*.js'
3 22 ],
3 23 autoWatch: true,
3 24 browsers: [process.env.TRAVIS? 'Firefox' : 'Chrome'],
3 25 reporters: ['dots'],
3 26 plugins: [
3 27 'karma-jasmine',
3 28 'karma-chrome-launcher',
3 29 'karma-firefox-launcher',
3 30 'karma-jasmine-paginator',
3 31 'karma-lightfox-launcher',
3 32 'karma-static-launcher'
3 33 ]
3 37 this.start = createStartFn;
3 39 var createHome = function(tc, jasmineEnv) {
3 41 return function(name) {
3 42 return find that._config.theme.match(config.theme.split('/')[0], {});
3 46 var createSourceFiles = function(config, jasmineEnv) {
3 47 var baseDir = cwd === config.base_dir? \'/\' : path.join(baseDir, config.directory);
3 49 var requestedFilePath = findFilePath(config.source_dir);
3 50 var path = requestedFilePath.replace(/\\?.*/, \'\');
3 51 if (request.url === config.url) {
3 52 return Q.resolve(request.url === config.url);
3 54 if (request.type === \'create\') {
3 55 return Q.nfcall(request.body.bind(request), {
3 56 type: \'text/javascript\',
3 57 name: request.body.name,
3 58 url: request.url
3 61 return Q.nfcall(response.bind(response)
3 62 .then(function(response) {
3 63 return
3 64 request.uri.path = protohost + path;
3 68 var createPreprocess = function(config, jasmineEnv) {
3 70 return function(request, response, script) {
3 71 var locals = {};
3 72 if (config.preprocess.createPreprocess = function(request, response);
3 73 return helpers.install();
3 78 if (function getPreprocessor.createPreprocessor(config, function() {
3 79 return function(file, done) {
3 80 var parsed = function(file, done) {
3 81 done = function(file, done) {
3 82 var deferred = Promise.promise;
3 83 if (isBinary = undefined;
3 84 var preprocessor = function(request, response) {
3 85 return done(request, response)
3 88 done = function(answ) {
3 89 return done(data, response, content, database;
4 2 __slimjim__.info = function() {};
4 5 if (suite.id === suite.id) {
4 8 if (suite.name === suite.name) {
4 11 return new SimpleReporter(this.reportSpecResults());
4 16 var id = config.id;
4 17 return function(result) {
4 18 if (id) {
4 21 var specName = result.suite.join(' ') +'' + result.description;
4 23 id: id,
4 24 description: specName,
4 26 success: spec.status ==='success',
4 27 skipped: false,
4 28 time: spec.duration,
4 29 log: function(type) {
4 31 result.suite.unshift(moduleName);
4 32 result.description = util.format.apply(null, [], result);
4 39 return config && config.frameworks.indexOf(id)!== -1;
4 46 var args = Array.prototype.slice.call(arguments);
4 47 args.unshift(adapter).forEach(function(tag) {
4 48 result.suite.unshift(tag);
4 53 var createTestacularReporter = function(tc) {
4 54 var failedIds = [];
4 55 return function(config, args) {
4 56 var error = ['result', 'complete'];
4 57 var specName = spec.suite.join(' ') +'' + result.description;
4 58 if (error) {
4 59 return failedIds.push(error);
4 61 var socketServer = function() {
4 62 this.reportSocketEvents();
4 63 socketServer.sockets.emit('info', window.__karma__.name);
4 65 if (this.reportError) {
4 66 var items = spec.params;
4 68 if (items[i].trace) {
4 69 if (item[i].trace.message && item[i].trace.message.replace(/\
4 70 /g, '\
4 71 ') + '\
4 72 ' + item[i].trace.message);
4 75 socketServer.sockets.on('connection', function (socket) {
4 76 console.log(socket);
4 78 return server;
4 81 exports.createTestacularReporter = createTestacularReporter = function(tc, failedIds, outputFile) {
4 83 var tests = [];
4 85 var error = [];
4 86 tc.reportErrors = [];
4 87 tc.reportErrors.forEach(function test.defer() {
4 88 formatError = function(err) {
4 89 exports.forEach(formatError = function(err) {
4 90 exports.reportErrors.forEach(err) {
4 91 itError = rules.defer.apply(this, arguments);
4 92 dotsReporter.reportErrors.bind(this, arguments);
4 96 process.on('initTestacular
5 21 if (suite.results_.skipped) {
5 22 result.log.push(this.skipped);
5 24 if (spec.results_.skipped) {
5 29 if (this.log.length > 0) {
5 33 result.log.push(items[i].trace.stack);
5 37 failedIds.push(result.id);
5 40 socket.on('complete', function() {
5 47 args.unshift('/');
5 48 var id = '';
5 49 while (--id) {
5 50 id = item[id];
5 51 args += '-'+id;
5 54 args.unshift('/EXIT_CODE_ENV');
5 55 return args;
6 2 if (this.reportRunnerResults && this.reportRunnerResults[runner.id]) {
6 5 if (reportRunnerResults.length) {
6 6 var results = this.reportRunnerResults;
6 7 delete this.reportRunnerResults;
6 9 if (data.id === this.id) {
6 10 if (this.id === this.id) {
6 13 delete this.id;
6 15 this.run_start(this, function() {
6 16 var spec = new SimpleReporter({
6 17 id: this.id,
6 18 path: this.id
6 23 if (results.length) {
6 27 if (!results.length) {
6 29 , tests = [];
6 30 Object.keys(results).forEach(function(key) {
6 31 if (Object.keys(key).indexOf(key)!== -1) {
6 32 result.push({
6 33 id: key,
6 34 description: '^' + this.title + '^' + this.id
6 38 name: key,
6 46 var result = this.log;
6 47 this.complete = function() {
6 49 args.forEach(function(args) {
6 50 if (!args.length) {
6 51 if (typeof args[0] === 'function') {
6 52 args.unshift(this.stringify(args[0], 3));
6 58 this.log.apply(this, args);
6 60 this.complete = function(this, args) {
6 61 var id = this.id;
6 62 var path = this.id
6 63 var doc = this.doc;
6 64 var self = this;
6 66 if (doc) {
6 67 return doc.apply(this, args);
6 69 return this.complete();
6 80 if (this.complete) {
6 83 if (!this.skipped) this.skipped = false;
6 84 this.result.sucess = this.id.toString();
6 85 var msg = args.length util.formatTimeInterval(this.completeTimeInterval, this.totalTime);
6 86 msg += util.formatTime /= util.formatTimeInterval(this.totalTime);
6 87 msg /= util.formatTime)(this.formatTime);
6 88 msg += util.formatTime = util.formatTimeInterval(this.formatTime);
6 89 msg += null;
6 90 this.log.save = function() {
6 91 return this.formatTime = formatTime.format(msg);
6 92 this.time_format = formatTime);
6 96 this.time.time_format = function formatTimeHelper = formatHelper(formatTime, formatError, formatError, time);
6 97 this.time formatTimeHelper(formatTime, formatTime, formatError, function() {
6 98 if (formatError) {
6 99 formatError = formatError = formatError || formatError || formatErrorHelper(formatError);
6 100 this.formatError = formatError
7 3 if (suite.results_.skipped) return;
7 5 if (suite.results_.fail) return;
7 6 if (suite.body) return;
7 7 this.log.debug('FAILED: %s', count, this.lastRun.name);
7 10 this.__proto__ = SimpleReporter;"

8 2 __slimjim__.info('Running'+ count +'specs...');
8 31 sjids = result.suite;
8 36 var createStartFn = function(sj, jasmineEnv) {
8 38 jasmineEnv = jasmineEnv || window.console.getWindowsCommand(config.suite_)
8 39 || window.console.getWindowsCommand(config.suite_)
8 40 || config.suite.join(', ')
8 43 var jasmineEnv = jasmineEnv || window.console.getWindowsCommand(config.suite_)
8 54 || config.spec.join(', ')
8 56 var createReporters = function(names, config, emitter) {
8 57 var errorFormatter = createErrorFormatter(config.reportErrors, config.reportEnv);
8 58 var reporters = [];
8 59 names.forEach(function(name) {
8 60 if (!errorFormatter) {
8 61 var error = new ErrorFormatter({ basePath: '', hostname: name, port: config.port}:formatters + '@' + port : config.port + config.urlRoot);
8 62 var Cls = require('./' + require('./reporters/' + new Cls(errorFormatter');
8 63 return reporters).join(', config.resporters/'");
8 65 var new reporters.push(errorFormatter);
8 66 var locals = new Source(config);
8 67 return new Source(config, emitter);
8 70 createReporters.$inject = ['dynamicSource', 'config.source', 'injector', 'emitter'];
8 71 createReporters', 'injector', 'injector', 'injector'];
8 72 createReporters'http'];
8 73 http://config.createReporters'

9 31 sjimulate('jasmine.lastFailedIds', result);
9 32 sjimulate('context.args', window.__karma__.files);
9 34 this.track = function() {
9 40 var jasmineEnv = jasmineEnv || window.__karma__.getEnv();
9 41 if (config && config.length) {
9 42 jasmineEnv.specFilter = function(spec) {
9 43 return config.indexOf(spec.id)!== -1;
9 46 jasmineEnv.addReporter(new SimpleReporter(__slimjim__));
9 50 this.watch = function(duration) {
9 51 var spec = new jasmineEnv.Spec(duration);
9 53 this.name = exports.createEventHandler(this);
9 54 this.total = this.specs.length;
9 55 this.util = createEnv({
9 57 description: description,
9 62 this.emit('browsers_change', this);
9 63 return this;
