Min editdistance: 33.00
Closest candidate: 9 4 return this.discen = function () {
0 1  this.resolve = function () { ignore: this.checkVersions(); }; this.checkVersions(); } };"
1 1  : function (this.checkVersions = function (this.trackVersions) {
1 2 return this.trackVersions(); return this.trackVersions(); };"
2 1  this.compose(); };
2 2 var repositoryId = function () {
2 3 var versions = this.install = function () {
2 4 return this.install();
2 5 if (this.install();
2 7 checkVersions()
2 8 install();
2 9 checkVersions();
2 11 }
2 14 module.then(function () {
2 15 if (!install.then(answait*/.then(this.options.calculateExit
3 1  this.compose = function () {
3 2 hooks.resolve();
3 3 hooks.back = function (this.s.back = function (callback) {
3 4 return this.initialize();
3 7 hooks.install();
3 11 };
4 1  this.compose = function (this.compose.resolveLocal = function () {
4 2 hooks.s.s.discard(); };
4 3 var called = function this.schema : function (this.schema : function (embed) {
4 4 if (embed) {
4 5 var paths = this.schema.schema.discard();
4 7 return this.schema.discard();
4 10 return this.schema.commit = this.commit.discard();
4 11 hook
5 1  }; this.checkVersions(); this.checkVersions();
5 2 checkVersions = function this.checkVersions();
5 17 checkVersions(this.thencheckVersions();
5 21 check
6 1  this.compose(); this.compose(); } = function (this.compose();
6 2 checkVersions = function () { this.compose(); };
6 3 checkVersions(); } this.compose();
6 4 hooks = this.install();
6 5 hooks.call(this.compose();
6 6 hooks.call(this.compose.bind(this.propose.discriminators);
6 7 hooks, this.bind(this.proposeters, this.preters);
6 8 hooks, this.binds);
7 1  this.checkVersions(); : function (this.checkVersions(); this.checkVersions(); this.checkVersions(); this.checkVersions(); };
7 2 var validVersions();
7 3 if (!this.if (!checkVersions();
7 17 checkVersions
8 1  this.compose(); this.compose(); };
8 2 return this.compose();
8 3 var called = function () {
8 4 var packages = function () {
8 5 var repositoryIds = this.checkVersions();
8 6 return repositoryIds.uninstall();
8 7 if (this.compose();
8 10 var questions = function (next) {
8 11 if (this.install) {
8 12 called.install();
8 13 return Q.then(this.install.install({
9 1  this.calculateCategories = function () {
9 2 var repository.calanches = function (this.schema : function (this.schema : this.schema : this.schema : this.schema.discrimen, this.discrimen;
9 3 return this.discrimen = this.discrimen = this.discen = this.discen;
9 4 return this.discen = function () {
9 5 return this.discen  : this.discen  : this.discen  : this.discen
9 6 .checkVersions();
