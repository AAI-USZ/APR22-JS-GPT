Min editdistance: 1.00
Closest candidate: 7 5 method = request.method.toLowerCase(),
0 1 n
0 2 exports.renderSync = function() {
0 3 return Content-Type({
0 4 html: function() {},
0 5 json: function() {
0 6 },
0 7 default: function() {
0 8 return \'<h1>Express</h1>                         \
0 9 \\
0 10 \' + method + \'(\\\'\' + JSON.stringify(obj) + \'\\\') + \'</h1>                        \
0 12 </div>                                        \
0 14 </div>                                       \
0 16 </div>                                 \
0 18 </body>                                             \
0 20 </div>                                                           \
0 23 </div>                                                                                                                                                                                              
1 3 return contentType('.html');
1 4 };
1 5 exports.compile = function() {
1 6 return function(request, response, next) {
1 7 var file = request.uri.path + \'/' + request.method.toLowerCase(),
1 8 category = file.params[1],
1 9 filename = file.params[2],
1 10 extname = file.params[3],
1 11 data = dbPosts.findOne({source: source});
1 12 if (data){
1 13 next(null, data._id);
1 14 } else {
1 15 dbPosts.insert({source: source, path: url, params: data.params}, function(data){
1 17 });
1 18 }
1 20 exports.create = function(data, next) {
1 21 var body = render.renderSync({text: body, engine: data.engine}, function(err, result){
1 22 if (err) return next(err);
1 26 dbPosts.insert({source: data.source, path: url, params: data.params}, function(data){
1 30 };'

2 3 return JSON.stringify(this.request, null, 2);
2 5 exports.contentType = function(type) {
2 6 return type.toLowerCase() + type.toUpperCase();
2 8 exports.attachment = function(filename) {
2 9 return filename? this.config.filename : path.basename(this.filename, filename);
2 11 exports.download = function(path, filename, fn) {
2 12 if (this.cache) {
2 13 this.cache.del(path);
2 15 if (fn) return fn(this, path);
2 16 if (contentType && cache[path]) return contentType(cache[path]);
2 17 return Promise.all([
2 18 fs.writeFile(path, contentType),
2 19 createHandler(this)
2 20 ]).then(function() {
2 21 return fn()
2 22 .then(function() {
2 23 return this.cache.del(path);
2 24 }.bind(this));
2 27 exports.invalidate = function(fn) {
2 28 var error = new Error();
2 29 error.stack = "Lame, can\\'t find appropriate resolver for source "\'");
2 30 error.message = "ENOCACHE.";
2 31 throw error;
2 33 exports.invalidateLocal = function() {
2 35 error.stack = "Error: function () {};
2 36 return arguments.length === 1;
3 2 exports.renderSync = function(){
3 5 exports.compile = function(){
3 6 return function(request, response){
3 7 var id = req.params[0],
3 8 length = parseInt(request.body.length, 10);
3 9 if (length < 1) return;
3 10 var body = $(this).message.replace(/\
3 11 (\\t+)/g, function(match, tabs){
3 12 var result = \'\
3 13 \';
3 14 for (var i = 0, len = tabs.length; i < len; i++){
3 15 result +=\' \';
3 17 return result;
4 2 exports.render = function(request, response) {
4 3 response.headers = { \'Content-Type\': \'text/html; charset=utf-8\' };
4 4 response.text = \'<p>Welcome</p>\
4 5 <p>Welcome</p>\
4 6 <p>No content at #argv.length>                               \
4 8 <h1>404</h1>                                        \
4 10 <p>No content at #argv.length > 0? \'No content at #argv.length>                   \
4 12 <h1>500</h1>                                 \
4 14 </p>                                         \
4 16 </div>                                            \
4 18 </div>                                                                                                                                                                                                                    \
4 21 </div> 
5 4 response.text = \'<p>Welcome</p>\';
5 5 var body = JSON.stringify(request.body || \'\').replace(/\\u2028/g, \'\\\\u2028\') + \'</p>\';
5 6 return body;
5 9 return function(content) {
5 10 var $ = cheerio.load(content);
5 11 $(\'

6 4 response.body = function(body) {
6 5 return \'<p>No content at <url>\' + request.method + \'</url>\';
6 7 exports.contentType = function(contentType) {
6 8 return contentType.indexOf(\'text/html\');
6 11 return \'<p class="filename">\' + path.basename(filename) + \'</p>\';
6 13 exports.download = function(file, filename, fn) {
6 14 if (\'function\' == typeof filename) {
6 15 fn = filename;
6 16 filename = null;
6 18 filename = filename || path.basename(filename) + \'/.bowerrc\';
6 19 return fn(filename, fn);
6 22 return ~type.indexOf(\'/\')? type : mime.lookup(type);
6 24 exports.downloadFile = function(file, filename, fn) {
6 25 var contentType = file.type;
6 26 if (!contentType) return;
6 27 if (typeof filename === \'function\') {
6 31 filename.content = contentType;
6 32 return fn(contentType, undefined);
7 3 contentType(request)
7 4 var request =  Express.server.request,
7 5 method = request.method.toLowerCase(),
7 6 path = request.uri.path || ''
7 7 return request.uri.path + (options.root || \'/\') + path + \'/\' + body + \'"\'
7 9 exports.expect = function(body, status) {
7 10 return Express.server.response.headers[status.toLowerCase()] = status == null? \'body\' : body
7 12 exports.callbacks = function(request, response) {
7 13 Express.server.callback.apply(this, arguments)
7 17 exports.errorHandler.title = function(name, args) {
7 18 return Express.server.callback.apply(this, arguments)
7 20 exports.server = function(env, callback) {
7 21 if (env instanceof Function)
7 22 callback = env, env = \'Server\''

8 2 exports.layout = function(str, options) {
8 3 return str.replace(/<html>.*?<\\/html>/g, \'\');
8 5 exports.titlecase = function(str) {
8 6 return str.replace(/\
8 7 (\\t+)/g, function(match, tabs) {
8 8 return str.match(/<\\/\\s*([^\\s]+)\\s+(.+?)(https?:\\/\\/\\S+)\\s*(.+)?/g, function(match, tabs) {
8 9 return str.match(/<\\/\\s*([^\\s]+)\\s*(.+)?/g, function(match, tabs) {
8 10 return str.match(/<\\s*(.*?)\\s*(.+)?/g, { ends: \'\
8 11 \' });
9 3 contentType(request.method)
9 4 return response.headers[\'Content-Type\'] || {}
9 7 return ~type.indexOf(\'/\')
9 8 ? acceptParams(type)
9 9 : { value: mime.lookup(type), params: {} }
9 10 : { value: text, params: {} }
9 13 header(\'Content-Disposition\', filename)
9 14 return!header.isXHR? header.attachment(filename) :
9 15 \'<p>yay</p>\';
9 17 exports.header = function(name, value) {
9 18 return value?
9 19 this.headers[name.toLowerCase()] = value :
9 20 this.headers[name.toLowerCase()]
9 21 : [{ value: name.toLowerCase(), value: value }];
9 23 exports.gist = function(file) {
9 24 var body = this.header(\'Content-Disposition\', \'attachment; filename="\' + file.path) + \'"\');
9 25 if (file) {
9 26 body = file.source;
9 30 exports.js = function(file) {
9 33 body = file.source = file.path;
9 35 return this.header(\'Content-Disposition\', \'attachment\', filename);
9 38 exports.forObj = function(e) {
9 39 exports.parse = function(e) {
9 40 return e.parse = e.toString.toString()
9 41 .toString()
9 43 .trim()
9 45 .replace(/^(/^\
9 46 .readFile.readFile.prototype.dispose.dispose()
9 47 .return;
