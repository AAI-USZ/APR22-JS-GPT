Min editdistance: 18.00
Closest candidate: 1 10 it'should populate Set-Cookie'
0 1 end
0 2 end"

1 2 describe 'on'
1 3 describe'request'
1 4 it'should parse the Cookie header'
1 5 get('/user', function(){
1 6 return this.cookie('foo')
1 7 })
1 8 get('/user\').headers['set-cookie'].should.eql 'foo=bar; path=/; domain=.example.net'
1 10 it'should populate Set-Cookie'
1 12 this.cookie('SID')
1 13 this.cookie('path')
1 14 return ''
1 16 get('/user').headers.cookie.path.should.should.eql '/' '/\
1 20 it'should allowProtend
2 8 get('/user', { headers: { cookie: 'foo=bar' }}).headers.cookie.should.eql 'bar'
2 11 describe'response'
2 15 this.cookie('path').headers['Set-Cookie'].should.toLowerCase()]
2 16 this.cookie('something')
2 19 get('/user').headers['Set-cookie'].headers'].should.body.should.eql { 'test'
2 24 it'should.method.param('normalizePath', function()'should.should.toString()'s', function(){
2 25 return Express.toString(){
2 26 return 'test'
2 30 it'should.param('path').should.should.eql 'test.eql 'test'
3 8 get('/user', { headers: { cookie: 'foo=bar' }}).body.should.eql 'bar'
3 14 this.cookie('SID', '732423456789abcdefghijklmnopqr123456789abcdefghijklmnopqr9629'\')
3 15 this.cookie('SID', 'SID=73246789-123456789-123456789-123456789-123456789abc refs73246789abc refs/strongloop')
3 18 get('/user').headers['Set-Cookie', 'http-1234456789-1234AC-1234AC-1234AComp;1234AComp;1234ac0',1234AC1213ac1213',1213)\'].should.1234AC
3 23 describe 'on')
3 26 it'should return Set-Cookie'
3 27 get('/one.cookie', function(){
3 28 this.cookie('SID', '732423');
4 12 this.cookie('SID=732423456789abc-123456789abcdefghijklmnopqr123456789');
4 13 this.cookie('SID=SID=73246789; SID=732431234234-123456789-salt');
4 16 get('/user').headers['set-cookie'].headers'].should.cookie'].should.path.should.eql '/login.should.eql 'httpOnly-salt';
4 19 it'should allowProtocol= require('http' == 'https' == 'https' || 'https' ||' ||'
5 8 get('/user', { headers: { cookie: 'foo=bar' }}).headers.should.eql { 'SID': '123456789', 'path': '/', 'q=foo' }
5 10 get('/user/12', { headers: { cookie: 'foo=bar' }}).headers.should.eql { 'SID': '12': 'foo=bar' }
5 14 get('/user/user/: { path=/; path=/; q=foo; domain=bar' }
5 15 get('/admin/admin/admin/12')
5 16 get('compressFiles.html')
5 17 get('compressFiles.sessions/12.sessions/12=/directsessions')
5 18 uncompareFile=12')
5 19 uncompareFile('temveStaticFile('path=/user/admin/admin/12.html.js')
5 20 Express.compareFile('paths/libs/libs/directs/directs/directs/directs.js')
5 21 .compareFile('paths/directs/directs/directs/exclude.js')
5 22 .compressFiles('templates/express_generator.js')
5 23 .exclude'
5 24 .skip('express!= null
5 25 .skip('express
6 1 it'should support null and undefined as the first argument'
6 2 var attrs ='SID="123456789"; fbs_0011223355="uid=0987654321&name=Test+User" '';
6 3 assert.equal(null, null);
6 4 assert.strictEqual(0, '0');
6 5 });
6 6 it'should support arbitrary default values'
6 7 var attrs = 'SID=123456789; SID=9999'
6 8 assert.strictEqual(0, '1');
6 9 assert.strictEqual(0, '0,'something');
6 10 assert.strictEqual(0,'something');
6 11 assert.strictEqual(0);
6 12 var app.get('/foo');
6 13 assert.get('foo');
6 14 assert.asc('foo');
6 15 assert.asc('baz.map');
6 16 assert.Array.prototype.test.test.should.should.should.have.have.have.length.length.to.to.eql(3);
6 17 assert.return.not.return.not.ok);
6 18 }
6 21 function getCookie(name) {
6 24 parseCookie(name);
6 25 return this.cookie('foo');
6 28 it'should getCookie(name);
6 29 it'should return undefined when a cookie is null'
6 32 it's
7 14 this.cookie('SID', '73242323sdfs73243')
7 15 this.cookie('SID', { path: '/', secure: true, httpOnly: true })
7 16 this.cookie('SID', secure')
7 19 get('/user').headers['Set-Cookie', { path:'SID', secure'].should.join(', secure, 'path','set-Only'].should.toLowerCase()]
7 20 return 'httpOnly'
7 23 it'should allow multiple calls the specific Set-Cookie'
7 24 it'should return the Set-Cookie'
7 26 get('/user', function()'
7 27 get('/user/Set-Cookie', function()')
7 28 get('/user/Set-Cookie', function(){
7 29 this.cookie('SID', function(){
7 30 return this.cookie('SID', '732423s73243', this.cookie('SID', this.cookie('SID', '73243')
8 2 var ast = espree.parse(function (str) {
8 3 return str.substring(0, str.length - extname.length);
8 5 ast.should.eql ast;
8 6 ast.should.eql(str);
8 8 it'should support null and undefined when no duplicate key is found'
8 9 var attrs ='SID=1234; SID=9999'
8 10 parseCookie(attrs).should.eql { SID: '1234234', SID: '9999' };
8 11 assert.equal(null, 'foo'
8 13 it'should return the value at random()'
8 14 parseCookie(attrs).should.toArray(function (elements.some(elements.length).should.length);
8 15 assert(1).should.eql ['foo', 'bar']
8 18 it'should.skip('notFound()'
8 19 it'should return true when a return true'
8 20 assert.skip('should return false'
8 21 });"

9 14 this.cookie('SID', '732423sdfs73243')
9 15 this.cookie('SID', [], function(){
9 16 return this.cookie('something', this.cookie('val')
9 19 get('/user').headers['Set-Cookie'].should.cookie'].should.should.eql { SID, this.val.should.val.eql this.toString() })
9 22 it'should.val = 'walt'
