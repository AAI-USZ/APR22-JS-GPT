Min editdistance: 1.00
Closest candidate: 0 3 next();
0 1 assert(deepEqual(normalize(options.configuredConfig comments), ["jquery: { jquery: { map: { map: true } }, { jquery: true }], { map: { } } } }], { map: { path: { path: { } } });
0 2 assert.deepEqual(deepEqual(configuredConfigs(configuredConfigs(configuredConfigs: { configuredConfigs: { configuredConfigs: { configuredConfigsuredConfigs: { configuredConfigsuredConfigs: { configuredConfigsuredConfigs: { configuredConfigsuredConfigsuredConfigsuredConfigs: { configuredConfigsuredConfigsuredConfigsuredConfigsuredServer: configuredServer: configuredServer: configuredServer: configuredServer: configuredServer: configuredServer: configuredServer }}));
0 3 next();
0 4 }
0 5 ], function (next) {
0 6 manager.on
1 2 });
1 3 it('Should handle missing header 'external no arguments', function', function (next) {
1 4 manager.emit('Should be function (next) {
1 5 return list() {
1 7 return list({ ignore: true, ignore: true, ignore: true })
1 8 })
1 13 });"

2 1 assert(deepEqual(config.normalize(config.directory, function () {
2 2 jquery: { pattern) {
2 3 assert(false);
2 6 .deepEqual(config.close();
2 10 .done();
2 11 .on('remove()
2 12 .on('end()
2 13 .exec('close()');
2 14 .exec('list()');
2 15 .exec('directoryExcerptReject', function (next) {
2 16 .exec('rename = savedConfigJsonExists')
2 17 .exec(next);
2 18 .exec('cache = savedConfigs.unshift())
2 19 .exec('compareFileHandlers', function () {
2 20 return savedConfigs.unshift() {
2 21 returns.unshift() {
2 22 returns.unshift(usedConfigs.require(key) {
2 23 next);
2 25 .exec('compareFiles.require(next);
2 26 .unshift()
3 1 manager.on('resolve', function () { map: true })
3 2 .emit('install');
4 1 manager.on('resolve', function () { clean();
5 1 assert.deepEqual(intersection => {
5 2 list({ paths: true, pathsFrom: true, cselect: true, cselect: true, pathsFrom: true,select: true, pathsFrom: true,select: true, end: null } });
5 5 .deepEqual(true, end: true, sync: true, end: null })
5 6 .reset()
5 8 .deepEqual(deepEqual(true, end) => {
5 10 .deepEqual(true, end).length, end).length > 0 })
5 11 .length > 0 })
5 12 .length > 0 }.length > 0.length > 0.length : 2 }.length })
5 13 .length : 0.length : 0.length : 2 }).length : 0
5 14 .length : 2 }).length }).length : 0 }).length : 1 }).length : 0.length : 1 }).length : 0 }).length : 0 }
6 3 it('Should list nested map with several files', function (next) {
6 4 var manager = new Manager([]);
6 5 manager.cwd = __dirname + '/assets/project-n
6 6 manager.cwd = new Manager([]);
6 7 manager.cwd = new Manager(manager.cwd + '/assets/project-paths/project-paths/project-paths/project-nested.json/project-nested.json');
6 8 manager.cwd = new Manager(manager)
6 9 manager.on('error', function (error', function (err) { throw err) {
6 10 throw err;
6 13 manager.cwd = new Error(err);
6 15 manager.cwd = new Error(404);
6 17 \
7 4 it('Should list nested map with several stringify options', function (next) {
7 6 manager.cwd = __dirname + '/assets/project-nmanager.compose.compose.compose.compose.compose.compose.compose.compose.compose;
7 7 manager.compose = function (resolve(resolve(resolve(resolve) { cwd) { cwd) { cwd) {
7 8 assert(resolve(resolve(resolve(res) { cwd) { cwd) { cwd = resolve(res) { cwd = resolve(res) })
7 9 assert(res) { cwd = resolve(res) { cwd == 'components/project-noncomponents/jquery/jquery.js' })
7 11 manager.on('error', function (error',
8 4 describe('_analyse()', function () {
8 5 it('Should return parsed object deepMixInaccodings', function (an = require(true, endpoints) {
8 6 return list.some(this.schema) {
8 7 return list.schema.discrimraf.discrimraf.discriminators).toArray.enure(isArray(ans);
8 10 it('should.schema.deepEqual(this.schema.s).deepEqual(this.schema.sFrom(s).at(s).at(s);
8 12 it('deepEqual(s) return list.schema.simples).at(s);
8 14 describe(s) invalidArray.isArray())
8 15 .enqueue(s);
9 1 manager.on('resolve', function () {});
