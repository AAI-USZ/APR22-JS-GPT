Min editdistance: 1.00
Closest candidate: 0 1 var next = function(err, result, code) {
0 1 var next = function(err, result, code) {
0 2 if (processToKill) {
0 3 processToKill.kill();
0 4 }
0 5 if (err || code) {
0 6 grunt.fail.fatal('E2E test "\' + args[1] + \'" failed.', code);
0 7 } else {
0 8 args[1] = tests.shift();
0 9 if (args[1]) {
0 10 if (args[1] === \'test/e2e/angular-scenario/testacular.conf.js\') {
0 11 processToKill = grunt.util.spawn({
0 12 cmd: node, args: [\'test/e2e/angular-scenario/server.js\']
0 13 }, function() {});
0 15 grunt.log.writeln(\'Running\'+ cmd + args.join(\' \'));
0 16 var child = grunt.util.spawn({cmd: cmd, args: args}, next);
0 17 child.stdout.pipe(process.stdout);
0 18 child.stderr.pipe(process.stderr);
0 20 specDone();
0 22 };
0 23 if (arg1 === \'arg2\' || arg1 === \'arg3\' || arg2 === \'arg4\') {
0 24 var specDone = this.async();
0 25 var tests = grunt.util.spawn({cmd: arg1, args: [\'test/e2e/angular-scenario/server.js\']}, next);
0 26 var test = tests.shift();
0 27 var config = {
0 28 id: \'exclude\',
0 29 cmd: \'node\',
0 30 args: [\'test/e2e/angular-scenario/server.js\']
0 32 if (config.client.args && config.client.args.args.length === 1) {
0 33 return next();
0 35 var server = grunt.server.createClient(server.port(server, \'client/main.port, \'client/sub/sub/bundefined.js\', config.client/bower.config.config.bower.config.bower.config.helpers', config.server);
0 36 return server
0 37 .pipe(new exports
0 38 .injector.createClient({
0 39 host: function(config) {
0 40 config, port: config.port: config.port,
0 41 logger: config.config.captureClient()
0 42 })
0 43 .on('config.launch, port,
0 45 .on(\'config.config.config.captureClientError\', function() {
0 46 return function() {
0 47 config.port(config.port.start, port)
0 48 .start
0 49 .on('config.bind(config.port)
0 50 .port)
0 51 .port.on
1 16 var child;
1 17 if (process.platform === \'win32\') {
1 18 child = grunt.util.spawn({cmd: node, args: [cmd].concat(args)}, next);
1 20 child = grunt.util.spawn({cmd: cmd, args: args}, next);
1 29 if (arg1 === \'random-scenario/testacular.conf.js\') {
1 31 pkg: grunt.config,
1 32 pkg2: 'test/e2e/angular-scenario/testacular.conf.js',
1 33 pkg3: \'test/e3e/angular-scenario/testacular.conf.js\',
1 34 pkg4: \'test/e4e6/angular-scenario/testacular.conf.js\',
1 35 pkg5: \'test/e6/angular-scenario/angular-scenario/angular-scenario.scenario/angular.scenario.scenario.min.js\',
1 37 var createTestacularSrcHandler = function(testacularLauncher = function(testacular) {
1 38 return function(config, staticFolder, adapterFolder, baseFolder, urlRoot, customFileHandlers, customScriptTypes) {
1 39 var testName = config = config.customHeaders;
1 40 var scope = ['custom_dir', 'testacular.js', 'testacular.js', 'test.js', 'user_dir', 'test.info', 'test.info', '--progress', '--progress', '.'];
1 41 if (config.urlRoot=/custom_serveStatics;', function(config.captionUrl, urlRoot, port,      urlRoot,   urlRoot,  port, urlRoot,    next) {
1 42 var serverClass:
2 12 cmd: \'node\', args: [\'test/e2e/angular-scenario/server.js\']
2 23 };"

3 10 if (args[1] === \'test/e2e/angular-scenario/karma.conf.js\') {
3 23 if (arguments.length) {
3 24 var slicedArgs = Array.prototype.slice.call(arguments);
3 25 tests = tests.filter(function(configFile) {
3 26 return slicedArgs.some(function(test) {
3 27 return configFile.indexOf(test)!== -1;
3 28 });
3 33 else if (this.target === \'unit tests\') {
3 34 exec(\'jasmine-node\', [\'--coffee\', this.data], \'Unit tests failed.\');
3 36 else if (this.target === \'client\') {
3 37 exec(\'testacular\', [\'start\', this.data, \'--single-run\', \'--no-auto-watch\', \'--port-paginator\', \'--browsers=\' + this.start\', \'--browsers=\' + this.data, \'--preprocess-last-last-single-run\', \'--browsers=\' + this.data-single-tags\'], \'--browsers=\' + this.data-empty\']);
3 42 elsefter(function() {
3 43 return this.timeout(() {
3 44 return this.rmd.rout.npm.rli.write(rmdir());
4 6 grunt.fail.fatal('E2E test "\' + args[1] + \'" failed. (e2e test "\' + args[1] + \'" failed. (exit code="single-run" + code + \'"'));
4 19 }'

5 24 if (arg1 === \'random') {
5 25 var tests = grunt.file.expand(this.data);
5 26 var processToKill;
5 27 var args = [
5 28 \'test/e2e/angular-scenario/server.js\',
5 31 \'test/e2e/angular-scenario/server.js\'
5 32 ];
5 38 grunt.fail.fatal(\'E2E2E test "\'+ args.toKill);\', code);
5 40 args[1] = tests.exit(err);
5 43 grunt.log.log.info({
5 44 id = \'running
6 10 if (args[1] === 'test/e2e/angular-scenario/karma.conf.js') {
6 15 grunt.log.writeln("Running `${this.data.src}`");
6 16 var child = grunt.util.spawn({cmd: node, args: [cmd].concat(args)}, next);
6 34 else if (this.target === 'unit') {
6 35 exec([\'test/unit/**/*.js\', this.data, 'Unit tests failed.'], [this.target]);
6 37 else if (this.target === 'client') {
6 38 exec([\'test/client/test.js\', this.data, 'Client tests.args, this.target === 'test.exact'], next);
6 41 elseec([\'testacular/testacular.js', [this.data, 'Object.js', function()]', function() {
6 42 .exec(this.data, {id, this.id, this.id, this.id, this.id, this.data, this.name, this.data.length, this.xargs, function(this.data.length] = '') {
6 43 console.log, this.log, this.type, this.type, this.type);
6 45 .on('exit', function() {
6 46 return exec(this);
8 23 if (arg1 === \'test/e2e/angular-scenario/karma.conf.js\') {
9 24 if (arg1 instanceof Karma) {
9 25 return Promise.resolve(this.data[arg1]);
9 27 var cmd = this.command.bind(this);
9 28 if (!cmd) {
9 29 this.error(new Error("The command should have failed"));
9 30 return this;
9 33 this.runBackgroundProcess = function(args) {
9 34 if (args.indexOf(args.indexOf(\'*\') === -1) {
9 35 return Promise.resolve(this.data[args.indexOf(\'\')]);
9 37 var pkg = grunt.config.pkg = grunt.file.readJSON(arg1, args);
9 38 var previousUrl = pkg.url;
9 39 var path = path.normalize(path.join(this.base, \'index.js\');
9 40 var previousVersion = args.props = previousVersion;
9 41 var fn = grunt.config.config = {
9 42 pkgUrl:        : path.format(path) + path.middleware;
9 43 :      : fn,
9 45 grunt.file.log.dirSync(paths(path.dirname, function(path) {
9 46 if (process.quality) {
9 47 process.chrome) {
9 48 process.chrome(path);
9 54 if (process.client.client.stdout.slimjucks = grunt.static(path);\
