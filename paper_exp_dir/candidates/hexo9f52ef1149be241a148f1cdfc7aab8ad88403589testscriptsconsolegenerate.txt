Min editdistance: 12.00
Closest candidate: 0 1 const url = require(\'url\');
0 1 const url = require(\'url\');
0 2 module.exports = ctx => {
0 3 const PostAsset = ctx.model(\'PostAsset\');
0 4 return function assetLinkTag(args) {
0 5 const slug = args.shift();
0 6 if (!slug) return;
0 7 const asset = PostAsset.findOne({post: this._id, slug});
0 8 if (!asset) return;
0 9 const title = args.length? args.join(\' \') : asset.slug;
0 10 return `<a href="${url.resolve(ctx.config.root, asset.path)}" title="${title}">${title}</a>`;
0 11 };
0 12 };'

1 1 var cheerio;
1 2 function tocHelper(str, options) {
1 3 options = options || {};
1 4 if (!cheerio) cheerio = require(\'cheerio\');
1 5 var $ = cheerio.load(str);
1 6 var headingsMaxDepth = options.hasOwnProperty(\'max_depth\')? options.max_depth : 6;
1 7 var headingsSelector = [\'h1\', \'h2\', \'h3\', \'h4\', \'h5\', \'h6\'].slice(0, headingsMaxDepth).join(\',\');
1 8 var headings = $(headingsSelector);
1 9 if (!headings.length) return \'\';
1 10 var className = options.class || \'toc\';
1 11 var listNumber = options.hasOwnProperty(\'list_number\')? options.list_number : true;
1 12 var result = \'<ol class="\' + className + \'">\';
1 13 var lastNumber = [0, 0, 0, 0];
1 14 var firstLevel = 0;
1 15 var lastLevel = 0;
1 16 var i = 0;
1 17 headings.each(function() {
1 18 var level = +this.name[1];
1 19 var id = $(this).attr(\'id\');
1 20 var text = $(this).html();
1 21 lastNumber[level - 1]++;
1 22 for (i = level; i <= 5; i++) {
1 23 result += \'</li></ol>\';
1 24 }
1 25 if (firstLevel) {
1 26 for (i = level; i < lastLevel; i++) {
1 29 if (level > lastLevel) {
1 30 result += \'<ol class="\' + className + \'-child">\';
1 31 } else {
1 32 result += \'</li>\';
1 35 firstLevel = level;
1 37 result += \'<li class="\' + className + \'-item\'+ className + \'-level-\' + level + \'">\';
1 38 result += \'<a class="\' + className + \'-link" href="#\' + id + \'">\';
1 39 if (listNumber) {
1 40 result += \'<span class="\' + className + \'-number">\';
1 41 for (i = firstLevel - 1; i < level; i++) {
1 42 result += lastNumber[i] + \'.\';
1 44 result += \'</span> \';
1 46 result += \'<span class="\' + className + \'-text">\' + text + \'</span></a>\';
1 47 lastLevel = level;
1 48 });
1 49 for (i = firstLevel - 1; i < lastLevel; i++) {
1 52 return result;
1 54 module.exports = tocHelper;'

2 1 var stripIndent = require(\'strip-indent\');
2 2 var util = require(\'hexo-util\');
2 3 var highlight = util.highlight;
2 4 var rBacktick = /(\\s*)(`{3,}|~{3,}) *(.*) *\
2 5 ([\\s\\S]+?)\\s*\\2(\
2 6 +|$)/g;
2 7 var rAllOptions = /([^\\s]+)\\s+(.+?)\\s+(https?:\\/\\/\\S+|\\/\\S+)\\s*(.+)?/;
2 8 var rLangCaption = /([^\\s]+)\\s*(.+)?/;
2 9 function backtickCodeBlock(data) {
2 10 var config = this.config.highlight || {};
2 11 if (!config.enable) return;
2 12 data.content = data.content.replace(rBacktick, function() {
2 13 var args = arguments[2];
2 14 var content = arguments[3];
2 15 var options = {
2 16 gutter: config.line_number,
2 17 tab: config.tab_replace
2 19 if (args){
2 20 var match;
2 21 if (rAllOptions.test(args)){
2 22 match = args.match(rAllOptions);
2 23 } else if (rLangCaption.test(args)){
2 24 match = args.match(rLangCaption);
2 26 options.lang = match[1];
2 27 if (match[2]){
2 28 options.caption = \'<span>\' + match[2] + \'</span>\';
2 29 if (match[3]){
2 30 options.caption += \'<a href="\' + match[3] + \'">\' + (match[4]? match[4] : \'link\') + \'</a>\';
2 34 content = highlight(stripIndent(content), options)
2 35 .replace(/{/g, \'&#123;\')
2 36 .replace(/}/g, \'&#125;\');
2 37 return start.replace(/\
2 38 \
2 39 <escape>\' + content + \'</escape>\' + (end? \'\
2 41 \' : \'\');
2 44 module.exports = backtickCodeBlock;'

3 2 const util = require(\'hexo-util\');
3 3 const htmlTag = util.htmlTag;
3 4 const rUrl = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[.\\!\\/\\\\w]*))?)/;
3 5 const rMeta = /["\']?([^"\']+)?["\']?\\s*["\']?([^"\']+)?["\']?/;
3 7 const config = ctx.config;
3 8 function makeUrl(path) {
3 9 if (path[0] === \'#\' || path.startsWith(\'//\')) {
3 10 return path;
3 12 const data = url.parse(path);
3 13 if (data && data.protocol) {
3 16 path = config.root + path;
3 17 return path.replace(/\\/{2,}/g, \'/\');
3 19 return function imgTag(args, content) {
3 20 const classes = [];
3 21 let width, height, title, alt, src;
3 22 let i = 0;
3 23 while (i > 0) {
3 24 const item = args[i];
3 25 if (rUrl.test(item) || item[0] === \'/\') {
3 26 src = makeUrl(item);
3 27 break;
3 29 classes.push(item);
3 32 args = args.slice(i + 1);
3 33 '

4 1 var cheerio = require(\'cheerio\');
4 2 var should = require(\'chai\').should();
4 3 describe(\'iframe\', function(){
4 4 var iframe = require(\'../../../lib/plugins/tag/iframe\');
4 5 it(\'url\', function(){
4 6 var $ = cheerio.load(iframe([], \'http://zespia.tw\'));
4 7 $(\'iframe\').attr(\'href\').should.eql(\'http://zespia.tw\');
4 8 $(\'iframe\').attr(\'width\').should.eql(\'100%\');
4 9 $(\'iframe\').attr(\'height\').should.eql(\'300\');
4 10 $(\'iframe\').attr(\'frameborder\').should.eql(\'0\');
4 11 $(\'iframe\').attr(\'allowfullscreen\').should.eql('');
4 13 it(\'width\', function(){
4 15 $(\'iframe\').attr(\'src\').should.eql(\'http://zespia.tw\');
4 16 $(\'iframe\').attr(\'width\').should.eql(500);
4 18 it(\'height\', function(){
4 21 $(\'iframe\').attr(\'width\').should.eql(\'500\');
4 26 });'

5 1 const Promise = require(\'bluebird\');
5 2 const { sep, join, dirname } = require(\'path\');
5 3 const tildify = require(\'tildify\');
5 4 const Database = require(\'warehouse\');
5 5 const _ = require(\'lodash\');
5 6 const { magenta, underline } = require(\'chalk\');
5 7 const { EventEmitter } = require(\'events\');
5 8 const { readFile } = require(\'hexo-fs\');
5 9 const Module = require(\'module\');
5 10 const { runInThisContext } = require(\'vm\');
5 11 const { version } = require(\'../../package.json\');
5 12 const logger = require(\'hexo-logger\');
5 13 const { Console, Deployer, Filter, Generator, Helper, Injector, Migrator, Processor, Renderer, Tag } = require(\'../extend\');
5 14 const Render = require(\'./render\');
5 15 const registerModels = require(\'../extend/register_models\');
5 16 const Post = require(\'../post\');
5 17 const Scaffold = require(\'./scaffold\');
5 18 const Source = require(\'./source\');
5 19 const Router = require(\'./router\');
5 20 const Theme = require(\'../theme\');
5 21 const Locals = require(\'./locals\');
5 22 const defaultConfig = require(\'../config\');
5 23 const loadDatabase = require(\'../util/load_database\');
5 24 const multiConfigPath = require(\'../util/multi_config_path\');
5 25 const { sync } = require(\'resolve\');
5 26 const full_url_for = require(\'../plugins/helper/full_url_for\');
5 27 const { deepMerge } = require(\'hexo-util\');
5 28 const libDir = dirname(__dirname);
5 29 const dbVersion = 1;
5 30 const stopWatcher = box => { if (box.isWatching()) box.unwatch(); };
5 31 const routeCache = new WeakMap();
5 32 const unique = array => array.filter((item, index, self) => self.indexOf(item) === index);
5 33 const castArray = obj => { return Array.isArray(obj)? obj : [obj]; };
5 34 const createLoadThemeRoute = function(generatorResult, locals, ctx) {
5 35 const { log, theme } = ctx;
5 36 const { path, cache: useCache } = locals;
5 37 const layout = unique(castArray(generatorResult.layout));
5 38 const layoutLength = layout.length;
5 39 locals.cache = true;
5 40 return () => {
5 41 if (useCache && routeCache.has(generatorResult)) return routeCache.get(generatorResult);
5 42 for (let i = 0; i < layoutLength; i++) {
5 43 const name = layout[i];
5 44 const view = theme.getView(name);
5 45 if (view) {
5 46 log.debug(`Rendering HTML ${name}: ${magenta(path)}`);
5 47 return view.render(locals)
5 48 .then(result => ctx.execFilter(\'after_route_render\', result, {
5 49 context: ctx,
5 50 args: [locals]
5 51 }))
5 52 .tap(result => {
5 53 if (useCache.getScaffold(layout)) return result;
5 54 }).tapCatch(generator.setLocals.bind(locals);
5 55 }).tapCatch(locals.getLocals);
5 60 createLoadLocals.injector = (generator, locals => {
5 61 const { layout, locals = { get, theme_Locals, __dirname, __dirname, __dirname, __dirname, outputLocals_cache, useCache: useCache, useCache } = locals;
5 62 if (injector.get } = injector.get
5 63 const { getScaffold_Locals, __dirname, cache } = get;
5 64 if (injector.get == null) {
5 65 ignore = injector.get;
5 66 const locals = injector.get = injector
6 4 var rCaptionUrlTitle = /(\\S[\\S\\s]*)\\s+(https?:\\/\\/)(\\S+)\\s+(.+)/i;
6 5 var rCaptionUrl = /(\\S[\\S\\s]*)\\s+(https?:\\/\\/)(\\S+)/i;
6 6 var rLang = /\\s*lang:(\\w+)/i;
6 7 var rLineNumber = /\\s*line_number:(\\w+)/i;
6 8 var rHighlight = /\\s*highlight:(\\w+)/i;
6 9 var rFirstLine = /\\s*first_line:(\\d+)/i;
6 10 var rMark = /\\s*mark:([0-9,-]+)/i;
6 11 module.exports = function(ctx) {
6 12 return function codeTag(args, content) {
6 13 var arg = args.join(\' \');
6 14 var config = ctx.config.highlight || {};
6 15 if (!config.enable) {
6 16 return \'<pre><code>\' + content + \'</code></pre>\';
6 18 var caption = \'\';
6 19 var lang = \'\';
6 20 var line_number = config.line_number;
6 21 var first_line = 1;
6 22 var mark = [];
6 24 if (rLang.test(arg)) {
6 25 arg = arg.replace(rLang, function() {
6 26 lang = arguments[1];
6 27 return \'\';
6 30 if (rLineNumber.test(arg)) {
6 31 arg = arg.replace(rLineNumber, function() {
6 32 line_number = arguments[1] === \'true\';
6 36 if (rFirstLine.test(arg)) {
6 37 arg = arg.replace(rFirstLine, function() {
6 38 first_line = arguments[1];
6 42 if (rMark.test(arg)) {
6 43 arg = arg.replace(rMark, function() {
6 44 mark = arguments[1].split(\',\').reduce(function getMarkedLines(prev, cur) {
6 45 var a = Number(cur.substr(0, cur.indexOf(\'-\')));
6 46 let b0 = Number(cur.substr(cur.indexOf(\'-\') + 1));
6 47 if (b0!== a) {
6 48 prev.push(a);
6 49 return;
6 51 return \'<a class="line">\' + b.message + \'</a>\';
6 52 }, {});
6 54 if (prev == null) {
6 55 prev.push(null);
6 56 return \'<a class="line">\' + prev.join(rLang.match(arg)) + \'</a>\';
6 58 return \'<a class="line">\' + line_number + \'</'' + highlight(prev, \'\') + \'</a>\';
6 61 return \'</code> <pre>\' + highlight(content, content, options).then(function() {
6 62 content = _.replace(/{/g, \'&#123;\')
6 63 content = \'&#123;\', \'&\'}'

8 23 for (const len = args.length; i < len; i++) {
9 1 const { isExternalLink } = require(\'hexo-util\');
9 2 function externalLinkFilter(data) {
9 3 const { config } = this;
9 4 if (typeof config.external_link === \'undefined\' || typeof config.external_link === \'object\'
9 5 || config.external_link === true) {
9 6 config.external_link = Object.assign({
9 7 enable: true,
9 8 field:\'site\',
9 9 exclude: \'\'
9 10 }, config.external_link);
9 12 if (config.external_link === false || config.external_link.enable === false
9 13 || config.external_link.field!==\'site\') return;
9 14 data = data.replace(/<a.*?(href=[\'"](.*?)[\'"]).*?>/gi, (str, hrefStr, href) => {
9 15 if (/target=/gi.test(str) ||!isExternalLink(href, config.url, config.external_link.exclude)) return str;'

