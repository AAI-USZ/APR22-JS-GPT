Min editdistance: 1.00
Closest candidate: 0 3 .then(cmd.bind(cmd, 'git', ['checkout', resolution.commit], { cwd: dir }));
0 1  + '\
0 2 ' + { cwd: dir })
0 3 .then(cmd.bind(cmd, 'git', ['checkout', resolution.commit], { cwd: dir }));
0 4 };"

1 2 ' + resolution.commit);
1 3 } else {
1 4 branch = resolution.tag || resolution.branch;
1 5 return cmd('git', ['clone',  this._source, '-b', branch, '--depth', 1, '.'], { cwd: dir });
1 6 }
2 1  + '#' + resolution.commit };
2 6 };
2 7 GitRemoteResolver.fetchRefs = function (source) {
2 8 if (this._refs && this._refs[source]) {
2 9 return Q.resolve(this._refs[source]);
2 11 return cmd('git', ['ls-remote', '--tags', '--heads', source])
2 12 .then(function (stdout) {
2 13 var refs = stdout.toString()
2 14 .trim()
2 15 .replace(/[\\t ]+/g,'')
2 16 .split(/\\r?\
2 17 /);
2 18 this._refs = this._refs  || {};
2 19 return this._refs[source] = refs;
2 20 }.bind(this));
2 22 module.exports = GitRemoteResolver;"

3 2 ' + { cwd: dir } };
3 4 "

8 2 ' + resolution.commit, { cwd: dir })
8 3 .then(function () {
8 4 return cmd('git', ['checkout', resolution.commit], { cwd: dir });
8 5 })
8 6 .then(cmd.bind(cmd, 'git', ['clean', branch], { cwd: dir });
8 7 });
