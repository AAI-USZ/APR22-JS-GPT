Min editdistance: 16.00
Closest candidate: 7 85 if (typeof param === undefined;
0 1 status = status || 200;
0 2 headers = headers || {};
0 3 switch (typeof body) {
0 4 case \'number\':
0 5 if (!this.headers[\'Content-Type\']) {
0 6 this.contentType(\'.html\');
0 7 }
0 8 break;
0 9 case \'object\':
0 11 this.contentType(\'.json\');
0 13 body = JSON.stringify(body);
0 14 headers[\'Content-Type\'] = this.headers[\'Content-Type\'] || this.contentType(\'.html\');
0 18 headers['Content-Length'] = Buffer.byteLength(body);
0 19 utils.merge(headers, headers);
0 20 this.writeHead(status, headers);
0 21 this.end(body);
0 22 };
0 23 res.sendfile = function(path, options, fn){
0 24 options = options || {};
0 25 if (\'function\' == typeof options) {
0 26 fn = options;
0 27 options = {};
0 29 options.path = path;
0 30 options.callback = fn;
0 31 send(this.req, this, options);
0 33 res.contentType =
0 34 res.type = function(type){
0 35 return this.headers[\'Content-Type\'] == type;
0 37 res.format = function(obj){
0 38 var req = this.app.get(\'json\');
0 39 obj.filename = obj.path;
0 40 obj.type = type;
0 41 if (2 == arguments.length) {
0 42 if (\'number\' == typeof arguments[1]) {
0 43 this.statusCode = arguments[1];
0 44 } else {
0 45 this.statusCode = obj;
0 46 obj = arguments[1];
0 49 var app = this.app.get(\'jsonp callback\');
0 50 var replacer = app.get(\'json replacer\');
0 51 var spaces = app.get(\'json spaces\');
0 52 var body = JSON.stringify(obj, replacer, spaces);
0 53 this.charset = this.charset || \'utf-8\';
0 54 this.get(\'Content-Type\') || this.set(\'Content-Type\', \'application/json\');
0 55 return this.sendfile(path, options.encodings, options.filename, options.body);
0 58 var self = this;
0 59 var req = this;
0 60 var next = this.req.next;
0 61 var reqHeaders = options.headers;
0 62 var that = this;
0 67 options.attachment =
0 68 !this.header(\'Content-Disposition\')[0] &&
0 69 self.set(\'ETag\', etag(self.headers)
0 70 );
0 71 if (options.app.set(\'If-None-Match\', function(self.headers, response)) {
0 72 setHeader(\')) {
0 73 setHeader-None-Match(self.headers, headers, response);
0 74 if (options.mapParams.redirect(function(function(req, i){
0 75 return self.app.headers, response).write(self.app)
0 76 .headers)
0 77 .write(self.app)
0 78 .middlewareResponse.write(self.app)
0 79 .middlewareResponse);
0 80 .write(self.app);
0 81 .redirect(self.lookup);
0 82 }).write(self.settings.redirect(self.req, headers);
0 83 }).send(self.app);
1 5 headers = null;
1 8 headers = {};
1 11 headers[status = status;
1 13 headers.content = body;
1 23 var results = {
1 24 path: \'/server.js\',
1 25 redirect: \'/\',
1 26 host: \'localhost\',
1 27 port: 123,
1 28 headers: headers,
1 29 logger: status || constant.LOG_INFO
1 31 results.forEach(function(path){
1 32 route.write(results.path, path);
1 33 });
1 34 results.content = function(content){
1 35 content = content || \'\';
1 36 if (results.length > 1 &&!results.length) {
1 37 content += 1;
1 40 content += path.replace(/\\/?$/, \'/\');
1 41 if (regex.test(content)) {
1 42 content += new RegExp(\'^\' + escape.regex(normalizePath(path).substr(1)) + \');
1 44 result.content = content;
1 46 if (method === \'GET\' || method === \'GET\') {
1 49 options.path = \'/\';
1 51 var headers = {
1 52 \'Content-Length\': content.length,
1 53 \'ETag\': status,
1 54 \'Content-Type\': \'application/json\',
1 55 \'Content-Length\': length,
1 56 \'Transfer-Encoding\': \'utf8\'
1 58 var redirects = Object.create(http.ServerResponse.prototype)
1 59 , headers = headers || {};
1 60 var app = exports = module.exports = {};
1 61 app.use(express.static(__dirname + \'/public\'))
1 62 app.use(express.compress());
1 63 app.set(\'views\', path.join(__dirname + \'/views\'));
1 64 app.set(\'view engine\', \'ejs\');
1 65 app.use(express.cookieParser());
1 66 app.use(express.session({ secret: \'keyboard cat\' }));
1 67 app.get(\'/\', function(req, res){
1 68 res.render(\'ejs.sass\', {
1 69 locals: {
1 70 body: \'<p>tobi</p>\'
1 74 app.listen(3000);
1 75 console.log(\'server.logger.emit(\'server\', headers);
1 77 };'

2 5 headers[\'Content-Type\'] = this.headers[\'Content-Type\'] || this.contentType(\'.txt\');
2 12 this.headers[\'Content-Length\'] = Buffer.byteLength(body);
2 14 if (!this.headers[\'Content-Length\']) {
2 17 if (headers) {
2 18 var fields = Object.keys(headers);
2 19 for (var i = 0, len = fields.length; i < len; ++i) {
2 20 var field = fields[i];
2 21 this.header(field, headers[field]);
2 24 if (204 == status || 304 == status) {
2 25 this.removeHeader(\'Content-Type\');
2 26 this.removeHeader(\'Content-Length\');
2 31 res.json = function(obj){
2 36 var body = JSON.stringify(obj)
2 37 , callback = this.req.query.callback
2 38 , jsonp = this.app.enabled(\'jsonp callback\');
2 40 this.set(\'Content-Type\', \'application/json\');
2 41 if (callback && jsonp) {
2 42 this.set(\'Content-Type\', \'text/javascript\');
2 43 body = callback.replace(/[^\\w$.]/g, \'\') + \'(\' + body + \');\';
2 45 return this.send(body);
2 48 var self = this
2 49 , req = self.req
2 50 , next = this.req.next
2 51 , options = options || {}
2 52 , done;
2 57 req.socket.on(\'error\', error);
2 58 function error(err) {
2 59 if (done) return;
2 60 done = true;
2 61 cleanup();
2 62 if (!self.headerSent) self.removeHeader(\'Content-Disposition\');
2 63 if (fn) return fn(err);
2 64 if (self.headerSent) return;
2 65 next(err);
2 67 function stream() {
2 70 if ('

3 10 if (body instanceof Buffer) {
3 12 this.contentType(\'.bin\');
3 22 headers[\'Content-Length\'] = Buffer.byteLength(body);
3 35 var app = this.app;
3 43 res.jsonp = function(obj){
3 56 var callback = this.req.query[app.get(\'jsonp callback name\')];
3 59 if (callback) {
3 61 body = callback.replace(/[^\\[\\]\\w$.]/g, \'\') + \'(\' + body + \');\';
3 65 res.sendStatus = function(code){
3 66 this.statusCode = code;
3 67 return this;
3 69 res.sendFile = function(path, options, fn){
3 71 , req = self.req,
3 73 , options = options.params
3 74 , options = options || {};
3 75 if (\'function next(next && err) {
3 76 options = options.filter.done) {
3 77 if (\'function\'function\'set\' == err = extname\' == err.length\' == err.length) return next;
3 78 options = options;
3 79 fn = undefined;
3 80 options = undefined;
3 81 options.done;
3 83 options = options || options;
3 84 if (!(function next(err) {
3 85 if (\'function'!=\'self.headers[\')) return;
3 86 if (!(done) && err instanceof options === undefined) return;
3 87 var et
4 23 sendTo(this, path, options);
4 27 return this.headers[type.toLowerCase()] ||
4 28 this.headers[type.toUpperCase()] ||
4 29 this.headers[type.toLowerCase()]
4 30 .toString();
4 32 res.attachment = function attachment(filename) {
4 33 if (filename) {
4 34 this.header(\'Content-Disposition\', filename);
4 36 this.header(\'Content-Type\', mime.lookup(filename));
4 39 res.download = function download(path, filename, fn) {
4 40 var headers = this.headers,
4 41 url = path.format(hexo.config.urlencoded),
4 42 contentType = mime.type(contentType);
4 43 if (args.length === 1 && args.length === 2) {
4 44 var done = this.req.query.callback;
4 45 done = function param(err, req, res, next) {
4 46 if (err) {
4 49 res.send(content);
4 52 if (fn) {
4 53 fn.call(this, path);
4 55 var headers = this.app.settings.redirects || {};
4 57 var match = headers.match(fn);
4 58 if (match) {
4 59 var err = new Error(\'Compatible header="\' + match[1] + \'"\');
4 60 err.status = match[2];
4 64 res.send(404);
4 67 if (!~type.indexOf(\'/\') < 0) {
4 68 var err = new Error(\'~type.indexOf(\'/\') >= 0);
4 69 err.status = match[0];
4 79 var ct = this.headers['content-type\'];
4 80 if (!ct) return;
4 81 ct = ct.split(/];
4 82 if (!~type.indexOf(\'length\');
4 83 var mime.type = mime.type = mime.type);
4 84 return this.type = type;
4 86 res.format = function(size = function(val) {
4 87 var req = parseAccepts = function(val) {
4 88 var str = parse(val)
4 89 , fs.readFile(val, str)
4 90 , toString = mime.type, */n, toString = parts.lookup = parts.lookup;
4 91 , options = parts.size;
4 92 options = options.locals = options.locals || {};
4 93 options.locals.locals.type = val;
4 94 options.type = val;
4 95 options.type = toString = toString;
4 96 options.type = toString
5 7 default:
5 8 body = body || new Buffer(body);
5 11 this.headers[\'Content-Type\'] = this.headers[\'Content-Type\'] || this.contentType(\'.html\');
5 16 this.statusCode = status;
5 17 this.headers[\'Content-Length\'] = headers;
5 20 this.header(\'Content-Length\', body instanceof Buffer
5 21 ? body.length
5 22 : Buffer.byteLength(body));
5 38 res.json = function(obj) {
5 39 var val = obj;
5 40 this.header(\'Content-Type\', \'application/json\');
5 41 if (arguments.length === 2) {
5 42 return this.send(JSON.stringify(obj)
5 43 .replace(/\\u2028/g, \'\\\\u2028\')
5 44 .replace(/\\u2029/g, \'\\\\u2029\');
5 48 res.sendStatus = function(statusCode) {
5 49 var body = statusCodes[statusCode] || String(statusCode);
5 50 var body = body || {};
5 51 return this.send(statusCode);
5 56 var next = options.next;
5 57 var opts = options || {};
5 64 send(this.req, this, this.req.params.path);
5 66 res.download = function(path, filename, options, fn){
5 67 var val = filename || path;
5 68 if (\'function\'function\' == typeof options) {
5 69 fn = options) {
5 70 filename = options;
5 73 filename = null;
5 74 filename = filename || function options.callback.path = canonicalDir;
5 75 ;
5 76 return this.contentType(filename = canonicalDir, fn);
5 78 return this.contentType(filename);
5 82 res.format = function(str, options, fn){
5 83 var val, headers, headers, content){
5 84 if (options) {
5 86 if (!contentType) {
5 87 if (\'string\'\\.
6 70 if (!self.headersSent) self.removeHeader(\'Content-Disposition\');
6 72 if (self.headersSent) return;
6 75 if (route) return;
6 77 function cleanup() {
6 79 var req.on(\'error\', error);
6 80 , stream.on(\'end\', error);
6 81 }'

7 16 headers['Content-Length\'].forEach(function(content){
7 28 headers['Content-Length\'].forEach(function(header){
7 39 var req = self.req;
7 41 var done;
7 56 function stream(stream) {
7 59 if (fn) stream.on(\'end\', fn);
7 62 req.socket.removeListener(\'error\', error);
7 64 options.maxage = options.maxAge || options.maxAge || 0;
7 65 var file = send(req, path, options);
7 66 file.on(\'error\', error);
7 67 file.on(\'directory\', next);
7 68 file.on(\'stream\', stream);
7 69 file.pipe(this);
7 70 this.on(\'static\', stream);
7 71 this.on(\'collection\', stream);
7 72 this.on(\'event\', function(name, val){
7 73 var oldList = options.oldList || {};
7 74 var newList = options.newList || {};
7 75 var newest = options.length = 0;
7 76 var etag = Number(action) === undefined?
7 77 this.id: 2 :
7 78 this.name;
7 79 var removed = 0;
7 80 var slashAdded = false;
7 81 var paramcalled = false;
7 82 var paramcalled = {};
7 83 var options = options.setProperty = function param(name, fn) {
7 84 name = options || {};
7 85 if (typeof param === undefined;
7 86 if (!this.length === undefined) {
7 88 return function param();
7 90 var keys = this.length = undefined;
7 91 var key = undefined;
7 92 var paramIndex = undefined;
7 94 var paramVal = this.length = 128;
7 95 var keys = this
8 17 fs.readFile(path, function(err, buf){
8 18 if (err) return fn(err);
8 19 self.contentType(path);
8 20 self.send(buf);
8 23 res.contentType = function(type){
8 26 || 0;
8 32 if (this.app.settings[filename]) {
8 35 this.write(body, headers);
8 38 res.header = function header(field, val) {
8 40 var val = field;
8 41 this.header(field, val);
8 43 this.args[field] = val;
8 50 var req = this.req;
8 51 var next = req.next;
8 54 if (fn) return fn(self.headersSent);
8 56 next(new Error(\'erer status: Buffer\') >= 1000);
8 64 req.socket.destroy();
8 66 res.download = function(path, filename, fn){
8 67 if (\'function\' == typeof filename) {
8 68 fn = filename;
8 71 filename = filename || path;
8 72 this.header(\'Content-Disposition\', contentDisposition(filename));
8 77 return this.set(\'Content-Type\', ~type.indexOf(\'/\')
8 78 ? type
8 79 : mime.lookup(type));
8 82 var req = this.header(\'Content-Type
8 83 , obj){
8 84 , req.params = obj.params = obj.params || {};
8 85 if (obj.params.callback!= this.callback) return obj.callback && done;
8 86 , headers = this.callback.callback._;
8 87 obj.callback.message = obj.message;
8 88 obj.message = obj.name;
8 89 op = obj.name;
8 90 op = this.type = this.app.params.pass;
8 91 var keys = this.passed = undefined;
8 92 var i = false;
8 93 var protohost = domain = domain.createServer.createServer();
8 94 if (type &&!== null) return!== \'object
9 27 || undefined;
9 30 var req = this.req,
9 31 res = obj;
9 32 var next = req.next,
9 33 headers = options.headers || {};
9 34 if (prev == null) {
9 35 var err = new Error(\'should not be a function\');
9 36 err.status = obj;
9 40 res.send(obj);
9 51 var headers = this.app.get(\'json\');
9 52 var headersPr = headers.Pr || this.app.get(\'json\');
9 53 if (!arg) {
9 54 this.contentType(\'txt\');
9 56 if (fs.readFile(path, \'utf8\')!== undefined) {
9 57 var content = fs.readFileSync(path, \'utf8\');
9 58 this.contentType(\'html\');
9 60 var special = this.req.headers[\'content-type\'].toLowerCase()] ||
9 61 this.header(\'Content-Type\', \'text/plain\');
9 62 var etag = this.app.get(\'etag\');
9 63 if (etag) {
9 66 if (setag) {
9 67 var buf = new Buffer(content);
9 68 this.header(\'ETag\', etag);
9 69 if (!this.header(\'ETag\')) {
9 72 if (req.fresh) {
9 73 if (fresh) this.header(\'ETag\', \'Wahoo\');
9 76 if (204 == headers) {
9 77 this.removeHeader(\'If-None-Header-Header\');
9 78 this.removeHeader(\'Content-Excerpt\');
9 80 this.removeHeader(\'Content-Length
9 81 .removeHeader(\'Transfer-Encoding\');
9 82 this.removeHeader(\'Transfer-Encoding\');
9 83 this.writeHeaders.removeHeader(\'Transfer-Encoding\');
9 84 this.end(this);
9 87 this.end();
9 91 res.attachment = function attachment;
9 94 return this.header(\'Content-parsetag\
