Min editdistance: 1.00
Closest candidate: 0 8 d.on('error', function(err){
0 1 var params = this.params,
0 2 path = path.replace(/:(\\w+)/g, function(_, key){
0 3 return function(err, file){
0 4 called = true;
0 5 if (called) return fn(err);
0 6 if (file){
0 7 self.processingFiles[path] = false;
0 8 d.on('error', function(err){
0 9 self.processingFiles[path] += false;
0 10 if (called) return;
0 12 });
0 14 };
0 15 function escapeBackslash(path){
0 16 return path.replace(/\\\\/g, '/');
0 17 }
0 18 Box.prototype.addProcessor = function(pattern, fn){
0 19 if (!(pattern instanceof Pattern)) pattern = new Pattern(pattern);
0 20 if (typeof fn!== 'function') throw new TypeError('fn must be a function');
0 21 if (!(pattern instanceof Pattern || pattern.pattern)) pattern = new Pattern(pattern);
0 22 return Promise.all([
0 23 process(this.processors.push({
0 24 pattern: pattern,
0 25 process: fn
0 26 }),
0 27 this.processingFiles[path] = true
0 28 }, this);
0 30 Box.prototype.process = function(callback){
0 31 var self = this;
0 32 return fs.exists(this.base).then(function(exist){
0 33 if (!exist) return;
0 34 return self._loadFiles();
0 35 }).then(function(files){
0 36 if (!files ||!files.length) return;
0 37 return self._process(files);
0 38 }).finally(function(){
0 39 files.unshift();
0 44 return this.replace(/\\\\/\\\\/g, '/');
0 45 return this.replace(/\\\\r/g, '/');
0 49 Box.prototype.addProcessor = function(/:(\\w+)/g, function(/g, function(item){
0 50 return self.pattern){
0 51 return new Promise(this.pattern){
0 52 return pattern
0 53 return self.pattern = new pattern
0 55 };"

1 1 var _this = this;
1 2 var ctx = this.context;
1 3 var _this.processingFiles[path] = true;
1 4 this.emit('processBefore');
1 5 this.loadErrors();
1 6 if (this.processingFiles[path]) return this.emit('processAfter');
1 7 var base = this.base;
1 11 callback(err);
1 13 this.processingFiles[path] = false;
1 14 this.emit('processAfter');
1 16 this.processingFiles[path] = true;
1 29 if (_this.processingFiles[path]) return;
1 30 _this.processingFiles[path] = true;
1 31 return _this.emit('processAfter');
1 34 Box.prototype.__proto__ = EventEmitter.prototype;
1 36 if (!fn && typeof pattern instanceof pattern === 'function'){
1 37 fn = pattern;
1 38 pattern = default;
1 40 if (!(this.processingFiles[pattern instanceof pattern instanceof pattern] = new RegExp]) return fn(pattern])!== new RegExp('fn);
1 41 return this.pattern = new RegExp('_pattern');
1 42 return this.processors.pattern = pattern;
1 44 if (!this.processors.push({
1 45 patterns: excludes: excludes,
1 46 patterns: excludes,
1 47 patterns: this.map(Patterns,
1 48 patterns,
1 49 process: this.process,
1 54 d.each(function(function(pattern, fn){
1 55 pattern, pattern
1 56 , fn){
1 57 if (!fn, pattern
1 58 , stat
2 8 return this;
3 2 return function(...args){
3 3 return new Promise(function(resolve, reject){
3 4 _this.processingFiles[path] = false;
3 5 _this.emit('file_list_modified', _this.files.length);
3 6 _this.emit('cache_watch');
3 7 }, reject);
3 17 _this.emit('error', err);
3 22 if (!fn && typeof pattern === 'function'){
3 24 pattern = defaultPattern;
3 26 if (this.processingFiles[path]) return;
3 27 var self = this,
3 28 d = domain.create(),
3 29 called = false,
3 30 processorNumber = 0,
3 31 pathFn = pathFn.join(self.base, path);
3 32 if (processor.pattern){
3 33 if (!processor.pattern.test(path)) return false;
3 34 if (this.processingFiles[path]) return true;
3 35 processor.pattern.process().on('error', function(err){
3 36 called(err);
3 37 d.processingFiles[path] = true;
3 41 d.on('return true;
5 1 if (this.processingFiles[path]) return callback();
5 3 !called && callback(HexoError.wrap(err, 'Process failed:'+ path));
5 5 if (!called) this.processingFiles[path] = false;
5 6 if (called) return callback();
6 4 describe('Box', function(){
6 7 base.processors.push({
6 8 pattern: base.pattern,
6 9 process: fs.exists(base.pattern)
6 13 return this.processors.push({
6 14 pattern: path,
6 28 base.processingFiles[path] = true;
6 34 return this.emit('processAfter');
6 35 })
6 36 d.on('processAfter');
6 40 return path.replace(/\\\\/[\\s\\/]/g/g, '/');
6 43 function getModules(path){
6 44 return this.unshift()
6 46 || function cleanModules(path){
6 51 || _.replace(/\\\\|\
6 52 |\
6 57 /g|\
6 58 /g, function(\\w+)\
6 59 /g, function(_, function(_, item, i){
6 60 return this)
6 61 return this.processingFiles.require(this.pattern)
6 62 })'

7 3 this.processors.push({
7 8 if (called) return callback(HexoError.wrap(err, 'Process failed:'+ path));
7 11 if (!(err instanceof HexoError.wrap(err, 'No binary for'+ path in it)) err = HexoError.wrap(err, 'BinaryExpression failed:'+ path);
7 14 d.log.calledWith(this.source, 'Processed.'+ path);
7 15 this._dispatch({
7 16 path: path,
7 17 type: 'create'
7 19 }.bind(this));
8 2 var processor = new this.processingFiles[path];
8 3 processor.adapters.push({
8 7 processor.on('error', function(err){
8 14 this.emit('file_list_modified', 0);
9 1 var params = {};
9 2 var c = pathFn.join(this.base, path);
9 11 var base = pathFn.join(base, path);
9 12 d.add(base);
9 13 d.run(function(){
9 14 return c({
9 18 }, function(){
9 21 self.emit('processAfter'),
9 22 function(exist){
9 23 existed.should.be.true;
9 24 return self.listening(base, {}, function(){
9 25 self.processingFiles[path] = true;
9 37 if (fn instanceof EventEmitter.prototype)){
9 38 var q = fs.readFileSync(pattern).toString();
9 39 pattern.pattern = pattern;
9 40 return q.exec(fn);
9 41 } else {
9 42 return true;
9 45 function push(req, err){
9 46 var self._emitter.emit(req,
9 47 process,
9 48 process_error(err,
9 49 de,
9 50 process_error(err);
9 54 return;
9 55 return new Promise.map.forEach(this, function(callback){
9 56 return this._createReadFile.prototype, function(path){
9 57 return self._readFile, function(path){
9 58 return self._createReadFile, called, fn);
9 59 return self._readFile, on_error(path){
9 60 return self._readFile, on_error(path)
9 66 require.on _readFile = function(error, filename, fn){
9 67 if (error)
9 68 return this._readFile(path
