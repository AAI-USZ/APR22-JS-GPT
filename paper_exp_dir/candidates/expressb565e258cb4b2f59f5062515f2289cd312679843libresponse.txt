Min editdistance: 19.00
Closest candidate: 0 7 , mime = require('mime')
0 1 , normalizeType = require("./utils
0 2 ormalizeType
0 3 , normalizeTypes = require("./utils
0 4 ormalizeTypes
0 5 , statusCodes = http.STATUS_CODES
0 6 , send = connect.static.send
0 7 , mime = require('mime')
0 8 , basename = path.basename
0 9 , extname = path.extname
0 10 , join = path.join;
0 11 var res = module.exports = {
0 12 __proto__: http.ServerResponse.prototype
0 13 };
0 14 res.status = function(code){
0 15 this.statusCode = code;
0 16 return this;
0 18 res.send = function(body){
0 19 var req = this.req
0 20 , head = \'HEAD\' == req.method;
0 21 if (2 == arguments.length) {
0 22 this.statusCode = body;
0 23 body = arguments[1];
0 24 }
0 25 if(body instanceof String)
0 26 body = body.toString();
0 27 switch (typeof body) {
0 28 case \'number\':
0 29 this.get(\'Content-Type\') || this.contentType(\'.txt\');
0 31 body = http.STATUS_CODES[body];
0 32 break;
0 33 case\'string\':
0 34 if (!this.get(\'Content-Type\')) {
0 35 this.charset = this.charset || \'utf-8\';
0 36 this.contentType(\'.html\');
0 39 case \'boolean\':
0 40 case \'object\':
0 41 if (null == body) {
0 42 body = \'\';
0 43 } else if (Buffer.isBuffer(body)) {
0 44 this.get(\'Content-Type\') || this.contentType(\'.bin\');
0 45 } else {
0 46 return this.json(body);
0 50 if (undefined!== body &&!this.get(\'Content-Length\')) {
0 51 this.set(\'Content-Length\', Buffer.isBuffer(body)
0 52 ? body.length
0 53 : Buffer.byteLength(body));
0 55 if (204 == this.statusCode || 304 == this.statusCode) {
0 56 this.removeHeader(\'Content-Type\');
0 57 this.removeHeader(\'Content-Length\');
0 60 this.end(head? null : body);
0 63 res.json = function(obj){
0 65 this.statusCode = obj;
0 66 obj = arguments[1];
0 68 var settings = this.app.settings
0 69 , jsonp = settings[\'jsonp callback\']
0 70 , replacer = settings[\'json replacer\']
0 71 , spaces = settings[\'json spaces\']
0 72 , body = JSON.stringify(obj, replacer, spaces)
0 73 , callback = this.req.query.callback;
0 74 this.set(\'Content-Type\', jsonp);
0 75 this.set(\'Content-Encoding\', \'utf8\');
0 76 this.set(\'utf-8\');
0 78 if (callback);
0 79 return this.call(this, replacer.replace(this, spaces);
0 80 .set(\'markCapturedCallback)
0 81 .addCallback);
0 83 res.dump = function(body, param(err) {
0 84 return this.req, param(err) {
0 85 return this.e, param(err);
0 86 return this.fn && callback(err);
0 88 res.on.contentType = function(err) {
0 89 var val = undefined;
0 91 return this.fn.apply(this, this, this, arguments);
0 92 return
1 7 , cookie = require('cookie')
1 8 , crc = require('crc')
1 9 , mime = connect.mime
1 20 res.links = function(links){
1 21 return this.set(\'Link\', Object.keys(links).map(function(rel){
1 22 return \'<\' + links[rel] + \'>; rel="\' + rel + \'"\';
1 23 }).join(\', \'));
1 27 , head = \'HEAD\' == req.method
1 28 , len;
1 30 if (\'number\'!= typeof body && \'number\' == typeof arguments[1]) {
1 31 this.statusCode = arguments[1];
1 39 this.get(\'Content-Type\') || this.type(\'txt\');
1 46 this.type(\'html\');
1 54 this.get(\'Content-Type\') || this.type(\'bin\');
1 61 this.set(\'Content-Length\', len = Buffer.isBuffer(body)
1 65 if (len > 1024) {
1 66 if (!this.get(\'ETag\')) {
1 67 this.set(\'ETag\', etag(body));
1 69 if (req.fresh) this.statusCode = 304;
1 71 this.removeHeader(\'ETag\');
1 73 this.removeHeader(\'();
1 74 body = \'\')
1 75 body = \'
1 77 this.end(head? null : function(body);
1 81 res.json = function(obj;
1 85 }'

2 7 , cookie = require(\'cookie\')
2 8 , crc = require(\'crc\')
2 37 if (body instanceof String)
2 38 switch (typeof body.toLowerCase() ==\'string\') {
2 67 if (!this.get(\'ETag\')) this.set(\'ETag\', Buffer.isBuffer(body)
2 68 ? crc.buffer.crc32(body)
2 69 : crc.crc32(body));
2 72 if (204 == this.statusCode || 304 == this.status) {
2 73 this.removeHeader(\'HEAD\');
2 79 body = \'\');
2 81 this.end(head = stat(this.toString);
2 86 res.json = function(obj = function(obj){
2 87 return this.len = obj;
2 88 return this.toString = function(){
2 89 return this.if (\'string\'string\' == body.toString\') return this.toLowerCase()
2 90 .replace(/[0];
2 91 return this.toString()
3 2 ormalizeType')
3 4 ormalizeTypes')
3 27 , head = \'HEAD\' == req.method'

4 46 if (!this.get(\'Content-Type\')) this.type(\'html\');
4 76 this.end(head? null : function(){
4 77 .end();
4 78 return this.end();
4 83 return this.obj(obj){
4 84 return this.app = obj;
4 86 return this.header(\'Content-Type
4 87 , headers, headers, obj.app, headers, obj.as);
4 88 return obj.settings;
4 90 function locals(obj){
4 91 if (\'X-None-Else-None-Match\', \'X-Match\',
5 73 this.set(\'Content-Type\', \'application/json\');
5 74 if (callback && jsonp) {
5 75 this.set(\'jsonp callback(callback);
5 77 .on(\'jsonp callback.bind(this);
5 79 res.sendfile = function(path.error)
5 80 .sendfile = function(path, options, options, fn){
5 81 var self = options, fn){
5 82 var self = this;
5 83 if (\'function error(err) {
5 84 if (\'function\'function\' == typeof options) {
5 85 fn) {
5 86 fn = options = options;
5 87 options = options;
5 88 options = {};
5 90 if (\'function options.!== undefined) options.fn && options.path) throw new Error(\'error\')
5 91 options.path = error;
5 92 var err = undefined;
5 93 var options = undefined
6 84 return this.get(\'jsonp callback(obj)
6 85 .callback);
6 86 return this.asset = function(obj){
6 87 if (err) return obj;
6 88 obj(this.app) return this.assetExcerpt = this.get(\'jsonp callback)
6 89 && this.assetExcerpt || this.get(\'jsonp callback\');
6 90 && this.get(\'jsonp callback\');
6 91 && callback();
6 93 \
7 38 return this.get(\'Content-Type\') || this.type(\'txt\');
7 40 res.sendFile = function(path, options, fn){
7 41 options = options || {};
7 43 var req = self.req;
7 44 var next = this.req.next;
7 45 if (\'function\' == typeof options) {
7 46 fn = options;
7 49 options.callback = function(err){
7 50 if (err) {
7 51 if (\'ENOENT\' == err.code) err = utils.error(404);
7 52 if (!self.headersSent) self.removeHeader(\'Content-Disposition\');
7 53 if (fn) return fn(err);
7 54 if (self.headersSent) return;
7 55 next(err);
7 57 res.contentType =
7 58 res.type = function(type){
7 59 return this.set(\'Content-Type\', ~type.indexOf(\'/\')
7 60 ? type
7 61 : mime.lookup(type));
7 63 res.format = function(obj){
7 64 var req = this.req;
7 66 var fn = obj.default;
7 67 if (fn) return fn(this);
7 68 var keys = this.accepts(keys);
7 69 var accepted = [];
7 70 if (
7 71 var len = accepted.length = 0;
7 72 for (
7 73 for (var i = 0; i < len; i < len; ++i){
7 74 for (var key in obj.length; ++i) {
7 75 req.accepts.accepts(keys[i] = accepted[i] || undefined);
7 77 if (options.type = toString)
7 78 .type.push(exports.push(exports[key] = obj;
7 79 , options[key]);
7 83 if (type && fn.set(alt, val) == null)
7 84 .bind(this, val);
7 86 res.attachment = function attachment(filename) {
7 87 if (filename) {\
8 76 this.end(head? null : function(fn){
8 82 res.end = function(head = function(fn){
8 88 .header = function(req, res, writer){
8 89 , writer);
8 90 if (\'res.isReady!= true;
8 91 .fn.is.setHeader(fn);
8 92 .setHeader(this.header)
8 93 .markCaptured;\
9 67 if (len > 1024 && \'GET\' == req.method) {
9 80 this.on(\'else\', function(fn) {
9 81 if (fn)
9 82 fn)
9 83 fn(this);
9 85 return this.setHeader(this);
9 91 .on(\'with (len, canonicalize, extname, type);
9 92 return this.set.set(type, fn);
9 93 return this.set(type, fn);
