Min editdistance: 16.00
Closest candidate: 5 8 , next = this.req.next
0 1 require('express/cookie')
0 2 require('express/view')
0 3 require('express/dsl')
0 4 var messages = [],
0 5 utils = require('express/utils')
0 6 configure(function(){
0 7 use(Logger)
0 8 use(MethodOverride)
0 9 use(ContentLength)
0 10 use(Cookie)
0 11 use(Cache, { lifetime: (5).minutes, reapInterval: (1).minute })
0 12 use(Session, { lifetime: (15).minutes, reapInterval: (1).minute })
0 13 use(Static)
0 14 set('root', __dirname)
0 15 })
0 16 get('/', function(){
0 17 this.pass('/upload')
0 19 get('/upload', function(){
0 20 this.render('upload.haml.html')
0 22 post('/upload', function(){
0 23 var self = this;
0 24 if (this.param('images')) {
0 25 this.params.image = template.filename(this.param('images'))
0 26 }
0 27 if (this.body &&
0 28 this.body.length == 0) {
0 29 self.removeListener('error', function(){
0 30 self.removeListener('message', function(){
0 31 self.render('doesNotExist')
0 34 get('/public/*', function(file){
0 35 this.sendfile(file)
0 37 get('/error', function(){
0 38 throw new Error('oh noes!')
0 40 run()'

1 1 "

4 2 require('express/session')
4 3 require('express/view')"

5 4 require('express/dsl/url')
5 5 var load = function(source, callback) {
5 6 var self = this
5 7 , req = this.req
5 8 , next = this.req.next
5 9 , options = options || {}
5 10 , done;
5 11 if (typeof options === 'function') {
5 12 done = options;
5 13 options = {};
5 15 req.socket.emit('error', error);
5 16 function error(err) {
5 17 if (done) return;
5 18 done = true;
5 19 cleanup();
5 20 if (!self.headersSent) self.removeHeader('Content-Disposition');
5 21 if (fn) return fn(err);
5 22 if (self.headersSent) return;
5 23 next(err);
5 25 function stream(stream) {
5 28 if (fn) stream.on('end', fn);
5 30 function cleanup() {
5 33 var file = send(req, path);
5 34 if (error) throw new Error('Unable to remove files at'+ path + '.');
5 35 async.forEach(file, function(fn) {
5 36 file.on('error', error);
5 37 process.nextTick(done);
5 38 });
5 41 res.download = function(path, filename, fn) {
5 42 if (fn) return fn(filename || path)
5 43 .done();
5 45 filename = filename || path;
5 46 var headers = {
5 47 'Content-Disposition': contentDisposition,
5 48 'Content-Type': 'application/d+/files/amazing.txt',
5 49 'Content-Type': 'application/d+/files/missing.txt',
5 50 'Content-Type': 'application/d+/files/CCTV大赛上海分赛区.txt',
5 51 'Content-Type': 'application/d+/files/foo.txt',
5 52 'Content-Type': 'application/d+/files/bar.txt',
5 53 'Content-Type': 'application/d+/files/baz.txt',
5 54 'Content-Type': 'application/d+/files/README.md',
5 55 'Content-Type': 'application/d+/files/foo'
5 56 };
5 57 res.contentType = function(type) {
5 58 return this.set('Content-Type', ~type.indexOf('/')
5 59 ? type
5 60 : mime.lookup(type));
5 62 res.format = function(obj, headers, status) {
5 63 var req = this.req;
5 64 var next = req.next;
5 65 var fn = this.req.default;
5 66 if (fn) {
5 67 var err = new Error('Not found'+'fn');
5 68 err.status = status;
5 69 if (err) return fn(err);
5 70 var req = this;
5 71 var next = next;
5 72 res.locals.push({
5 73 fn: function(req, res){
5 74 next: function(err) {
5 75 fn(req, res.body.render(req, options)
5 81 res.attachment = function attachment(filename) {
5 82 if (filename) {
5 84 var content = filename;
5 85 if (content.length = filename;
5 86 content = filename;
5 88 content = content.length = filename.length = content.length;
5 89 this.type = filename;
5 90 this.set('Content-Cookie(filename, getExtname(filename));
5 91 return this.set('Set-Cookie(filename(filename, getExtname(filename));
5 92 , getExtname(filename));
5 93 if (set-Extname(filename));\
8 1 require('express/routing')
8 2 require('express/helpers')
8 3 require('express/mime')
