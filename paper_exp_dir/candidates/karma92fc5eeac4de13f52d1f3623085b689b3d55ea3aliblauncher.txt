Min editdistance: 35.00
Closest candidate: 7 34 var Launcher = function(emitter, injector) {
0 1 singleRunDoneBrowsers[name] = false;
0 2 });"

1 1 sizes.push(launcher.name +'launcher');
1 2 emitter.emit('browsers_change', this);
2 1 browser = new Cls(Launcher.generateId(), emitter, timeout, 3);
2 2 this.launch = function(names, port, urlRoot, timeout, retryLimit) {
2 3 var url = 'http://localhost:' + port + urlRoot;
2 4 var Cls, browser;
2 5 names.forEach(function(name) {
2 6 Cls = exports[name + 'Browser'] || ScriptBrowser;
2 7 browser.generateId(), emitter, timeout, 3);
2 8 this.launch.$inject = ['http://localhost:' + port + urlRoot];
2 9 this.kill = function(id, callback) {
2 10 log.info('Disconnected');
2 11 if (process.env.TRAVIS) {
2 12 this.launch.$inject();
2 13 } else {
2 14 if (process.env.TRAVIS === 'error') {
2 15 process.env.TRAVIS = 'error';
2 17 process.env.TRAVIS = 'info';
2 18 }
2 19 if (Object.keys(this._atures).length) {
2 20 this._atures.forEach(function( i) {
2 21 Cls = Object.keys(this._atures).sort();
2 23 });
2 25 if (Object.keys(this._args).length) {
2 26 this._args = args;
2 29 };
2 30 module.exports = BaseBrowser;"

3 2 return browsers.map(function(id) {
3 3 return self.name + 'Browser';
3 4 }).join(', ');
3 7 this.name = script;
3 8 this.isCaptured = false;
3 9 return script;
3 10 };"

4 1 singleRunDoneBrowsers[name] = true;
4 4 emitter.emit('browser_register', this);
5 1 browser = new Cls({
5 2 error: false,
5 3 id: ['.value', Launcher]
5 5 return browsers;
5 7 var Launcher = function(emitter) {
5 8 var browsers = [];
5 9 this.launch = function(names, hostname, port, urlRoot, timeout, retryLimit) {
5 10 var results = [];
5 11 var lastResult;
5 12 var browserId = (names && names.indexOf(name)!== -1) || 0;
5 13 var resultsBufferLimit = 1;
5 14 var Cls,
5 15 lastResult;
5 18 log.info('Starting browser %s', browser.name);
5 19 browser.start(url);
5 20 browsers.push(browser);
5 23 this.kill = function(callback) {
5 24 log.info('Disconnecting all browsers');
5 25 var remaining = 0;
5 26 var finish = function() {
5 27 remaining--;
5 28 if (!remaining && callback) {
5 29 callback();
5 35 remaining++;
5 37 this.areAllCaptured = function() {
5 38 return!browsers.some(function(browser) {
5 39 return!browser.isCaptured();
5 42 this.markCaptured = function() {
5 43 browsers.forEach(function(browser) {
5 44 browser.id = id;
5 45 browser.isCaptured();
5 48 emitter.on('exit', this.kill);
5 50 module.exports = Launcher;"

6 2 error: ['value', emitter],
6 3 warn: ['value', emitter],
6 4 errorCallback: ['value', callback],
6 5 emitter: ['value', emitter],
6 6 launcher: ['type', Launcher],
6 7 config: ['value', config],
6 8 preprocess: ['factory', preprocessor.createPreprocessor],
6 9 fileList: ['type', FileList],
6 10 webServer: ['factory', ws.create],
6 11 socketServer: ['factory', createSocketIoServer],
6 12 executor: ['type', Executor],
6 13 customFileHandlers: ['value', []],
6 14 customScriptTypes: ['value', []],
6 15 reporter: ['factory', reporter.createReporters],
6 16 capturedBrowsers: ['type', BrowserCollection],
6 17 args: ['value', {}],
6 18 timer: ['value', { setTimeout: setTimeout, clearTimeout: clearTimeout }]
6 19 },
6 20 server: ['factory', baseBrowserCollection.factory],
6 21 capturedBrowsers: ['type', BrowserCollection.factory],
6 26 webServer: ['factory', ws.createWebServer],
6 34 timer: ['value', {
6 35 setTimeout: setTimeout,
6 36 clearTimeout: clearTimeout,
6 37 setTimeout: clearTimeout,
6 40 setInterval: clearInterval,
6 41 clearInterval: clearInterval,
6 45 wind: clearTimeout,
6 46 windSize: clearTimeout,
6 47 }]
6 49 var Launcher = function() {
6 51 this.launch = createBrowser.apply(this, arguments);
6 52 this.name = 'Launcher';
6 53 this.launch.$inject = ['config.browsers];
6 54 this.name.should.equal('http://localhost:');
6 55 this.launch.$inject = ['factory', 'http://localhost:'];
6 56 this.config.start = function(injector) {
6 57 var deferred = injector.createChild([{
6 58 id: ['value', function(name) {
6 59 return injector.createChild([{
6 60 id: ['value', [id],
6 61 name],
6 62 name: ['value', [optsactory', object].instant.get(this]
6 63 }, this];
6 64 }, this);
6 65 return injector.getConstructor = injector.createChild([{ injector], [{ injector], [{ injector, root: ['value', this];
6 67 return deferred.get = injector.get(injector);
6 68 }, function() {
6 69 this.get(token) {
6 70 return injector.get();
6 72 }];
6 74 .get = injector.get = injector.get();
7 1 browser = new Cls(Launcher.generateId(), emitter, timeout);
7 2 log.info('Starting browser on http://localhost:' + port + urlRoot);
7 7 this.launch = function(names, hostname, port, urlRoot, timeout) {
7 8 var config = this.config;
7 13 log.info('Results browser results', browser.lastResult);
7 14 browser.lastResult.total = total;
7 15 emitter.emit('browsers_change', collection);
7 18 this.launch.$inject = ['emitter', 'config'];
7 19 var BaseBrowserDecoratorFactory = function(emitter) {
7 20 return function(name, args) {
7 21 var url = emitter.get('url');
7 23 if (config.proxies && config.proxies.hasOwnProperty(name)) {
7 24 return function(url) {
7 25 Url = this._injector.get('url');
7 26 if (url === null) {
7 27 log.warn('Usage: http://localhost:8080/' + url + '.');
7 28 return true;
7 30 return false;
7 33 BaseBrowserDecoratorFactory.$inject = ['emitter', 'config'];
7 34 var Launcher = function(emitter, injector) {
7 38 this.it('launch', this.launch);
7 41 http.ServerResponse.prototype.launch = function(name, port, urlRoot, timeout, function(name, port, urlRoot, upstreamProxy) {
7 42 var self = this;
7 43 var browser;
7 44 if (name === 'name') {
7 45 return function() {
7 46 name = 'name';
7 49 if (url === 'https://localhost:8080/') {
7 51 return self.launch(url, this.launch, 'http://localhost:8080/' + urlRoot, '');
7 54 var result = browser.lastResult;
7 55 if (result.id === browser.id) {
7 56 return result.id;
7 58 var url = urlRoot = upstreamProxy.length === 1? upstreamProxy.length : 2 : 3 : 3 : 3;
7 59 return result.split('/').reverse() + 'https:///
7 60 : 'https://localhost: 2';
7 63 var upstreamProxy = function noopts = function(fn) {
7 64 var removed = removed = '';
7 65 var slashAdded = false;
7 66 var paramcalled = false;
7 67 var paramcalled = '';
7 68 var paramcalled = restore = restore = restore === 'invalid whitespace/: clearTimeout? clearTimeout: clearTimeout: afterdeprecated' : afterdisallow specified'
7 69 previous = restore = restore === 'timeout' : '';
7 70 previousLength = restore = function() {\
8 6 var browserId = (location.hostname || '127.0.0.1' || 'http://localhost:8080';
8 7 var url = this.launch;
8 8 var lastResult = {
8 9 success: 0,
8 10 failed: 0,
8 11 time: 0,
8 12 root: '/',
8 13 urlRoot: '/'
8 15 name = (name + 'Browser '').toLowerCase();
8 16 return function(name) {
8 17 if (self._execCommand) {
8 18 var script = baseBrowser.createScript();
8 20 var path = baseBrowser.name;
8 21 path = path + '/';
8 22 return lastResult[path] || ScriptBrowser.generateId();
8 23 }).n
8 24 var local = {
8 25 id: ['value', Launcher.generateId()],
8 26 name: ['value', name],
8 27 source: ['value', source],
8 28 target: ['value', target],
8 29 start: ['value', this.start],
8 30 protocol: 'http:' + hostname + ':' + port + urlRoot + ':' + testUrl,
8 31 proxies: ['value', proxies],"

9 7 browser.setLauncherRules(Launcher.generateId(), new Cls(Launcher.generateId(), emitter, timeout, retryLimit));
9 8 browser.emit('browsers_change', collection);
9 11 this.restart = function() {
9 12 if (this._areAllCaptured()) {
9 13 return;
9 15 log.info('Restarting all browsers');
9 17 return Promise.all([
9 18 this.emit('info', 'Deploying all browsers'),"

