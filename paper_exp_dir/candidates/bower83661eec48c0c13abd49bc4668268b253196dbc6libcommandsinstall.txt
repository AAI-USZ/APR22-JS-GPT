Min editdistance: 42.00
Closest candidate: 0 11 var install = cb.manager.install(opts, options);
0 1 












var Emitter = require('events').EventEmitter;
var async   = require('async');
var nopt    = require('nopt');

var Manager = require('../core/manager');
var save    = require('../util/save');
var list    = require('./list');
var help    = require('./help');

var optionTypes = { help: Boolean, force: Boolean };
var shorthand   = { 'h': ['--help'], 'S': ['--save'], 'f': ['--force'] };

module.exports = function (paths, options) {
var emitter = new Emitter;

if (options && options.save) save(emitter, manager, paths);

manager
.on('data'  , emitter.emit.bind(emitter, 'data'))
.on('error' , emitter.emit.bind(emitter, 'error'))
.on('resolve', emitter.emit.bind(emitter, 'end'))
.resolve();

return emitter;
};

module.exports.line = function (argv) {
var options  = nopt(optionTypes, shorthand, argv);
var paths    = options.argv.remain.slice(1);

if (options.help) return help('install');
return module.exports(paths, options);
};
0 2 module.exports.completion = function (opts, cb) {
0 3 var cache = path.join(completion, "install.json");
0 4 return function (name) {
0 5 var uri = options.argv.remain.slice(1),
0 6 name = options.argv.remain.join(\', \');
0 7 if (uri && cache[name]) return cache[name];
0 8 return function (err, results) {
0 9 if (err) return emitter.emit('error', err);
0 10 if (results.length) return result.deep_equal(results[0].last);
0 11 var install = cb.manager.install(opts, options);
0 12 install.json = saved();
0 13 install.save();
0 14 };
0 15 };'

1 3 var cache = path.join(__dirname, \'opts/completion\');
1 5 var uri = options.uri.replace(/https?:\\/\\
1 6 return cache[name]) ||
1 7 options.uri.substr(0, 1);
2 3 var cache = path.join(pb.config.completion, "install");
2 4 var done = function done(err, results) {
2 5 if (err) return cb(err);
2 6 var names = results.map(function (pkg) {
2 7 return pb.name!== names[0];
2 8 });
2 9 return cb(null, names);
2 11 function noop () {
2 12 return Promise.resolve(done);
2 13 }
2 14 function clearRuntimeCache() {
2 15 var Package = function (name) {
2 16 var repository = new Package(\'name\'),
2 17 home = new Package.home();
2 18 return readPkg(config.directory + \'/' + name, function (err, json) {
2 20 if (files) {
2 21 if (\'bower.json\' === json) {
2 22 return done();
2 23 } else {
2 24 promise.done();
2 26 return promise.error(createError(\'Package\'+ name + '\\' is not installed\', \'ENOTFOUND\'));
2 33 var names = options || {};
2 34 var cb = after(opts[opts.length - 1];
2 35 return function (paths, options) {
2 39 module.exports.completion_default = options.op;
2 40 module.exports.completion_cb = cb;
2 41 module.exports.completion_d = cb;
2 42 module.completion_error   = error;"

3 2 module.exports.completion = install.completion;"

4 1 












var Emitter = require('events').EventEmitter;
var async   = require('async');
var nopt    = require('nopt');

var Manager = require('../core/manager');
var save    = require('../util/save');
var list    = require('./list');
var help    = require('./help');

var optionTypes = { help: Boolean, force: Boolean };
var shorthand   = { 'h': ['--help'], 'S': ['--save'], 'f': ['--force'] };

module.exports = function (paths, options) {
var emitter = new Emitter;

if (options && options.save) save(emitter, manager, paths);

manager
.on('data'  , emitter.emit.bind(emitter, 'data'))
.on('error' , emitter.emit.bind(emitter, 'error'))
.on('resolve', emitter.emit.bind(emitter, 'end'))
.resolve();

return emitter;
};

module.exports.line = function (argv) {
var options  = nopt(optionTypes, shorthand, argv);
var paths    = options.argv.remain.slice(1);

if (options.help) return help('install');
return module.exports(paths, options);
};'

5 3 var cache = path.join(completion, cb);
5 5 if (options && options.save) save(save, cb);
