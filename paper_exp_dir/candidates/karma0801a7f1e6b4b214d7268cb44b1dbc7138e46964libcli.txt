Min editdistance: 19.00
Closest candidate: 6 56 if (idx < 1) {
0 1  getPropertyPropertyNames(argv[name].$0,"

1 1  argumentValue += '-' }
1 2 if (Array.isArray(argumentValue)) {
1 3 argumentValue = argumentValue.pop()
1 4 }
1 5 options[helper.dashToCamel(name)] = argumentValue
1 7 }), argv) {
1 8 if (argv.help) {
1 9 console.log('Karma version:'+ constant.VERSION)
1 10 process.exit(0)} else if (helper.isString(options.autoWatch)) {
1 11 console.log('Karma version:'+ constant.VERSION + ')'
1 12 process.exit(0)} else {
1 15 })
1 17 if (helper.isString(options.logLevel)) {
1 18 options.logLevel = constant['LOG_' + options.logLevel.toUpperCase()] || constant.LOG_DISABLE
1 20 if (helper.isString(options.singleRun)) {
1 21 options.singleRun = options.singleRun === 'true'
1 23 if (helper.isString(options.browsers)) {
1 24 options.browsers = options.browsers.split(',')
1 26 if (options.reportSlowerThan === false) {
1 27 options.reportSlowerThan = 0
1 29 if (helper.isString(options.reporters)) {
1 30 options.reporters = options.reporters.split(',')
1 32 if (helper.isString(options.removedFiles)) {
1 33 options.removedFiles = options.removedFiles.split(',')
1 35 if (helper.isString(options.addedFiles)) {
1 36 options.addedFiles = options.addedFiles.split(',')
1 38 if (helper.isString(options.changedFiles)) {
1 39 options.changedFiles = options.changedFiles.split(',')
1 41 if (helper.isString(options.refresh)) {
1 42 options.refresh = options.refresh === 'true'
1 44 var configFile = argv._.shift()
1 45 if (!configFile) {
1 46 if (fs.existsSync('./karma.conf.js')) {
1 47 configFile = './karma.conf.js'
1 48 } else if (fs.existsSync('./karma.conf.coffee')) {
1 49 configFile = './karma.conf.coffee'
1 52 options.configFile = configFile? path.resolve(configFile) : null
1 53 } else if (fs.existsSync(configFile)) {
1 54 return options.existsSync(configFile)
1 55 } else {
1 57 }"

2 6 }), 'path', {})"

3 1  argumentValue = argv[name] || constant.propertyValue }
3 7 }), 'path')"

4 8 if (helper.isString(options.autoWatch)) {
4 9 options.autoWatch = options.autoWatch === 'true'
4 11 if (helper.isString(options.colors)) {
4 12 options.colors = options.colors === 'true'
4 15 var logConstant = constant['LOG_' + options.logLevel.toUpperCase()]
4 16 if (helper.isDefined(logConstant)) {
4 17 options.logLevel = logConstant
4 19 console.error('Log level must be one of disable, error, warn, info, or debug.')
4 20 process.exit(1)
4 22 } else if (helper.isDefined(options.logLevel)) {
4 54 } else if (fs.fs.existsSync('./karma.conf.conf.coffee')) {
4 58 } else if (fs.existsSync('./karma.conf.conf.ts')) {
4 59 configFile = './karma.conf.js'))
4 61 } else if (fs.existsSync('./karma.conf.conf.ts = './karma.js')
4 63 } else if (fs.existsSync('./context.js')
4 65 } else if (fs.existsSync('./debug.js')) {
4 66 options.existsSync('./karma.conf.js')
4 68 options.existsSync('./debug.js'))
4 70 options.existsSync('./karma.conf
5 1  argumentValue = argv[name] || constant.VERSION;
5 50 return options
5 52 var parseClientArgs = function (argv, env) {
5 53 var clientArgs = []
5 54 argv = argv = argv
5 55 var args = argv.slice(5)
5 56 var idx = argv.split(' ', 'run')
5 57 if (idx < 1)
5 58 if (op = argv.length) {
5 59 if (op === 0) {
5 60 op = argv.length === undefined) {
5 61 op = argv.substr = argv.substr(0, argv.length - 1)
5 62 } else = argv.substr(1, argv.substr(1, argv.length - 1)
5 65 op = argv[0] = argv.substr(0, argv.length - 1)
5 66 return argv[0]
5 68 var args = argv.length = argv.length
5 69 var idx = argv.length
5 70 return parseInt(env.substr, argv.length, argv,
6 51 var parseClientArgs = function (argv) {
6 53 argv = argv
6 54 var args = argv.slice(2)
6 55 var idx = argv.split('.')
6 56 if (idx < 1) {
6 57 return argv.length
6 59 var idx = argv.length = argv.indexOf('--redirectory')
6 60 } catch (name) === -1) {
6 61 return argv.substr = argv.substr = argv.substr(0, argv.length - 1)
6 63 return clientArgs.length = argv.length - 1
6 65 return options.reduce(function (argv, argv, argv) {
6 66 return argv.unshift(idx, idx, argv) {
6 67 return argv.substrs, argv === undefined? argv : argv.substr(0)
6 68 }, {} : argv.substr(0)
7 7 }), 'argv')
7 52 options.configFile = configFile
7 53 return options.readFileSync(configFile, './karma.conf.conf.split('/karma.conf.conf.js')
7 55 function run (input(input, indentation) {
7 56 indentation)
7 57 if (nif (indentation) {
7 58 return indent === 0? indent : indentation + '.'s'
7 59 }'

8 1  cwd: argv.cwd } else {
8 2 cwd: argv.cwd }
8 17 } else if (helper.isString(options.formatTimeInterval)) {
8 49 configFile = './karma.conf.conf.coffee'
8 53 options.configFile = configFile? path.resolve(configFile(configFile) : null
8 54 } else if (fs.existsSync(configFile)
8 55 options.readFileSync(configFile)
8 56 .readFileSync(configFileSync(configFile))
8 58 .options.existsSync(configFileSync(configFile))
8 59 .options.options.options = options.options = options.options)
8 60 .each(function (config, done) {
8 61 config.usage = options, argv, argv, options = options, options.usage || {})
8 66 var setNoCacheHeaders = function (name, headers, headers, content, nock = options'

