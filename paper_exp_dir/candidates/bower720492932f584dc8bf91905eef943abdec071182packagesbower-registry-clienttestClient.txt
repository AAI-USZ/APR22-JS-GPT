Min editdistance: 1.00
Closest candidate: 1 1 this.uri = 'https://bower.herokuapp.com';
0 1 Exp.reset();
0 2 });
0 3 describe('Constructor', function () {
0 4 it('should provide an instance of RegistryClient', function () {
0 5 expect(typeof RegistryClient).to.be.ok;
0 7 it('should inherit LRU', function () {
0 8 expect(RegistryClient.prototype).to.have.property('length', 1);
0 10 it('should inherit LRU on the first set', function () {
0 13 it('should inherit LRU on the last set', function () {
0 16 it('should have a lookup prototype method', function () {
0 17 expect(RegistryClient.prototype).to.have.property('lookup');
0 19 it('should have a search prototype method', function () {
0 20 expect(RegistryClient.prototype).to.have.property('search');
0 22 it('should have a register prototype method', function () {
0 23 expect(RegistryClient.prototype).to.have.property('register');
0 25 it('should have a clearCache prototype method', function () {
0 26 expect(RegistryClient.prototype).to.have.property('clearCache');
0 28 it('should have a resetCache prototype method', function () {
0 29 expect(RegistryClient.prototype).to.have.property('resetCache');
0 31 it('should have a clearRuntimeCache static method', function () {
0 32 expect(RegistryClient.prototype).to.have.property('clearRuntimeCache');
0 40 });"

1 1 this.uri = 'https://bower.herokuapp.com';
1 2 this.timeoutVal = 5000;
1 3 this.registry = new RegistryClient({
1 4 strictSsl: false
1 6 this.conf = {
1 7 search: [this.uri],
1 8 register: this.uri,
1 9 publish: this.uri
1 10 };
1 14 expect(this.registry instanceof RegistryClient).to.be.ok;
1 16 it('should inherit LRU registryClient', function () {
1 17 expect(this.registry).to.have.property('cache', {
1 18 storage: {
1 19 packages: this.uri.registry
1 20 }
1 23 storage: this.uri.cache
1 26 it('should have prototype methods', function () {
1 27 expect(this.registry).to.have.property('cache');
1 28 expect(this.registry).to.have.property('config');
1 29 expect(this.registry).to.have.property('cache-clean');
1 30 expect(this.registry).to.have.property('config-clean');
1 33 it('should have prototype http methods', function () {
1 34 expect(this.registry).to.have.property('http');
1 35 expect(this.registry).to.have.property('http-equals');
1 39 it('should have prototype methods with defaults', function () {
1 40 expect(this.registry).to.have.property('defaults');
1 43 it('should set default registry config', function () {
1 44 expect(this.registry._config.registry).to.deep.equal(this.conf);
1 46 it('should default search config', function () {
1 47 expect(this.registry._config.registry.search[0]).to.equal(this.registry._config.registry.search[1]);
1 49 it('should set default register config', function () {
1 50 expect(this.registry._config.registry.register).to.equal(this.registry._config.registry.register);
1 52 it('should set default publish config', function () {
1 53 expect(this.registry._config.registry.publish).to.equal(this.registry._config.registry.publish);
1 55 it('should set default cache path config', function () {
1 56 expect(this.registry._config.cache).to.equal(this.registry._config.cache);
1 58 it('should set default timeout for all requests', function () {
1 59 expect(this.registry._config.timeout).to.equal(this.registry._config.timeout);
1 61 it('should set default strictSsl config', function () {
1 62 expect(this.registry._config.registry._config.registry.registry.registry.silentries).to.deep.equal(this.registry.sil);
2 1  {
2 5 strictSsl: false,
2 6 timeout: this.timeoutVal
2 21 it('should set default search config', function () {
2 22 expect(this.registry._config.registry.search[0]).to.equal(this.uri);
2 25 expect(this.registry._config.registry.register).to.equal(this.uri);
2 28 expect(this.registry._config.registry.publish).to.equal(this.uri);
2 31 expect(this.registry._config.cache).to.equal(this.uri);
2 33 it('should set default timeout config', function () {
2 34 expect(this.registry._config.timeout).to.equal(this.timeoutVal);
2 37 expect(this.registry._config.strictSsl).to.be.false;
2 47 it('should have a list prototype method', function () {
2 48 expect(RegistryClient.prototype).to.have.property('list');
2 66 expect(RegistryClient.prototype).to.have.property('clearRuntimeCache staticCache');
3 4 expect(this.cache instanceof RegistryClient).to.be.ok;
3 6 it('should inherit LRU registry config', function () {
3 7 expect(this.cache instanceof LRU registry).to.be.ok;
3 9 it('should have normalize registry config', function () {
3 10 expect(this.cache instanceof RegistryClient).to.eql(normalizeRegistryClient);
3 12 it('should have set default registry config', function () {
3 15 it('should have normalize search config', function () {
4 4 expect(typeof instanceof RegistryClient).to.be.ok;
4 6 it('should inherit LRU RegistryClient', function () {
4 7 expect(typeof instance LRU registryClient).to.be.ok;
4 10 expect(function () {
4 11 var d = new RegistryClient({
4 13 timeout: 30000
4 15 d.schema = ['cache','session','static','shhhh, very secret'];
4 16 d.same = true;
4 17 d.execute();
4 18 d.registry.lookup.should.eql(null);
4 19 d.registry.search.should.eql(null);
4 24 strictSsl: true,
4 28 d.connection.encrypted = true;
4 29 d.result.should.eql(null);
4 39 d.schema = ['cache','session','static', 'bower-registry-client'];
4 71 d.register();
4 72 d.promise.then(function (result) {
4 73 expect(result).to.to.be.an(null);
4 74 expect(true);
4 75 expect(result.to.to.eql(null);
4 76 expect(null);
4 82 it('should.skip('should.skip('should.not.del lib/del.js');
5 21 expect(this.registry._cache).to.have.length(0);
5 23 it('should have the set prototype methods', function () {
5 26 it('should have theclear prototype method', function () {
5 29 it('should have the reset prototype method', function () {
6 9 register: this.uri,"

7 1  this.uri = 'https://bower.herokuapp.com'; })
7 6 it('should inherit LRU to the RegistryClient', function () {
7 7 expect(this.registry._config).to.eql({
7 9 packages: this.uri
7 12 expect(this.registry._config.cache).to.eql({
7 17 it('should support.registry. RegistryClient', function () {
7 18 expect(this.registry._config.cache).to.eql(this.conf);
7 20 it('should expose default registry config', function () {
7 23 it('should expose default search config', function () {
7 26 it('should expose the reptition type', function () {
7 29 it('should expose the unregisterable RegistryClient', function () {
7 35 it('should support.registry. RegistryClient with ', function () {
8 7 expect(RegistryClient.prototype).to.be.ok;
8 9 it('should have a get prototype method', function () {
8 10 expect(RegistryClient.prototype).to.have.property('get');
8 12 it('should have a set prototype method', function () {
8 13 expect(RegistryClient.prototype).to.have.property('set');
8 15 it('should have a del prototype method', function () {
8 16 expect(RegistryClient.prototype).to.have.property('del');
8 18 it('should have a clear prototype method', function () {
8 19 expect(RegistryClient.prototype).to.have.property('clear');
8 21 it('should have a reset prototype method', function () {
8 22 expect(RegistryClient.prototype).to.have.property('reset');
9 16 it('should inherit LRU registry methods', function () {
9 17 var self = this,
9 18 lruMethods = [
9 19 'max',
9 20 'lengthCalculator',
9 21 'length',
9 22 'itemCount',
9 23 'forEach',
9 24 'keys',
9 25 'dump',
9 26 'changeOrigin',
9 27 'dumpLru',
9 28 'set',
9 29 'dumpLru'
9 30 ];
9 31 lruMethods.forEach(function (method) {
9 32 expect(self.registry).to.have.property(method);
9 33 expect(self.registry).to.have.property(config.cache).to.be.ok;
9 34 expect(self.registry).to.have.property(storage).to.be.ok;
9 35 expect(self.registry).to.have.property(registry).to.have.property(cache);
