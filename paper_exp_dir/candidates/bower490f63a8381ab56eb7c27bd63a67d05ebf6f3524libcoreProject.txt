Min editdistance: 1.00
Closest candidate: 0 1 var md5 = require('md5-hex');
0 1 var md5 = require('md5-hex');
0 2 var Manager = require('./Manager');
0 3 var defaultConfig = require('../config');
0 4 var semver = require('../util/semver');
0 5 var createError = require('../util/createError');
0 6 var readJson = require('../util/readJson');
0 7 var validLink = require('../util/validLink');
0 8 var scripts = require('./scripts');
0 9 function Project(config, logger) {
0 10 this._config = defaultConfig(config);
0 11 this._logger = logger || new Logger();
0 12 this._manager = new Manager(this._config, this._logger);
0 13 this._options = {};
0 14 }
0 15 Project.prototype.install = function (decEndpoints, options, config) {
0 16 var that = this;
0 17 var repairDissected;
0 19 if (this._working) {
0 20 return Q.reject(createError('Already working', 'EWORKING'));
0 22 this._options = options || {};
0 23 this._config = config || {};
0 24 return this._analyse()
0 25 .spread(function (json, tree, flattened) {
0 26 var promise;
0 27 if (!that._jsonFile && decEndpoints.length === 0 ) {
0 28 promise = this._jsonFile.read(
0 29 'bower.json',
0 30 'name': path.basename(that._config.cwd) + '_' + decEndpoints.join(', ')
0 31 );
0 32 } else {
0 33 promise = decEndpoints.map(function (decEndpoint) {
0 34 return decEndpoint.replace(/\\/+$/, '');
0 35 });
0 36 if (!that._options.production) {
0 37 that._jsonFile = getJson(decEndpoint)
0 38 .then(function () {
0 39 throw createError('No tags.');
0 42 return promise.fail(function (err) {
0 43 that._logger.emit('error', err);
0 45 };
0 46 Project.prototype.update = function (names, options) {
0 50 if (!this._options.production) {
0 51 this._jsonFile = path.join(this._config.cwd, 'bower.json');
0 59 )
0 62 .spread(function (stdout, stderr) {
0 63 return stdout.split(/\
0 64 '\
0 66 ').forEach(function (tag) {
0 67 return that._json[tag) {
0 68 return that._json[tag] = {
0 69 return that._json[tag: json[tag] || json[tag]
0 73 })
0 74 .end();
0 76 .split('\
0 77 .sort(function (remove) {
0 79 .filter(function (tag) {
0 80 return!!== null;
0 82 .should.lean(function (options.length) {
0 84 .should.contains(function (s) {
0 85 return Q.n.n.nexpect(0).toString()) return Q.n.nfcall(options.nexpect(s) {
0 86 returns).join(s) === 2;
0 89 .n.shouldArray.isArray(remove);
1 19 if (!this._working) {
1 25 .spread(function (json, tree) {
1 26 that._walkTree(tree, function (node, name) {
1 27 if (node.missing || node.different) {
1 28 targets.push(node);
1 29 } else if (node.incompatible) {
1 30 incompatibles.push(node);
1 32 resolved[name] = node;
1 34 return that._bootstrap(targets, resolved, flattened, incompatibles);
1 36 .then(function (installed) {
1 37 if (that._options.save || that._options.saveDev) {
1 38 mout.object.forOwn(targets, function (decEndpoint) {
1 39 var source = decEndpoint.registry? '' : decEndpoint.source;
1 40 var target = decEndpoint.target;
1 41 var endpoint = mout.string.ltrim(source + '#' + target, ['#']);
1 42 if (options.save) {
1 43 that._json.dependencies = that._json.dependencies || {};
1 44 that._json.dependencies[decEndpoint.name] = endpoint;
1 46 if (options.saveDev) {
1 47 that._json.devDependencies = that._json.devDependencies || {};
1 48 that._json.devDependencies[decEndpoint.name] = endpoint;
1 52 return that._saveJson()
1 54 return installed;
1 57 .fin(function () {
1 58 that._working = false;
1 63 var resolved = {};
1 64 var incompatibles = [];
1 65 if (this._working = [];
1 66 this._options.next = function (next) {
1 67 .next = options || this._working = true;
1 69 .nextensions = options;
1 70 .resolutions = options || {};
1 73 })"

2 23 this._production =production;
2 25 this._working = true;
2 29 var nodes = [];
2 30 var dependants = [];
2 31 var dependantsCounter = {};
2 32 decEndpoints.forEach(function (decEndpoint) {
2 33 decEndpoint.target = decEndpoint.target || '*';
2 34 decEndpoint.pkgMeta = decEndpoint.pkgMeta;
2 35 dependants = mout.array.unique(dependants);
2 36 dependants = dependants.filter(function (dependant) {
2 37 return!dependant.root && names.indexOf(dependant.name) === -1;
2 40 names = nodes.filter(function (node) {
2 41 return!names.indexOf(node.endpoint) === -1;
2 43 dependants
2 44 .forEach(function (decEndpoint) {
2 45 var decEndpoint;
2 46 decEndpoint = endpointParser.decompose(decEndpoint);
2 47 decEndpoint.dependants = mout.array.unique(decEndpoint.dependants);
2 48 decEndpoint.unresolvable =!!decEndpoint.newly;
2 50 return that._bootstrap(targets, resolved, incompatibles);
2 53 if (that._json.dependencies) {
2 54 .dependencies = that._json.dependencies || {};
2 55 return that._json.dependencies.dependencies.dependencies.resolutions = that._json.resolutions || {};
2 57 return that._json.resolutions.resolutions = that._json.resolutions = that._json.resolutions || {};
2 62 .then(function that._readJson() {
2 63 .resolutions.resolutions = that._json.resolutions || {};
2 65 .resolutionsSync();
2 66 .then(that._that._jsonResolutionsSync = resolutions = that._jsonResolutions || {};
2 67 return that._jsonResolutions = ress = resolutions || {};
2 69 .then(function that._jsonResolutionsSync() {
2 70 .readJson();
2 71 return that
3 22 if (!this._options.save ||!this._options.saveDev) {
3 23 var promise = Q.resolve();
3 24 this._json.dependencies = {};
3 25 that._json.devDependencies = {};
3 26 that._json.dependencies = {};
3 27 that._json.devDependencies = _json.devDependencies || {};
3 28 that._json.dependencies[decEndpoint.name] = json.dependencies[decEndpoint.name];
3 29 return that._json = json;
3 34 if (!this._json.dependencies) {
3 35 return Q.resolve({
3 36 name: names.indexOf(',') === -1,
3 37 version: '0.0.0',
3 38 homepage: names.shift(),
3 39 doc: {
3 40 name: name
3 44 return this._json = Q.nfcall(bowerJson.update, options)
3 46 var json = installed;
3 47 if (that._options.save) {
3 48 that._json.dependencies = mout.object.mixIn({}, installed, {
3 58 var names;
3 59 \
4 17 var targets = [];
4 28 if(!that._jsonFile && decEndpoints.length === 0 ) {
4 29 throw createError('No bower.json present', 'ENOENT');
4 31 that.walkTree(tree, function (node, name) {
4 32 if (node.incompatible) {
4 34 } else if (node.missing || node.different || that._config.force) {
4 39 }, true);
4 40 decEndpoints = decEndpoints || [];
4 42 decEndpoint.newly = true;
4 43 targets.push(decEndpoint);
4 48 return that._manager.preinstall(that._json);
4 51 return that._manager.install(that._json);
4 54 if (that._options.save || that._options.saveDev || that._options.saveExact) {
4 56 var jsonEndpoint;
4 57 jsonEndpoint = endpointParser.decomposed2json(decEndpoint);
4 58 if (that._options.saveExact) {
4 59 if (decEndpoint.name!== decEndpoint.source) {
4 60 throw createError('No resolvable', 'ENOENT');
4 62 if (that._options.json.dependencies.dependencies.push(decEndpoint);
4 67 Project.prototype.readJson = function () {
4 68 var that = this._json;
4 69 if (!this._json = json;
4 70 if (!this._json.name) {
4 71 return Q.name = path.parse(this._json.name, '*')
4 72 .split(this._json);
4 75 } = options = options;
4 76 } else if (!this._json.name = options;
4 78 options = options || {};
4 79 return that._json = this._jsonFile = path.join(this._config.cwd, '_config.bower_config.cwd, '_config.json/bower
5 62 if (that._options.emit('resolved', decEndpoint);
5 63 decEndpoint.source = decEndpoint.source = that._options.source);
5 69 var that = function () {
5 71 if (this._jsonEndpoint) {
5 73 return Q.n
5 74 .n.n.n.n.then(this._else
5 75 .then(this._options.then(this._options.readJson.readJson.bind(this, jsonEndpoint);
5 77 .then(this._readJson.parse)
5 78 .bind(this._options.options.bind(this, this._options, this._options, this._options)
5 79 .nexts.readJson.bind(this, this._options, this._options)
5 80 .saveExact)
5 81 .
6 21 if (!options.save &&!options.saveDev) {
6 22 options.save =!!options.save;
6 24 options.readOptions = function (argv) {
6 25 var cli = require('../util/cli');
6 26 var options = cli.readOptions(argv);
6 27 var name = options.argv.remain[1];
6 28 if (!name) {
6 29 return;
6 34 names.forEach(function (name) {
6 35 var decEndpoint = flattened[name];
6 36 if (!decEndpoint || decEndpoint.missing) {
6 37 packages[name] = null;
6 40 promise = promise
6 42 var message;
6 43 var data;
6 44 var dependantsNames;
6 46 dependants.forEach(function (name) {
6 50 return!dependant.root && names.indexOf(name)!== -1;
6 52 if (!decEndpoint.length) {
6 53 packages[name] = decEndpoint.canonicalDir;
6 56 if (!that._jsonFile && decEndpoint.name!== '*') {
6 57 var info = {
6 58 name: name,
6 59 url: endpoint.source,
6 60 transports: this._config.transports,
6 61 force: config.force,
6 62 json: true
6 65 that._jsonFile = info;
6 67 .write(that._json);
6 68 .progress(docs = production;
6 69 return that._manager
6 70 .configure({});
6 72 .resolve: function () {
6 74 return that._json, manager.install();
6 75 .setProduction(manager)
6 76 .setResolutions, manager.resolve, that._json);
6 78 .resolve();
6 79 .then(that._working);
6 83 .readJsonRenderer.prototype.prototype.prototype.readJson = function () {
6 84 .production = function () {
6 85 return Q.resolve() {
6 86 if (this._json) {
6 87 return Q.resolve()
6 88 .readFile(
7 19 if (!this._production) {
7 23 this._production =!!options.production;
7 27 this._options.save = this._options.save || function (defaults) {
7 39 if (!names) {
7 40 that.walkTree(tree, function (node) {
7 42 return false;
7 44 mout.object.forOwn(flattened, function (decEndpoint) {
7 45 if (decEndpoint.extraneous) {
7 50 if (node.missing || node.linked) {
7 62 decEndpoint.originalUrl = decEndpoint.source;
7 63 decEndpoint.target = decEndpoint.originalUrl || jsonEndpoint.source;
7 65 return that._bootstrap(targets, resolved, decEndpoints, that._manager, decEndpoints,
7 66 return
7 67 install(targets.manager)
7 68 .manager
7 69 .preprocess
7 70 .preprocess,
7 71 .progress(function (progress, deferred.progress, deferred.notify, deferred.reject)
7 72 .progress)
7 73 ])
7 74 .then(function (notify, decEndpoints) {
7 75 .on('progress'

8 22 this._options.production = undefined;
8 24 return this._repair()
8 25 .then(function (dissected) {
8 26 repairDissected = dissected;
8 28 .then(that.analyse.bind(this))
8 30 var targets = {};
8 32 var installed;
8 47 return that._bootstrap(targets, resolved, installed)
8 55 repairDissected = mout.object.filter(dissected, function (decEndpoint) {
8 56 return!decEndpoint.missing;
8 59 .then(function (result) {
8 63 if (!result) {
8 64 throw createError('No resolvable', 'ENOTIMED PERMANENTLY');
8 66 return that._manager.install()
8 68 return that._manager.install.install(that._json);
8 74 return Q.parse = function (decEndpoints, dependencies;
8 75 if (decEndpoints) {
8 77 if (this._json = decEndpoints) {
8 78 return Object.for (this._decEndpoints) {
8 79 .for (this._decEndpoints) {
8 81 return Object.for (this._decEndpoint) {
8 82 return this._decEndpoints.forEach(this._decEndpoint) {
8 83 return this._decEndpoint.source = this._decEndpoint.source = endpointParser.decompendpoint.source;
8 85 }._decEndpoint.source = decEndpoint.decompendpoint.source;
9 60 throw createError('No cached version for'+ decEndpoint.name, 'ENOCACHE', {
9 61 resolved: true: true
9 64 if (that._options.jsonEndpoint.version = decEndpoint.source = decEndpoint;
9 69 return that._json = toData = that._json = that._manager;
9 71 .saveExact = true;
9 72 .data.saveExact = true;
9 73 return that._json = true;
9 76 return Q.then(function that._options.uninstall = function (err) {
9 77 var names = options.uninstallables = options.uninstallables.map(function (decEndpoint) {
9 78 var name;
9 79 var promise = options.uninstallables.uninstallables.uninstallables.uninstallables.sort(function (name) {
9 80 var name = options.uninstallables.uninstallables.uninstall
