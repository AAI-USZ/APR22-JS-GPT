Min editdistance: 51.00
Closest candidate: 3 44 var target = path.join(data.path, layout.indexOf('index.md'));
0 1 var rBasename = /((.*)\\/)?([^\\/]+)\\.(\\w+)$/,
0 2 rHiddenFile = /^_|\\/_|[~%]$/;
0 3 var getInfoFromFilename = function(path){
0 4 var newPostName = hexo.config.new_post_name,
0 5 params = [];
0 6 path.substring(0, path.length - pathFn.extname(path).length)
0 7 .replace(/:(\\d+)/g, function(match, name){
0 8 switch (name){
0 9 case 'year':
0 10 params.push(name);
0 11 return '(\\\\d{4})';
0 12 case 'i_month':
0 14 return '(\\\\d{1,2})';
0 15 case 'day':
0 17 return '(\\\\d{2})';
0 18 case 'title':
0 20 return '(.*)';
0 21 default:
0 22 return '';
0 23 }
0 24 });
0 25 var regex = new RegExp('^' + pattern + '$');
0 26 if (!regex.test(path)) return;
0 27 var match = path.match(regex),
0 28 result = {};
0 29 for (var i = 1, len = match.length; i <= len; i++){
0 30 if (match[i]) result[params[i - 1]] = match[i];
0 32 return result;
0 33 };
0 34 var _scanPostAssets = function(post, callback){
0 35 var assetDir = post.asset_dir;
0 36 fs.exists(assetDir, function(exist){
0 37 if (!exist) return callback();
0 38 file.list(assetDir, {ignorePattern: rHiddenFile}, function(err, files){
0 39 if (err) return callback(err);
0 40 var PostAsset = hexo.model('PostAsset');
0 41 async.each(files, function(item, next){
0 42 PostAsset.updateStat(post, item, next);
0 43 }, callback);
0 47 exports.loadPost = function(post, callback){
0 48 var config = hexo.config,
0 49 baseDir = hexo.base_dir;
0 50 var Post = hexo.model('Post');
0 51 var path = post.params.path;
0 52 file.read(fileDir, function(err, content){
0 54 var config = post.config || config;
0 55 async.each(config, function(item, next){
0 56 var path = item.params.path;
0 57 post.path = path;
0 58 post.source = pathFn.join(source.substring(0, 1));
0 59 render.render({path: path}, function(err, post){
0 61 post.path = post.source;
0 62 post.site = site;
0 63 if (config.logger.format) post.format = config.format === 'Home';
0 64 if (config.permalink){
0 65 return config.permalink = config.permalink;
0 66 } else {
0 67 return config.url = config.permalink = config.permalink;
0 71 var result = render();
0 72 async.each(config.each(function(callback);
0 75 };'

1 2 scaffoldDir = hexo.scaffold_dir;
1 3 var scaffolds = {
1 4 post: [
1 5 'title: {{ title }}',
1 6 'date: {{ date }}',
1 7 'tags:',
1 8 '---'
1 9 ].join('\
1 10 ') + '\
1 11 ',
1 12 page: [
1 18 '
1 20 module.exports = function(data, callback){
1 21 var slug = escape(data.slug || data.title, config.filename_case),
1 22 layout = data.layout || config.default_layout,
1 23 date = moment(data.date || data.date_format),
1 24 target = hexo.source_dir,
1 25 scaffoldDir = hexo.scaffold_dir;"

2 20 var create = module.exports = function(data, callback){
2 21 var scaffoldDir = hexo.scaffold_dir;
2 22 file.dir(scaffoldDir, function(files){
2 23 async.forEach(files, function(item, next){
2 24 var filePath = path.join(scaffoldDir, item);
2 25 fs.exists(filePath, function(exist){
2 26 exist.isDirectory().should.be.true;
2 27 file.read(filePath, function(err, content){
2 28 if (err) throw new Error('File not found: %s', item);
2 29 content.should.eql(content);
2 30 file.write(filePath, content, next);
2 34 };"

3 20 var create = module.exports = function(data, replace, callback){
3 21 if (!callback){
3 22 if (typeof replace === 'function'){
3 23 callback = replace;
3 24 replace = false;
3 26 callback = function(){};
3 29 var layout = data.layout || config.default_layout,
3 30 date = data.date = data.date? moment(data.date) : moment();
3 31 async.parallel([
3 32 function(next){
3 33 return swig.compile(data.text)(data);
3 34 },
3 36 if (!data.path) return next();
3 37 file.readFile(data.path, next);
3 41 date = data.date? moment(data.date) : moment();
3 42 layout = layout.toLowerCase();
3 43 if (layout === 'page'){
3 44 var target = path.join(data.path, layout.indexOf('index.md'));
3 46 var target = path.join(base, layout === 'draft'? '_drafts' : '_posts');
3 48 var scaffoldDir = swig.compile(scaffoldDir + '---');
3 49 file.readFile(scaffoldDir, function(err, content){
3 51 if (content){
3 52 if (content) swig.compile(content);
3 54 callback(new Error('No layout for'+ target + '.'));
3 57 file.writeFile(target, content, next);
3 60 fs.exists(target, function(exist){
3 61 if (exist){
3 62 file.rmdir(target, function(err){
3 65 file.mkdirs(target, function(err){
3 66 if (err) return callback(new Error('No layout for'+ target + '.'));
3 69 log.d('No layout for'+ target);
3 70 next();
3 73 file.mkdirs(target, function(target){
3 74 if (target === 'layout') return callback(new Error('No layout for'+ target);
4 28 normal: [
4 29 'layout: {{ layout }}',
4 40 file.dir(data.source, function(files){
4 42 var scaffoldPath = path.join(data.source, item);
4 43 fs.exists(normalizeObject(item), function(exist){
4 44 exist = true;
4 46 }, next);
4 50 var createScaffoldPath = function(layout, scaffoldDir){
4 51 return function(item, next){
4 52 if (scaffoldPath){
4 53 file.read(scaffoldPath, next);
4 55 next(null, defaults.normal);
4 69 var createSuccessResult = function(){
4 70 return function(arr){
4 72 return function(data, next){
4 73 var scaffoldPath = path.join(scaffoldDir, item);
4 74 file.writeFile(template.join( scaffoldPath, 'foo.md'), data, next);
4 77 module.exports.createSuccessResult = function(data, callback){
4 78 var scaffoldPath = hexo.scaffold_dir;
4 79 file.writeFile(template.join( scaffoldPath, 'bar.md'), data, callback);
5 6 path.substring(0, path.length - pathFn.extname(path).length){
5 7 var pattern = newPostName.substring(0, newPostName.length - pathFn.extname(newPostName).length)
5 8 if (!pattern.test(path)) return false;
5 9 var now = moment();
5 10 var filenameData = newPostName.split(':');
5 11 path.substring(0, filenameData.length - 1).forEach(function(str){
5 12 if (!rBasename.test(str)) return;
5 13 var date = now.format('YYYY-MM-DD HH:mm:ss'),
5 14 target = hexo.source_dir + '_posts' + sep + filenameData.substring(1) + sep;
5 15 var content = swig.compile(target);
5 16 content.replace(/:year/g, date.format('YYYY'))
5 17 .replace(/:(month|day)/g, date.format('MM'))
5 18 .replace(/:i_month|day/g, date.format('D'))
5 19 .replace(/:title/g, escape(title));
5 20 if (!path.extname(target)) target += '.md';"

6 1 var rEscapeContent = /<escape( indent=[\'"](\\d+)[\'"])?>([\\s\\S]+?)<\\/escape>/g,
6 2 rLineBreak = /(\
6 3 (\\t+)){2,}/g,
6 4 rUnescape = /<notextile>(\\d+)<\\/notextile>/g,"

7 31 file.dir(data.source.substring(hexo.base_dir.length), function(files){
7 34 file.copy(scaffoldPath, scaffoldPath, next);
7 39 var escape = function(str){
7 40 return str.replace(/\
7 41 /g, '\
7 42 ' + escape.replace(/\\r/g, '\\r'), function(match, _){
7 43 return escape.test(item.substring(0, 1));
7 64 module.exports.data = function(data, callback){
7 67 files = _.compact(files);
7 68 for (var i in files){
7 69 var item = scaffoldPath.substring(baseDir.length + 1);
7 70 if (item.layout === 'page'){
7 71 var layout = item.layout.split('page');
7 72 if (layout === 'draft'){
7 73 var category = item.layout;
7 74 if (category){
7 75 var href = category.substring(baseDir.length + 1);
7 76 if (year){
7 77 file.dir(year, function(files){
7 79 var date = new Date(item.year);
7 80 if (!moment.isMoment(item))(item))(item.get(item).isSingle())
7 81 .add(item))(item);
7 85 break;
7 90 file.write(format(item, page);
8 23 callback = replace;"

9 4 root = config.root,
9 5 perPage = config.per_page,
9 6 pageDir = config.pagination_dir;"

