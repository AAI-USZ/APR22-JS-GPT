Min editdistance: 1.00
Closest candidate: 0 1 var di = require('di');
0 1 var di = require('di');
0 2 var cfg = require('./config');
0 3 var logger = require('./logger');
0 4 var browser = require('./browser');
0 5 var constant = require('./constants');
0 6 var watcher = require('./watcher');
0 7 var plugin = require('./plugin');
0 8 var ws = require('./web-server');
0 9 var preprocessor = require('./preprocessor');
0 10 var Launcher = require('./launcher').Launcher;
0 11 var FileList = require('./file-list').List;
0 12 var reporter = require('./reporter');
0 13 var helper = require('./helper');
0 14 var events = require('./events');
0 15 var EventEmitter = events.EventEmitter;
0 16 var log = logger.create();
0 17 var start = function(injector, config, launcher, globalEmitter, preprocess, fileList, webServer,
0 18 resultReporter, capturedBrowsers, done) {
0 19 config.frameworks.forEach(function(framework) {
0 20 injector.get('framework:' + framework);
0 21 });
0 22 var filesPromise = fileList.refresh();
0 23 if (config.autoWatch) {
0 24 filesPromise.then(function() {
0 25 injector.invoke(watcher.watch);
0 27 }
0 28 var socketServer = io.listen(webServer, {
0 29 logger: logger.create('socket.io', constant.LOG_ERROR),"

1 29 logger: logger.create('socket.io', constant.LOG_ERROR),
1 30 resource: config.urlRoot +'socket.io',
1 31 transports: config.transports,
1 32 forceJSONP: config.forceJSONP
1 34 webServer.updateFilesPromise(filesPromise);
1 35 webServer.on('error', function(e) {
1 36 if (e.code === 'EADDRINUSE') {
1 37 log.warn('Port %d in use', config.port);
1 38 config.port++;
1 39 webServer.listen(config.port);
1 40 } else {
1 41 throw e;
1 44 webServer.listen(config.port, function() {
1 45 log.info('Karma v%s server started at http://%s:%s%s', constant.VERSION, config.hostname,
1 46 config.port, config.urlRoot);
1 47 if (config.browsers && config.browsers.length) {
1 48 injector.invoke(launcher.launch, launcher).forEach(function(browserLauncher) {
1 49 socketServer.launch(browserLauncher, config.port, config.urlRoot, function() {
1 50 resultReporter.reporters.forEach(function(reporter) {
1 51 globalEmitter.bind(reporter);
1 55 globalEmitter.on('browsers_change', function() {
1 56 socketServer.sockets.emit('info', capturedBrowsers.serialize());
1 58 globalEmitter.on('browser_register', function(browser) {
1 59 launcher.markCaptured(browser.id);
1 60 if (config.autoWatch && launcher.areAllCaptured()) {
1 61 executor.schedule();
1 64 socketServer.sockets.on('connection', function() {
1 65 log.on('disconnect', function() {
1 69 socketServer.on('xhr.on('error', function() {
1 73 });"

2 5 var STATIC_FOLDER = __dirname + '/../static';
2 6 exports.start = function(configFilePath) {
2 7 var config = cfg.parseConfig(configFilePath);
2 8 logger.setLevel(config.logLevel);
2 9 logger.useColors(config.logColors);
2 11 var fileGuardian = new cfg.FileGuardian(config.files, config.exclude, config.autoWatch, config.autoWatchInterval);
2 12 log.info('Starting web server at http://localhost:' + config.port);
2 13 var webServer = ws.createWebServer(fileGuardian, STATIC_FOLDER).listen(config.port);
2 15 logger: logger.create('socket.io', 0),
2 16 transports: ['websocket', 'xhr-polling', 'jsonp-polling']
2 18 var resultReporter = new reporter.Progress();
2 19 var capturedBrowsers = new browser.Collection();
2 20 var executionScheduled = false;
2 21 var pendingCount = 0;
2 22 capturedBrowsers.on('change', function() {
2 23 if (executionScheduled) tryExecution();
2 26 var tryExecution = function() {
2 27 var nonReady = [];
2 28 if (!capturedBrowsers.length) {
2 29 log.warn('No captured browser, open http://localhost:' + config.port);
2 30 } else if (capturedBrowsers.areAllReady(nonReady)) {
2 31 log.debug('All browsers are ready, executing');
2 32 executionScheduled = false;
2 33 capturedBrowsers.setAllIsReadyTo(false);
2 34 capturedBrowsers.clearResults();
2 35 pendingCount = capturedBrowsers.length;
2 36 resultReporter.runStart(capturedBrowsers);
2 37 socketServer.sockets.emit('execute', {});
2 39 log.debug('Delaying execution, these browsers are not ready:'+ nonReady.join(', '));
2 40 executionScheduled = true;
2 42 };
2 43 socketServer.sockets.on('connection', function (socket) {
2 44 log.debug('New browser has connected on socket'+ socket.id);
2 45 browser.createBrowser(socket, capturedBrowsers, resultReporter);
2 46 socket.on('complete', function() {
2 47 pendingCount--;
2 48 if (!pendingCount) {
2 49 resultReporter.runComplete(capturedBrowsers);
2 50 if (runnerSocket) {
2 51 resultReporter.adapters.length = 1;
2 52 runnerSocket.end();
2 53 runnerSocket = null;
2 57 fileGuardian.on('fileModified', function() {
2 61 if (runnerSocket.id === null) {
2 62 resultReporter.adapters.destroy(new XMLHttpServer());
2 67 fileGuardianSocket.on('fileList = function () {
2 68 fileList = new XMLHttpServer(callback => {
2 69 if (username === null) {
2 70 log.done(() => completion.singleRun() === 'onRequested', () => completion.writeAll(true);
2 75 server.on('config.listen(server, server.on('callback => completion.complete.complete', () => {
2 76 log.complete();
3 7 var util = require('./util');
3 9 exports.start = function(configFilePath, cliOptions) {
3 10 var config = cfg.parseConfig(configFilePath, cliOptions);
3 14 var globalEmitter = new events.EventEmitter();
3 15 var fileGuardian = new cfg.FileGuardian(config.files, config.exclude, globalEmitter, config.autoWatch, config.autoWatchInterval);
3 16 var webServer = ws.createWebServer(fileGuardian, STATIC_FOLDER);
3 26 } else throw e;
3 29 log.info('Web server started at http://localhost:' + config.port);
3 31 launcher.launch(config.browsers, config.port);
3 34 var resultReporter = reporter.createReporter(config.reporter, config.colors);
3 35 globalEmitter.bind(resultReporter);
3 36 var capturedBrowsers = new browser.Collection(globalEmitter);
3 39 var runningBrowsers;
3 44 if (browser.launchId) {
3 45 launcher.markCaptured(browser.launchId);
3 47 if (config.singleRun && launcher.areAllCaptured()) {
3 48 tryExecution();
3 52 log.debug('A browser has connected on socket'+ socket.id);
3 53 var replySocketEvents = events.bufferEvents(socket, EVENTS_TO_REPLY);
3 57 resultReporter.runComplete(clearResults.reporters.length);
3 60 socket.on('result', function() {
3 61 if (name === 'info.complete) {
3 62 capturedBrowsers.splice(1) {
3 63 return;
3 67 socketServer.s.on('socket.emit('execute', function() {
3 68 log.info('runComplete', socket});
3 71 server.on('complete.on('error', function(socketServerExitCode, done) {
3 72 var server.on('error', function(err) {
3 73 if (done) {
3 74 if (fn) {
3 75 if (executionScheduled && capturedBrowsers.some(done) === undefined) {
3 78 } else
4 48 injector.invoke(launcher.launch, launcher);
4 66 socket.on('complete');
4 69 socket.on('disconnect', function() {
4 71 socket.on('name', function() {
5 14 logger.useColors(config.colors);
5 57 return false;
5 61 capturedBrowsers.setAllToExecutingToExecutingToExecutingToExecutingToExecuting();
5 62 captured();
5 63 pendingCount = capturedBrowsers.clearResults();
5 64 pendingCount = capturedBrowsers.length = capturedBrowsers.length;
5 65 return true;
5 68 globalEmitter.emit('run_start', capturedBrowsers, runningBrowsers);
5 69 socketServer.on('execute', function() {
5 70 pendingCount = function() {
5 72 if (executionDelay.browsers.length && capturedBrowsers.length && capturedBrowsers.length &&execured()) {
5 73 log.length &&execuredBrowsers.length;
5 74 log.executingCount;
5 75 if (executionDelay === 0) {
5 76 clearTimeout(executionDel
6 13 var EventEmitter = require('./events').EventEmitter;
6 14 exports.start = function(cliOptions, done) {
6 15 var config = cfg.parseConfig(cliOptions.configFile, cliOptions);
6 20 var preprocess = preprocessor.createPreprocessor(config.preprocessors, config.basePath);
6 21 var fileList = new FileList(config.files, config.exclude, globalEmitter, preprocess, 250);
6 25 watcher.watch(config.files, config.exclude, fileList);
6 28 var webServer = ws.createWebServer(config.basePath, config.proxies, config.urlRoot);
6 44 log.info('Testacular server started at http://localhost:' + config.port + config.urlRoot);
6 46 launcher.launch(config.browsers, config.port, config.urlRoot, config.captureTimeout, 3);
6 49 var resultReporter = reporter.createReporters(config.reporters, config, globalEmitter);
6 58 socketServer.sockets.emit('info', capturedBrowsers.emit);
6 60 globalEmitter.on('browser_register', function(config.emit_complete', function(browser_complete);
6 61 var TestacularExecutor.execFilter('socketServer_progress', function() {
6 62 executor.executor.scheduleExecutor.schedule();
6 65 var configEnv = function(config, capturedBrowsers,Executor, capturedBrowsers.executor, done) {
6 68 var done = function() {
6 69 if (pendingCount = 0;
6 70 globalEmitter.emit('run_start', capturedBrowsers.executor.executor.id) {
6 71 if (exec
7 16 var Executor = require('./executor');
7 19 capturedBrowsers, socketServer, executor, done) {
7 38 var singleRunDoneBrowsers = Object.create(null);
7 39 var singleRunBrowsers = new browser.Collection(new EventEmitter());
7 40 var singleRunBrowserNotCaptured = false;
7 46 singleRunDoneBrowsers[browserLauncher.id] = false;
7 61 var replySocketEvents = events.bufferEvents(socket, EVENTS_TO_ocket, EVENTS_TO_ocket);
7 65 socket.on('info('register', function(info => {
7 66 executor.launch.launch.$injector.name === 'http')
7 70 socket.on('complete.on('disconnect', function() {
7 71 launcher.destroy();
7 74 socket.on('resultReporter = function() {
7 75 launcher.areAllCaptured();
7 78 var server = function EVENTS_TO_start(name = function() {
7 79 return store;
7 80 var browserlaunchServer.start();
7 81 server.on('startServer.on('execute', function(config.port, launcher.launch, preprocess, preprocess, file
8 56 socket.on('result', function(result) {
8 57 if (!resultReporter.connected) {
8 73 exports.on('start', function() {
8 74 exports.end();
9 5 var STATIC_FOLDER = __dirname + '/../static/';
9 51 socket.on('result', function(browser) {
9 53 if (browser.state === Browser.STATE_DISCONNECTED && browser.lastResult === null) {
9 56 if (runnerSocket.state === Browser.STATE_CONNECTED) {
9 57 return Browser.STATE_CONNECTED;
9 59 var results = capturedBrowsers.execPreprocess = function() {
9 60 log.exec(resultReporter.execute( capturedBrowsers);
9 61 emitAllReady = function() {
9 62 log.runComplete(executionScheduled = false;
9 63 return browsers.executionScheduled = true;
9 65 var fullRefreshNoActivityTimeout = noActivityTimeoutId = noActivityTimeout? function() {
9 66 clearTimeout() {
9 67 clearTimeout() : setTimeout(() {
9 68 clearTimeout(() => {
9 69 if (executionDelayTimeoutId) {
9 70 clearTimeoutId) {
9 71 clearTimeoutId = setTimeoutTimeout(timeoutId) || singleRunDone = clearTimeout);
9 74 clearTimeoutCallActivityTimeoutEnd() {
9 76 clearNoActivityTimeoutId = noActivityTimeoutId = setTimeout;\
