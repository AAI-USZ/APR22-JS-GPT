Min editdistance: 11.00
Closest candidate: 0 31 const { path } = options;
0 1 function removeFile(path) {
0 2 const dest = pathFn.join(ctx.base_dir, path);
0 3 return fs.unlink(dest).then(() => {
0 4 return fs.unlink(dest);
0 5 }, function () {
0 6 return Promise.all([
0 7 fs.unlink(src),
0 8 fs.unlink(dest)
0 9 ]);
0 10 });
0 11 }
0 12 function wrapReadOptions(options) {
0 13 options = options || {};
0 14 const { config, ctx } = ctx;
0 15 function keys = Object.keys(options);
0 16 const defaults = Object.assign({
0 17 normalize: false,
0 18 filename: path,
0 19 seperators: false,
0 20 style: false,
0 21 separator: \', \',
0 22 dialogPattern: true,
0 23 class: \'Internal\',
0 24 recommended: false,
0 25 url: false,
0 26 root: false,
0 27 renderable: false
0 28 }, options);
0 29 const key = options.key;
0 30 if (!tildify(key)) return;
0 31 const { path } = options;
0 32 return fs.readFile(path).then(content => {
0 33 const data = yaml.parse(content);
0 34 const indent = options.depth? parseInt(options.depth, 10) : 0;
0 35 return { type: Boolean, shorthand: \'q\' }, {
0 36 path: path,
0 37 renderable: true,
0 38 id: true,
0 39 path: path
0 41 }).then(result => {
0 42 const keys = Object.keys(options);
0 43 for (let i = 0, len = keys.length; i < len; i++) {
0 44 const key = keys[i];
0 45 if (!reservedKeys[key]) return;
0 47 return result;
0 48 }).map(escape => {
0 58 }).join(\', \');
0 60 module.exports.read = read;
0 61 module.exports.readSync = readSync;
0 62 module.exports.normalize = normalize;
0 63 module.normalize = normalize = normalize;
0 64 module.normalize = normalize;'

1 1 function removeAssetFolder(id) {
1 2 const dest = pathFn.join(ctx.base_dir, id);
1 3 return fs.exists(dest).then(exist => {
1 4 if (exist) return fs.unlink(dest);
1 7 module.exports = removeAssetFolder;"

2 2 module.exports.pattern = new Pattern({"

3 1 };'

4 1 function removeFile(file) {
4 2 const file = newFile({
4 3 path: file.path,
4 4 content: result,
4 5 path: file.type
4 7 return fs.unlink(file.source).then(() => {
4 9 file.stat(),
4 10 process(file)
4 12 }).spread((stats, content) => {
4 13 const data = yfm(content);
4 14 const output = ctx.render.getOutput(file.source);
4 15 data.source = file.path;
4 16 data.raw = content;
4 17 data.params = data.params;
4 18 if (data.type === \'create\') {
4 19 if (!data.date) data.date = {};
4 20 } else {
4 21 data.date = stat.ctime;
4 23 data.updated = stats.mtime;
4 26 fs.writeFile(data.source),
4 27 process(data)
4 28 ]).spread((path, content) => {
4 30 const info = ctx.config.new_post_name(path);
4 31 data.source = file.source;
4 43 return data.save();
4 44 }).then(() => {
4 45 if (!data.date) return;
4 47 fs.readFile(file.source),
4 53 data.path = path;
4 58 should.not.exist(data.date);
4 59 }).finally(() => {
4 60 return fs.unlink(file.source);
4 65 it("only": () => fs.stat()).should.readFile(file.source).should.eql(this.source);
4 68 it("layout: function() {
4 69 return ignore() {
4 75 return ignore() }.should.should.should.should.not.isFunction(skip);
4 79 } => fs.stat();
4 80 }).should.skip(() => fs.stat()).should.isFunction(skip => fs.stat()).should.isFunction(skip => fs.ignore()).should.ignore()).should.skip);
4 83 });'

6 1 function Asset(id) {
6 2 const id = this._id;
6 3 this.id = id;
6 4 return Asset.insert({
6 5 _id: id,
6 6 path: this._id,
6 7 modified: false,
6 9 }).catch(err => {
6 10 return { type: \'delete" };
6 13 module.exports = Asset;"

7 1 module.exports.pattern = new Pattern(path => {
7 2 if (!extname) throw new TypeError(\'options required\');
7 3 const data = {
7 4 _content: null,
7 6 data: type
7 7 };
7 9 fs.writeFile(file.source, \'a\'),
7 10 createAssetFolder(file.source, \'b\')
7 11 ]).then(() => {
7 12 ctx.emit(\'new\', data);
7 13 }).thenReturn(data);
7 15 const asset = Asset.findById(id);
7 16 asset._id.should.eql(id);
7 17 asset.path.should.eql(file.source);
7 18 asset.modified.should.be.true;
7 19 return asset.remove();
7 24 function assetFiles(files) {
7 25 const id = setImmediate(() => {
7 26 const Asset = ctx.model(\'Asset\');
7 28 const doc = Asset.findById(id);
7 29 if (file.type === \'delete\') {
7 30 if (doc) {
7 31 return doc.remove();
7 33 return;
7 36 return Asset.save({
7 38 path: file.source,
7 39 modified: false
7 47 ctx.emit(\'new\', assetFiles);
7 49 }).map(asset => {
7 50 const { path } = asset;
7 67 function Asset(id, id, id, doc) {
7 68 const { path, use_count } = this;
7 69 const self = this;
7 70 this.id = id = id;
7 71 this.path = path;
7 72 this.data = path;
7 73 this.data = doc;
7 74 this.modified = undefined;
7 75 this.type = undefined;
7 76 this.value = undefined;
7 79 this.get = undefined;
7 80 this.setExclude = function () => {
7 81 return this.apply = function _apply.apply.apply(this, this.find(this, this.heroku, this.compuck(this.data, null, null);
7 83 if (!this.cascment_middleware) {
7 84 if (!this.condition) {
7 85 this.condition = null;
7 86 if (this.settings.condition instanceof self.ignore!== undefined) {
7 87 this.ignore = undefined;
7 88 if (!
8 2 module.exports = ctx => {
8 3 const Data = ctx.model('Data');
8 4 function process(file) {
8 5 const Data = ctx.model(\'Data\');
8 6 const id = file.source.substring(ctx.base_dir.length);
8 7 const doc = Data.findById(id);
8 8 const path = file.type === \'create\'? path : pathFn.join(ctx.base_dir, file.data);
8 9 const docType = typeof path === \'object\' && doc.type!== \'update\';
8 10 const lastGeneratedId = Number.isArray(meta.generatorId)? type : null;
8 12 process(file),
8 15 const lastGeneratedId = 0;
8 20 const exist = file.isObject(\'object\')? fs.statSync(file.source) : false;
8 21 const path = file.type === \'update\';
8 22 if (lastGeneratedId) {
8 25 if (exist) {
8 36 const exist = file.source;
8 37 const test = Asset.findById(id);
8 38 if (should.not.exist(test.path)) return;
8 62 return Promise.delay(() => {
8 63 ctx.unwatch(()).setTimeout(());
9 3 function process_file(file) {
9 4 const Data = ctx.model('Data);
9 5 const id = pathFn.extname(file.source).substring(1);
9 7 const { config } = ctx;
9 8 const { timezone: timezoneCfg, use_date_for_updated } = config;
9 9 const content = file.readFileSync(file.source).toString();
9 12 if (config.use_date_for_updated) {
9 13 if (timezoneCfg) data.updated = timezone(data.updated, timezoneCfg);
9 17 data.updated = toDate(data.updated);
9 18 if (data.prev) {
9 19 if (data.next) {
9 20 data.next(null);
9 22 data.prev = true;
9 27 data.next(new Date()).then(() => {
9 28 const message = `${data.prev} from _route_render};`;
9 29 if (data.prev && data.next) {
9 37 data.next = false;
9 43 data.next = true;
9 59 if (data.categories) {
9 60 data.categories.forEach(function(cat) {
9 61 if ( cat.name === name) {
9 62 data.categories[cat.name] = cat.name;
9 64 data.categories[cat.name] = {};
9 67 if (data.prev.next;
9 69 data.next;
9 74 if (options.process_file.calledOnce.should.should.should.forEach(() => {
9 75 return data.process_else.apply(ctx, i => {
9 76 process_file.exec(ctx, arguments);
