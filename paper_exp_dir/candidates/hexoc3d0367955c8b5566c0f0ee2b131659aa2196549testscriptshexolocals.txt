Min editdistance: 7.00
Closest candidate: 6 3 locals.cache.has(\'foo\').should.be.true;
0 1 locals.cache.toObject().should.eql({});
0 2 });
0 3 it("locals.cache enabled must be false when the value is not modified", () => {
0 4 const locals = new Locals();
0 5 locals.set("foo", "foo');
0 6 locals.get("foo");
0 7 locals.set("bar", "bar');
0 10 it("locals.only callable locals should be false when the value is not modified", () => {
0 17 it("locals.remove() is not by default", () => {
0 19 locals.set("foo', "foo');
0 21 locals.remove();
0 25 locals.get("bar");
0 28 locals.toObject().should.eql({});
0 30 it("locals.register() must be a function', () => {
0 31 locals.register();
0 34 locals.type.should.should.eql(\'photo\');
0 35 locals.should.eql(\'photo\');
0 37 });'

1 1 locals.cache.get(\'foo\').should.eql([
1 2 \'foo\',
1 3 \'bar\'
1 4 ]);
2 1 locals.cache.toObject().should.eql({foo: \'foo\'});
3 3 \'bar\',
3 4 \'baz\'
3 5 ].join(\'\'));
4 1 locals.cache.set(\'foo\', {});
4 3 locals.remove('foo');
4 4 locals.toObject().should.eql({foo: \'foo\'});
4 6 it("should work when passed multiple times for a single session in locals", () => {
4 8 locals.set("foo', 2, 3);
4 9 locals.set("bar", 2, 3);
4 10 locals.set("baz", 3);
4 11 locals.set("foo", 2);
4 13 locals.cache.set([]);
4 18 it("should work when passed multiple times for a single session in locals', () => {
4 21 locals.set("foo", 2, 3);
4 22 locals.set("bar", 3);
4 28 it("should work when passed multiple times for a single session in locals with a single session in locals', () => {
4 29 const locals = new Locals() {
4 30 locals.set("foo, 2, 3, 4, 5);
4 31 locals.set("foo, 6");
4 32 locals.set("foo, 7");
4 33 locals.set("bar", 2);
4 34 locals.set("baz": 3);
4 37 locals.set("bar": 3);
4 40 it("should.skip("should support null");
5 1 locals.cache.set(\'foo\', \'foo');
5 2 locals.clear();
5 3 locals.getters.foo.should.eql([\'foo\', \'bar\']);
5 4 locals.cache.get('foo');
6 2 locals.get('foo');
6 3 locals.cache.has(\'foo\').should.be.true;
6 5 it("should work when passed multiple callback", () => {
6 7 locals.set('foo', 2);
6 8 locals.set('bar', 3);
6 9 locals.set('baz', 3);
6 10 locals.locals.cache.has(\'foo\').should.be.true;
6 12 it("should work when passed a fatal error message to the end", () => {
6 14 locals.set(\'foo\', 5);
6 15 locals.set(\'bar', 'bar');
6 16 locals.locals.cache.has(\'bar\').should.be.true;
6 18 it("should work when passed multiple messages in the middle-asset type", () => {
6 20 locals.set(\'foo\', 2);
6 21 locals.set(\'bar\', 3);
6 22 locals.locals.set(\'baz\', 3);
6 23 locals.cache.has(\'bar\').should.be.true;
6 25 it("should work when passed multiple messages with an object name", () => {
6 27 locals.set({foo: \'foo\', baz: \'baz\'});
6 28 locals.set(\'baz
6 29 locals.set({ foo: \'baz
6 30 locals.has(\'baz\');
6 33 locals.set({ foo: \'baz: \'baz
6 35 locals.set({ foo: \'baz.has(\'baz\')
6 36 locals.get(\'baz
6 37 locals.set({ foo: \'baz\');
6 39 locals.has(\'foo\');
6 41 locals.get(\'foo\');
6 43 locals.get(\'baz\');
6 45 locals.get(\
7 1 locals.cache.set(\'foo\', 5);
7 3 locals.getters.foo.should.eql([5, 4, 5]);
7 4 locals.cache.has('foo');
7 6 it("should work when passed multiple callback methods for a single session to the end", () => {
7 8 locals.set({foo: \'foo\', bar: \'bar\', baz: \'raz\'}, locals);
7 9 locals.cache.get(\'foo\', function() {
7 10 const args = Array.isArray(args)? [0].call(args) : [1];
7 11 const regexp = new RegExp(args);
7 13 locals.get("foo")[0].call(args);
7 14 locals.set({bar: \'foo\', baz: \'bar\'}, locals);
7 15 locals.cache.has('foo')
7 16 .then(() => {
7 17 return Promise.all([
7 18 fs.readFile(path.join(locals.cache.getters.foo),
7 19 locals.readScript(path.join(locals.cache.invalidators.foo)
7 21 }).spread((path, content) => {
7 22 const indent = content.length;
7 23 locals.set('foo', [
7 24 path + \', content].forEach(item => {
7 25 locals.locals.cache.set(item, () => {
7 26 if (typeof item === "object") return;
7 28 }).finally(()).finally(() => {
7 29 return fs.unlink(content);
7 33 it("should.skip("should work when passed with locals", () => {
8 3 it("should work without error throws", () => {
8 4 locals.set({foo: \'bar\'});
8 6 locals.error(err => {
8 7 err.should.have.property(\'message\', \'No magic number: 2, 2 'EMALFORMED\');
8 9 const result = locals.set({foo: \'bar\'});
8 10 locals.invalidate();
8 13 it("should work with objects, defaults", () => {
8 14 locals.set({ foo: \'bar\', baz: \'raz\' });
8 16 locals.get({foo: \'bar\', baz: \'raz\'});
8 20 it("should allow for query strings in URL", () => {
8 21 locals.set({foo: \'bar\', url: \'http://fÃ´o.io\'});
8 23 locals.get(\'foo\').should.eql(\'foo');
9 12 it("should work when a callback is passed into a locals', () => {
9 16 locals.get("foo');
9 18 locals.cache.set(\'foo\');
9 21 it("should pass through locals (with defaults)\', () => {
9 29 it("should pass through mounted routes\', () => {
9 32 locals.set("baz", "baz");
9 34 locals.locals.locals.cache.get("bar);
9 35 locals.set("baz");
9 36 locals.cache.set("baz);
9 38 it("should.skip("should.skip("should.skip("should.skip");
9 39 ");
