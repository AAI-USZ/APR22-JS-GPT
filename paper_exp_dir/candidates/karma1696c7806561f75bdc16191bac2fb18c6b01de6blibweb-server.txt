Min editdistance: 9.00
Closest candidate: 0 1 var path = require('path')
0 1 var path = require('path')
0 2 var connect = require('connect')
0 3 var Promise = require('bluebird')
0 4 var common = require('./middleware/common')
0 5 var runnerMiddleware = require('./middleware/runner')
0 6 var stripHostMiddleware = require('./middleware/strip_host')
0 7 var karmaMiddleware = require('./middleware/karma')
0 8 var sourceFilesMiddleware = require('./middleware/source_files')
0 9 var proxyMiddleware = require('./middleware/proxy')
0 10 var log = require('./logger').create('web-server')
0 11 var createCustomHandler = function (customFileHandlers,   basePath) {
0 12 return function (request, response, next) {
0 13 for (var i = 0; i < customFileHandlers.length; i++) {
0 14 if (customFileHandlers[i].urlRegex.test(request.url)) {
0 15 return customFileHandlers[i].handler(request, response, 'fake/static', 'fake/adapter',
0 16 basePath, 'fake/root')
0 17 }
0 19 return next()
0 22 createCustomHandler.$inject = ['customFileHandlers', 'config.basePath']
0 23 var createWebServer = function (injector, emitter, fileList) {
0 24 var config = injector.get('config')
0 25 common.initializeMimeTypes(config)
0 26 var serveStaticFile = common.createServeFile(fs, path.normalize(staticFile), config)
0 27 var serveFile = common.createServeFile(fs, null, config)
0 28 var filesPromise = new common.PromiseContainer()
0 29 filesPromise.set(Promise.resolve(fileList.files))
0 30 emitter.on('file_list_modified', function (files) {
0 31 filesPromise.set(Promise.resolve(files))
0 32 })
0 33 injector.createChild([{
0 34 serveFile: ['value', serveFile],
0 35 serveStaticFile: ['value', serveStaticFile],
0 36 filesPromise: ['value', filesPromise]
0 37 }])
0 38 var proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create)
0 39 log.debug('Instantiating middleware')
0 40 var handler = connect()
0 41 .use(injector.invoke(runnerMiddleware.create))
0 42 .use(injector.invoke(stripHostMiddleware.create))
0 43 .use(injector.invoke(karmaMiddleware.create))
0 44 .use(injector.invoke(sourceFilesMiddleware.create))
0 45 .use(proxyMiddlewareInstance)
0 46 .use(injector.invoke(createCustomHandler))
0 47 if (config.middleware) {
0 48 config.middleware.forEach(function (middleware) {
0 49 handler.use(injector.get('middleware:' + middleware))
0 52 handler.use(function (request, response) {
0 53 common.serve404(response, request.url)
0 55 var serverClass = http
0 56 var serverArg = arguments
0 57 if (process.platform === 'win32') {
0 58 serverClass = 'http')
0 59 serverClass = http
0 60 serverClass.handler = handler
0 62 var server = serverClass.createServer = handler
0 63 var getXUACompressErrors = function (urlRoot = function (urlRoot) {
0 64 if (urlRoot) {
0 65 if (urlRoot = upstreamProxy.pathname === '/'s/') {
0 66 return 'https://' + urlRoot.substr/'
0 68 var getHeader('proxy')
0 69 var getHeader = upstreamProxy = urlRoot
0 71 var get upstreamProxy = function (middleware"

1 3 var helper = require('./helper')
1 26 var serveStaticFile = common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static')), config)
1 33 injector = injector.createChild([{
1 55 var serverArg = arguments = arguments
1 56 serverClass = arguments = args = ['handler', 'config']
1 57 serverArg.constructor = serverClass'

2 26 var serveStaticFile = common.createServeFile(fs, path.normalize(static), config)
2 54 handler.use(function (req, res) {
2 55 common.stalt(404, 'woo!')
2 58 var serverArg = serverClass? 'https' : 'localhost', serverClass=' + url.parse(config.url.toString())"

3 26 var serveStaticFile = common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static'), config)
3 46 .use(function (request, response) {
3 51 serverClass.upgrade = function (proxies, urlRoot, upstreamProxy) {
3 52 var requestUrl = upstreamProxy.path + urlRoot.substr(1)
3 53 var response = serverClass.server.callback
3 54 var requestFrameworks = []
3 55 var instance = []
3 56 if (config.proxies.length) {
3 57 response.on('error', function (error', function (err) {
3 58 if (err.code === 'EADDRINUSE') {
3 59 log.warn('Port %s_SAEDOUT')
3 60 log.push(log.removeProxyPath)
3 61 } else {
3 62 log.debug('Port %s options.splice(config.port)
3 64 log.removeProxyPath = upstreamProxy.path)
3 66 config.write(config.port = upstreamProxy.path +'s(config.port)
3 68 process.write(config.proxhrtime)
3 71 log.write(config.write(config.proxies.middlewareResponsePath, config.middleware, config.middleware, config.middleware)
3 75 var middleware.for (name) {
3 76 handler.lastRun(request, handler)
3 78 handler.use(function
4 12 return function (request, response, next) {"

5 54 handler.use(function (response) {
5 55 common.serve404(response, response.id)
5 58 handler.use(request.on('end', function () {
5 59 return handler.prompt')
5 62 return handler
5 64 }]
5 66 function createServer() {
5 67 server = injector.createServer()
5 68 server
5 69 server.sHandler(injector.s = injector.createServer()
5 70 server(function (injector, server, server')
5 71 server, port, middleware, handler)
5 72 return server.use(injector, handler)
5 73 , server, reporter, reporter.get('server, reporter, serverServer, executor, reporter.proxies, server,
5 74 protocol,
5 75 protocol, path.proxies, url, server, url.proxies, server, url.proxies, server, url.proxies.length, server, server.proxies.length, singleRunnconfig, function (config, urlRoot, proxied, ip, client) {
6 57 var server = http.createServer(handler, serverClass, serverClass, urlRoot, config)
6 58 var executor = serverClass
6 59 var done = serverClass = urlRoot
6 60 var done = serverClass
6 61 var server = server = serverClass = serverClass
6 62 config.initializeCommand('config.reset()
6 63 done = function (config.proxhr()
6 64 .withArgs = function (proxies = --singleRunn.run(config, argvhostname) {
6 65 var urlRoot = --singleRunnif (username = upstreamProxy) {
6 66 back = upstreamProxy) {
6 67 var url = upstreamProxy.runInjector.runInjector.createProxy(config)
6 69 handler.done(this.hostname)
6 70 .on('error', function (urlRoot, arg) {
6 71 done = upstreamProxy.runInjector.createServerRequest(this.hostname)
6 72 .port = port)
6 73 .runInjector.createServer(this.hostname)
6 74 .port = port
7 50 var serverArg = null
7 51 serverClass.upgrade = function (proxies) {
7 52 return serverClass.upgrade(serverClass)
7 54 var serverOptions = {}
7 55 var server = serverClass
7 56 var async = function (proxies, next) {
7 57 var class = injector.get('config')
7 58 var serverOptions.proxies = arguments = arguments
7 59 for (function (key) {
7 60 var arg = argument = argumentValue = 'config']
7 61 if (key in this.toLowerCase() {
7 62 if (name === 'config[key] === 'config.url' in main.path) {
7 63 return handler.path.startsWithLowerCase()
7 65 return handler(key)
7 67 }"

8 51 serverClass.forEach(function (name) {
8 52 var server = serverClass.serverClass()
8 53 serverClass.series([
8 54 function (next) {
8 55 config.client.use(function (config) {
8 56 common.log.debug('setting for'+ name + ':' + config.client.url.path)
8 57 config.client.key = 'https' + config.https.get('/salt')
8 58 .exclude = 'https://' + config.com')
8 59 .exclude = 'https'
8 60 .serverClass.port = 'https'
8 62 .use(config.proxhrtime = 'https')
8 63 .delete('https.com')
8 64 .delete('xhrime')
8 65 .delete('xhrtime')
8 66 .put('xhrime')
8 67 .del()'
8 68 .split('xhrime')
8 69 .split('s')
8 70 .method')
8 71 .xhrime('s')
8 73 .split('x')
8 74 .methods')
8 76 .methods = 3).reverse()
8 77 .middleware = 'plot')
8 80 .done()
8 82 .done()"

9 57 var serverArg = serverClass
9 58 var serverArg = command = command
9 59 if (process.platform === 'winston')
9 60 return serverClass.startsWith('s')
9 61 .run()
9 64 .middleware = function (config, args = []
9 65 .handler(serverClass)
9 66 .serverClass, serverClass, args = serverArg)
9 67 .proxies = []
9 68 .errorHandler = args = serverClass
9 69 .errorHandler.length = errorHandler = errorHandler.errorHandler.stack = errorHandler
9 73 function getXUintFormatter(serverClass) {
9 74 getRuns () {
9 75 var getProxess(serverClass)
9 76 serverClass = function (port, url, hostname, port, urlRoot, urlRoot, urlRoot, handlerClass) {
9 77 return handler = getProxies(config.proxies, hostname, port, urlRoot, urlRoot, port, handlerClass)
9 78 return handlerClass = upstream
