Min editdistance: 5.00
Closest candidate: 0 38 });"

0 1 var stat = results.stat,
0 2 link = '',
0 3 draw = results.read,
0 4 permalink = publicDir.path;
0 5 if (data){
0 6 if (source.substring(0, 1) === '_posts'){
0 7 link += 'index.html';
0 8 } else {
0 9 link += '/',
0 12 if (data.length){
0 13 if (path.substring(0, 1) === '_posts'){
0 16 link += '/index.html';
0 17 }
0 20 if (permalink){
0 21 var link = this.permalink;
0 23 var url = this.url;
0 25 if (!pathFn.extname(url)){
0 26 if (link[0] === '/'){
0 33 return link;
0 35 return this.post.create(data.path);
0 37 }, callback);
0 38 });"

1 1 var stat = results[0],
1 2 meta = yfm(results[1]),
1 3 meta_ = meta.toString(),
1 6 meta.source = path;
1 7 meta.raw = results[0] || stats.ctime;
1 8 if (meta.updated) meta.updated = moment(meta.updated) || stats.ctime;
1 9 if (!_.isDate(meta.updated)) meta.updated = moment(meta.updated) || stats.ctime;
1 10 var compiled = swig.compile(meta._content)(data);
1 11 compiled.replace(/<\\/?notextile>/g, '');
1 12 if (meta.updated) meta.updated = _.isDate(meta.updated)? meta.date : moment(meta.updated);
1 13 if (!path) return callback();
1 14 var result = [
1 15 '---',
1 16 'layout: post',
1 18 '123'
1 19 ].join('\
1 20 ');
1 21 result.push(result);
1 22 var compiled = yaml.load(result);
1 23 _.each(meta.docs, function(item, i){
1 24 doc.replace(/<\\/?notextile>/g, '');
1 25 });
1 26 if (meta.tags) result.push(meta.tags);
1 27 result.push(result.map(function(item){
1 28 return {
1 29 name: item,
1 30 permalink: config.root + item + ':' + item
1 31 };
1 33 content = result.replace(/([\
1 34 \\r\
1 35 ]+/g, '');
1 36 result.push(content);
1 37 instanceof File = function(path, doc){
1 38 if (!doc) return callback();
1 39 if (~path.indexOf('/')) return callback();
1 40 var src = pathFn.join(hexo.base_dir, path);
1 41 path.substring(0, src.length - extname.length + 1) + getOutput(path);
1 42 return result;
1 44 module.exports = function(data, callback){
1 45 var Page = hexo.model('Page'),
1 46 path = data.path;
1 47 if (data.type === 'delete'){
1 48 if (doc){
1 49 Page.remove(doc);
1 51 return callback();
1 55 };"

2 2 link = data.read;
2 3 if (data.stat){
2 4 if (data.stat.mtime.getTime() === data.stat.mtime.valueOf()){
2 5 return callback(null, data.content);
2 7 if (data.stat.njk){
2 8 if (data.stat.mtime.value === data.stat.value){
2 11 return callback(new Error('Return callback must be a function');
2 14 if (!pointer instanceof File){
2 15 return callback(new Error('No such file or directory'));
2 17 var path = data.path;
2 20 hexo.route.remove(path);
2 21 doc.remove();
2 23 return callback(null, doc);
2 26 if (data.type === 'update'){
2 28 hexo.route.set(path, function(fn){
2 29 fn(null, doc);
2 32 var content = function(){
2 33 fn(null, Page);
2 37 return Promise.all([
2 38 fs.exists(path),
2 39 fs.readFile(path)
2 40 ]).spread(function(exist, data){
2 41 exist.should.be.false;
2 42 data.content.should.eql(content);
2 43 next();
2 46 })
3 4 if (data.error){
3 5 next(null);
3 7 data.error = err.message;
3 10 data.stat(next);
3 12 data.message = 'Site updated:'+ moment(data.date.valueOf() + ') + ':'+ data.date.valueOf() + '});
3 14 if (data.updated){
3 15 data.updated = data.date.valueOf() + ':'+ data.date.valueOf() + '\
3 16 ';
3 18 if (data.permalink){
3 19 data.path = data.permalink;
3 20 delete data.permalink;"

4 2 link = Page.findOne({source: path}),
4 3 meta = yfm(results.read);
4 4 meta.content = meta._content;
4 5 delete meta._content;
4 7 meta.raw = results.read;
4 8 if (meta.date){
4 9 if (!(meta.date instanceof Date)){
4 10 meta.date = moment(meta.date, 'YYYY-MM-DD HH:mm:ss').toDate();
4 13 meta.date = stat.ctime;
4 15 if (meta.updated){
4 16 if (!(meta.updated instanceof Date)){
4 17 meta.updated = moment(meta.updated, 'YYYY-MM-DD HH:mm:ss').toDate();
4 20 meta.updated = stat.mtime;
4 22 if (meta.permalink){
4 23 var link = meta.permalink;
4 24 delete meta.permalink;
4 26 var link = path;
4 28 var results = Page.findOne({source: path});
4 29 if (!results.length) return callback();
4 30 meta.permalink = (data.path).replace(/\\/?$/, '');
4 31 meta.permalink = data.permalink
4 32 .replace(/:\\/?/g, '_')
4 33 .replace(/:\\?.*$/, '');
4 34 if (!meta.length){
4 36 var content = require('./remove');
4 37 meta.content = content.replace(/:\\u2028/g, '\\\\u2028');
4 39 meta.content = results.slice(0, 1);
4 41 if (meta.length){
4 42 return Promise.resolve(options[0]);
4 44 return read(data.source, callback);
4 47 module.exports.read = function(data, callback){
4 48 var config = hexo.config,
4 49 root = hexo.base_dir;
4 50 var baseDir = root + '_posts';
4 51 var posts = Post.create(data.source, config);
4 52 posts.forEach(function(post){
4 53 Post.create(baseDir, post);
4 54 var tags = post.tags;
4 55 if (tags.length){
4 56 var data = posts.tags;
4 57 posts.tags.forEach(function(tag){
4 58 data.tags.tags.tags.push(data, tag = tag);
4 59 var newTags = posts.push(data);
4 60 if (!paths = root + '/'---'

5 2 link = page.permalink;
5 4 if (data.id === data.id){
5 5 data.id = data.id;
5 7 data.id = stats.id;
5 10 data.save();
5 12 if (data.updated) data.updated = data.updated;
5 14 data.updated = stats.mtime;
6 5 file.write(data.id, data.id);
6 7 File.write(data.id, data.id);
6 10 if (!self.headerSent){
6 11 self.removeHeader('Content-Disposition');
6 12 self.removeHeader('Content-Length');
6 13 self.removeHeader('Transfer-Encoding');
6 15 if (data.fn){
6 17 self.removeHeader('Content-Type');
6 27 if (data.err){
6 28 if (err) return callback(err);
6 29 self.headerSent);
7 2 link = Page.findOne({source: path});
7 4 if (data.id === data._id){
7 5 data.id = data._id;
7 8 if (data.stat.length){
7 9 file.readFile(data.path, next);
7 11 file.readFile(data.path, function(err, content){
7 13 var result = yaml.parse(content);
7 14 result.set('title', data.path);
7 15 result.set('date', date.format('YYYY-MM-DD HH:mm:ss'));
7 16 file.write(result);
7 17 setTimeout(function(){
7 18 file.stat(next);
7 19 }, next);
7 22 }).load(function(err){
7 25 result.should.not.exist(data.path);
7 47 result.set('content', data.path);
7 60 file.readFile(data.path, function(new Buffer(content){
7 61 content);
7 62 content.encoding = new Buffer(content);
7 63 content.encoding = content.encoding = content.encoding.encoding;
7 64 content.should.should.equal('utf8');
7 65 content.should.equal('utf8');
7 68 content.should.equal(content);
8 2 link = page.content,
8 8 meta.permalink = config.root + data.permalink;
8 9 if (!pathFn.extname(meta.permalink) &&!pathFn.extname(meta.permalink)){
8 10 meta.permalink = ':year/:month/:day/:title';
8 12 if (!data.date) return callback();
8 13 var stats = page.stats;
8 14 meta.categories = {
8 15 name: 'Category',
8 16 path: path,
8 17 permalink: config.root + data.permalink + '/'
8 19 meta.tags = [];
8 20 page.date.toDate = function(date){
8 22 if (data.categories) return callback();
8 23 if (data.tags) return callback();
8 24 var categories = page.categories;
8 25 meta.categories.forEach(function(cat){
8 26 if (cat.name === cat.name){
8 27 return db.model('Category', cat.name);
8 29 var newCat = cat.parent;
8 30 newCat.path = cat.path;
8 31 newCat.permalink = cat.permalink;
8 32 categories[cat.name] = newCat;
8 36 var tags = page.tags;
8 37 meta.tags = tags;
8 40 meta.categories.forEach(function(category){
8 41 if (category.categories) return db.model('Category', category.categories);
8 43 if (data.tags) return db.model('Tag', category.tags);
8 45 if (data.categories) return db.model('Category', data.categories);
8 47 meta.path = data.path;
8 48 meta.permalink = config.root + cat.permalink;
8 50 if (data.tags) return db.model('Tag', data.tags);
9 3 metaFile = pathFn.join(data.source, metaFile);
9 6 meta.excerpt = meta.excerpt;
9 7 meta.more = content;
9 8 meta.more = function(err, content){
9 10 if (results.length){
9 11 var results = results[0],
9 13 meta = meta.content;
9 16 meta.raw = results[0];
9 17 meta.date = _.isDate(meta.date)? moment(meta.date) : moment(meta.date, 'YYYY-MM-DD HH:mm:ss');
9 18 meta.updated = moment(stats.mtime);
9 20 if (!_.isDate(meta.updated)) meta.updated = moment(meta.updated, 'YYYY-MM-DD HH:mm:ss');
9 24 var mtime = meta.date.toDate();
9 25 if (mtime.hasOwnProperty(meta.date)){
9 26 meta.date = new Date(mtime);
9 28 if (meta.updated) meta.updated = date.toDate();
9 29 if (meta.comments) meta.comments = true;
9 30 var result = {_: \'date:mtime\', time: mtime};
9 31 if (meta.layout) meta.layout = \'post\';
9 32 if (meta.date) meta.date = new Date(mtime);
9 33 if (meta.updated) meta.updated = moment(stats.mtime);
9 35 if (meta.layout) meta.layout = \'draft\';
9 36 if (!_.isDate(meta.updated)) meta.updated = moment(stats.mtime);
9 38 if (meta.tags) meta.tags = [];
9 39 meta.categories = [];
9 40 meta.permalink = \':year/:month/:day/:title/\';
9 41 meta.permalink = \':title/: function(str){
9 42 return str.replace(/\\/index\\d{4}/g, \'<\\d{2}/g, \'()\').replace(/g, \'()\');
9 44 if (!pathFnif (!isWildcard(meta.test.length) meta.length) meta.unshift());
9 45 if (options.skip('_index.length) meta.skip_link = \'at(567456456456456)
9 46 == undefined);
9 47 if (skip_categories.length === 0) meta.skip_id = \'@_id/: undefined/gi);
9 48 var redirecting_source = \'\';
9 49 var 4000 = \'\';
9 50 var redirecting_to_source = \'\';
9 51 var ql;
9 53 return Promise.equals(directing_source, redirecting_to_source, 1);
9 54 if
