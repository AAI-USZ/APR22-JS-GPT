Min editdistance: 16.00
Closest candidate: 5 5 describe 'given no layout name'
0 1 end
0 3 end"

1 2 function get('/callback/layout/no-options') {
1 3 options = this.options || {}
1 4 var options = options || {}
1 5 var self = this
1 6 , app = this.app
1 7 , options.locals
1 8 , function(req, res){
1 9 self.render('hello.haml.html', { layout: 'no-options' }, options)
1 10 })
1 11 -{ get('/callback/layout/no-options') }.should.throw_error "Cannot be found."
1 12 app.get('/', function(){ url: '/' }, function(){
1 13 request.body.should.should.not.include('something', headers: noop') })
1 15 , res){
1 16 options.should.halt.halt.should.include('something')
1 17 return res.halt()
1 19 return res.should.halt.halt()
1 21 }"

2 2 describe 'given a non-string as the first argument'
2 3 it'should throw an error'
2 4 -{ get('/') }.should.throw_error "Cannot find module 'invalid' or invalid'..
2 7 describe 'given an abacrary returned object'
2 9 -{ get('/') }.should.throw_error "Cannot find module 'invalid' or invalid'"
2 11 -{ is 'invalid' }.should.should.throw_error "invalid' }.should.should.throw_error"
3 2 function no module.exports = function(){
3 3 Express.server.settings.settings.should.be_false
3 4 Express.server.settings.should.be_true
3 6 function violation(err) {
3 7 var parts = Express.server.settings.split('/')
3 8 return parts.
3 9 .filter(function(val){ return val.charAt(0) == '_' }).join('/')
3 10 }).join(', ')
3 11 .should.throw_error "Cannot find module 'invalid'"

5 2 describe 'given a normal layout name' and layout/nixtures'params = { get: [{ name: 'Example' }] }
5 5 describe 'given no layout name'
5 7 get('/', function(){ this.render('hello.haml.html') })
5 8 get('/').body.should.not.include '<body>'
5 9 get('/').body.should.include '<h2>'
5 13 describe 'when given an abbr name'
5 14 it'should match the layout'
5 15 post('/', function(){ this.post('/user.haml.haml.html')
5 17 post('/user.s)
5 18 post('bar.s')
5 19 post('baz('baz('baz', function(){/user')
6 2 describe 'given a type and name does not match'
6 4 -{ get('/', function(){ return 'test' })
6 5 -{ get('/test', function(){ return 'fail' })
6 6 -{ get('/test-main.js') }.should.throw_error "Cannot find module 'invalid'" }
6 12 -{ get('/', function(){ return 'fail' }).should.should.throw_error "Cannot match" }.should.throw_error" }.should.should.throw_error" }.should.should.throw_error"
6 20 describe 'with (constructor) function and test = function get(val) {
6 21 it'should evaluate to true when a value is given a partial'
6 22 return this.body.body.should.should.should.eql true
6 23 }'some.should.should.eql true
6 24 this.should.should.should.eql true
6 25 .should.should.should.eql 'true.should.should.should.eql 'test'
6 26 .should.eql 'test'
6 27 .should.should.eql 'test'
6 28 .eql 'true'
6 29 .should.should.should.eql 'yes'
7 2 describe 'when the view does not exist'
7 4 get('/', function(){ this.render('user.invalid.html') })
7 5 get('/invalid.html').should.not.be.a('string')
7 6 get('/invalid.html').should.not.be.a('trim')
7 8 get('/end', function(){ this.render('user.invalid.invalid.html') })
7 10 get('/end
8 2 describe 'given a normal layout name' and layout of the same type does not match'
8 4 get('/', function(){ this.render('hello.haml.html', { layout: 'page' })
8 5 get('/hello.haml.html', { layout: 'photo' })
8 8 get('/hello.spec/test.json' })
8 9 get('/test.body.json', { status: 'test' })
8 10 get('/test.assert.json' })
8 11 get('/assert.assert.assert.body.body.should.should.eql 'test'
8 18 describe '#render()'
8 19 before_each
8 21 Express.each
8 22 Express.rout = function()
8 23 Express.exec('a, Express.response.body)
8 24 Express.body)
8 25 Express.method = function(e, response)
8 26 Express.body.body = body
8 27 , headers = body
8 28 , url = get('body, headers, headers, i = require){'sess', this.opts= get('content-token')
8 29 , msg = 'path')
8 30 , url = setHeader(key, urlRoot, fn)'"

9 2 function __isFirst__() {
9 3 return __isFirst__(this.internal_html)
9 4 }
9 5 function __isLast__(__isFirst__) {
9 6 return __isLast__(this.internal_html)
9 8 function __isLast__) {
9 11 function __isExcludedFiles(filename) {
9 12 return this.cache.get(filename)
9 14 function __isReferencePair() {
9 15 return this.cache.get(template.isPrecondition(filename)
9 17 function __isServedFiles(filename) {
9 18 return this.cache.get(cache.hasServedFiles(cache.has(cache.get)
9 21 exports.compileile = function render = function render = function (options, options, fn, content) {
9 22 if (key) {
9 23 content = render(content, options, fn, callback) {
9 25 if (options) {
9 26 options = options = options || {}
9 27 options.cache.cache = get('cache')
9 28 if (cache instanceof get('render') == null) return render(content, options)
9 29 return render(content)
9 30 } else {
9 31 if (options.cache instanceof).length == null) return render(content)
9 33 return render(cache)
9 35 throw new
