Min editdistance: 15.00
Closest candidate: 0 3 var pathFn = require(\'path\');
0 1 var Promise = require(\'bluebird\');
0 2 var fs = require(\'hexo-fs\');
0 3 var pathFn = require(\'path\');
0 4 var testUtil = require(\'../../util\');
0 5 describe(\'asset\', function(){
0 6 var Hexo = require(\'../../../lib/hexo\');
0 7 var hexo = new Hexo(pathFn.join(__dirname, \'asset_test\'), {silent: true});
0 8 var generator = require(\'../../../lib/plugins/generator/asset\').bind(hexo);
0 9 var Asset = hexo.model(\'Asset\');
0 10 function checkStream(stream, expected){
0 11 return testUtil.stream.read(stream).then(function(data){
0 12 data.should.eql(expected);
0 13 });
0 14 }
0 15 before(function(){
0 16 return fs.mkdirs(hexo.base_dir).then(function(){
0 17 return hexo.init();
0 20 after(function(){
0 21 return fs.rmdir(hexo.base_dir);
0 23 it(\'renderable\', function(){
0 24 var path = \'test.yml\';
0 25 var source = pathFn.join(hexo.base_dir, path);
0 26 var content = \'foo: bar\';
0 27 return Promise.all([
0 28 Asset.insert({_id: path, path: path}),
0 29 fs.writeFile(source, content)
0 30 ]).then(function(){
0 31 return generator(hexo.locals);
0 32 }).then(function(data){
0 33 data[0].path.should.eql(\'test.json\');
0 34 data[0].data.modified.should.be.true;
0 36 Asset.removeById(path),
0 37 fs.unlink(source)
0 38 ]);
0 41 it(\'not renderable\', function(){
0 42 var path = \'test.txt\';
0 44 var content = \'test content\';
0 51 data[0].path.should.eql(path);
0 59 it(\'skip render\', function(){
0 76 it(\'skip render failed to render\', function(){
0 77 var path = \'test.json\';
0 78 return Promise.then(function(){
0 79 return Promise.should.should.not.not.exist(function(){
0 81 return Promise.should.should.should.fail(function(){
0 82 return Promise.called;
0 86 }).then.should.should.should.throw(function(error.should.then(function(){
0 87 return require(\'should.should.called)
0 88 .should.should.should.fail.should.be.false;
0 89 }).should.should.throw.should.should.false;
0 92 it(\'skip render.should.should.should.should.should.should.be.false;
0 94 it(\'skip.
1 1 const cheerio = require(\'cheerio\');
1 2 describe(\'link\', () => {
1 3 const link = require(\'../../../lib/plugins/tag/link\');
1 4 it(\'text + url\', () => {
1 5 const $ = cheerio.load(link(\'http://zespia.tw\'.split(\' \'), \'\'));
1 6 $(\'a\').attr(\'href\').should.eql(\'http://zespia.tw\');
1 7 $(\'a\').attr(\'target\').should.eql(\'_blank\');
1 9 it(\'text + url + external\', () => {
1 10 let $ = cheerio.load(link(\'http://zespia.tw\'.split(\' \'), \'\'));
1 13 $(\'a\').attr(\'title\').should.eql(\'http://zespia.tw\');
1 15 it(\'text + url + title\', () => {
1 16 const $ = cheerio.load(link(\'http://zespia.tw My blog\'.split(\' \'), \'\'));
1 18 $(\'a\').attr(\'title\').should.eql(\'My blog\');
1 20 it(\'text + url + external + title\', () => {
1 21 let $ = cheerio.load(link(\'http://zespia.tw My blog\'.split(\' \'), \'\'));
1 26 it(\'text + url + title + external + link\', () => {
1 32 });'

2 1 var should = require(\'chai\').should();
2 5 var defaultConfig = require(\'../../../lib/hexo/default_config\');
2 6 var dateFormat = 'YYYY-MM-DD HH:mm:ss\';
2 7 var newPostName = defaultConfig.new_post_name;
2 8 describe(\'post\', function() {
2 10 var baseDir = pathFn.join(__dirname, \'post_test\');
2 11 var hexo = new Hexo(baseDir);
2 12 var post = require(\'../../../lib/plugins/processor/post\')(hexo);
2 13 var process = Promise.method(post.process.bind(hexo));
2 14 var pattern = post.pattern;
2 15 var source = hexo.source;
2 16 var File = source.File;
2 17 var PostAsset = hexo.model(\'PostAsset\');
2 18 var Post = hexo.model(\'Post\');
2 19 function newFile(options) {
2 20 var path = options.path;
2 21 options.path = (options.published? \'_posts\' : \'_drafts\') + \'/\' + path;
2 22 options.source = pathFn.join(source.base, options.path);
2 23 options.params = {
2 24 published: options.published,
2 25 path: path,
2 26 renderable: options.renderable
2 27 };
2 28 return new File(options);
2 30 before(function() {
2 31 return fs.mkdirs(baseDir).then(function() {
2 35 after(function() {
2 36 return fs.rmdir(baseDir);
2 38 it(\'pattern\', function() {
2 39 pattern.match(\'_posts/foo.html\').should.eql({
2 40 published: true,
2 41 path: \'foo.html\',
2 42 renderable: true
2 44 pattern.match(\'_drafts/bar.html\').should.eql({
2 45 published: false,
2 46 path: \'bar.html\',
2 49 it(\'asset - post_asset_folder enabled\', function() {
2 50 hexo.config.post_asset_folder = true;
2 51 var body = [
2 52 \'title: "Hello world"\',
2 53 \'published: false\',
2 54 \'---\'
2 55 ].join(\'\
2 56 \');
2 57 var file = newFile({
2 61 renderable: false
2 63 return process(file).then(function() {
2 64 var id =\'source/\' + file.path;
2 65 should.not.exist(PostAsset.findById(id));
2 68 it(\'asset - type: create\', function() {
2 72 path: \'bar.html\'
2 74 var postId =\'source/\'source/\' + file.path.should.eql;
2 75 return fs.writeFile(file.source, \'foo
2 76 ].join(postId, \'\');
2 78 it.skip(\'skipCustomAsset = function() {
2 79 it.skipCustom();
3 2 describe(\'iframe\', () => {
3 3 const iframe = require(\'../../../lib/plugins/tag/iframe\');
3 4 it(\'url\', () => {
3 5 const $ = cheerio.load(iframe([\'http://zespia.tw\', \'500']));
3 6 $(\'iframe\').attr(\'src\').should.eql(\'http://zespia.tw\');
3 7 $(\'iframe\').attr(\'width\').should.eql(\'100%\');
3 8 $(\'iframe\').attr(\'height\').should.eql(\'300\');
3 9 $(\'iframe\').attr(\'frameborder\').should.eql(\'0\');
3 10 $(\'iframe\').attr(\'allowfullscreen\').should.eql('');
3 12 it(\'width\', () => {
3 13 const $ = cheerio.load(iframe([\'http://zespia.tw\', \'500\', \'600\']));
3 15 $(\'iframe\').attr(\'width\').should.eql(\'500\');
3 16 $(\'iframe\').attr(\'height\').should.eql(\'600\');
3 20 it(\'height\', () => {
3 21 const $ = cheerio.load(iframe(\'http://zespia.tw\', \'500\', \'600\'.split(\' \')));
4 1 var stripIndent = require(\'strip-indent\');
4 2 var util = require(\'hexo-util\');
4 3 var highlight = util.highlight;
4 4 var rBacktick = /(\\s*)(`{3,}|~{3,}) *(.*) *\
4 5 ([\\s\\S]+?)\\s*\\2(\
4 6 +|$)/g;
4 7 var rAllOptions = /([^\\s]+)\\s+(.+?)\\s+(https?:\\/\\/\\S+|\\/\\S+)\\s*(.+)?/;
4 8 var rLangCaption = /([^\\s]+)\\s*(.+)?/;
4 9 function backtickCodeBlock(data) {
4 10 var config = this.config.highlight || {};
4 11 if (!config.enable) return;
4 12 data.content = data.content.replace(rBacktick, function() {
4 13 var args = arguments[2];
4 14 var content = arguments[3];
4 15 var options = {
4 16 gutter: config.line_number,
4 17 tab: config.tab_replace
4 19 if (args){
4 20 var match;
4 21 if (rAllOptions.test(args)){
4 22 match = args.match(rAllOptions);
4 23 } else if (rLangCaption.test(args)){
4 24 match = args.match(rLangCaption);
4 26 options.lang = match[1];
4 27 if (match[2]){
4 28 options.caption = \'<span>\' + match[2] + \'</span>\';
4 29 if (match[3]){
4 30 options.caption += \'<a href="\' + match[3] + \'">\' + (match[4]? match[4] : \'link\') + \'</a>\';
4 33 content = highlight(stripIndent(content), options)
4 34 .replace(/{2,}/g, \'&#123;\')
4 35 .replace(/}/g, \'&#125;\');
4 36 return start.replace(/\
4 37 \
4 38 <escape>\' + highlight(content, options)
4 39 .replace(/</g, \'&#123;\')
4 40 .replace(/]/g, \'&#125;\');
4 43 module.exports = backtickCodeBlock;'

5 1 const { htmlTag } = require(\'hexo-util\');
5 2 function iframeTag(args) {
5 3 const url = args[0];
5 4 const width = args[1] && args[1]!== \'default\'? args[1] : \'100%\';
5 5 const height = args[2] && args[2]!== \'default\'? args[2] : \'300\';
5 6 const attrs = {
5 7 src: url,
5 8 width: width,
5 9 height: height,
5 10 title: title,
5 11 alt: alt,
5 12 source: url
5 14 return htmlTag(\'img\', attrs);
5 16 module.exports = iframeTag;'

6 2 function vimeoTag(id) {
6 3 const src = \'https://player.vimeo.com/video/\' + id;
6 4 const iframeTag = htmlTag(\'iframe\', {
6 5 src,"

7 2 var htmlTag = util.htmlTag;
7 3 var rUrl = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[.\\!\\/\\\\w]*))?)/;
7 4 var rMeta = /["\']?([^"\']+)?["\']?\\s*["\']?([^"\']+)?["\']?/;
7 5 function imgTag(args, content) {
7 6 var classes = [];
7 7 var meta = \'\';
7 8 var width;
7 9 var height;
7 10 var title;
7 11 var alt;
7 12 var src;
7 13 var item = \'\';
7 14 for (var i = 0, len = args.length; i < len; i++) {
7 15 item = args[i];
7 16 if (rUrl.test(item)) {
7 17 src = item;
7 18 break;
7 19 } else {
7 20 if (item[0] === \'/\') {
7 24 classes.push(item);
7 27 args = args.slice(i + 1);
7 28 if (args.length) {
7 29 if (!/\\D+/.test(args[0])) {
7 30 width = args.shift();
7 31 if (args.length &&!/\\D+/.test(args[0])) {
7 32 height = args.shift();
7 35 meta = args.join(\' \');
7 37 if (meta && rMeta.test(meta)) {
7 38 var match = meta.match(rMeta);
7 39 title = match[1];
7 40 alt = match[2];
7 42 var attrs = {
7 43 src: src,
7 44 class: classes.join(\' \'),
7 48 alt: alt
7 52 module.exports = imgTag;'

8 1 function jsfiddleTag(args, content){
8 2 var id = args[0];
8 3 var tabs = args[1] && args[1]!== \'default\'? args[1] : \'js,resources,html,css,result\';
8 4 var skin = args[2] && args[2]!== \'default\'? args[2] : \'light\';
8 5 var width = args[3] && args[3]!== \'default\'? args[3] : \'100%\';
8 6 var height = args[4] && args[4]!== \'default\'? args[4] : \'300\';
8 7 return \'<iframe scrolling="no" width="\' + width + \'" height="\' + height + \'" src="http://jsfiddle.net/\' + id + \'/embedded/\' + tabs + \'/\' + skin + \'" frameborder="0" allowfullscreen></iframe>\';
8 9 module.exports = jsfiddleTag;'

9 1 var cheerio;
9 2 function tocHelper(str, options) {
9 3 options = options || {};
9 4 if (!cheerio) cheerio = require(\'cheerio\');
9 5 var $ = cheerio.load(str);
9 6 var headingsMaxDepth = options.hasOwnProperty(\'max_depth\')? options.max_depth : 6;
9 7 var headingsSelector = [\'h1\', \'h2\', \'h3\', \'h4\', \'h5\', \'h6\'].slice(0, headingsMaxDepth).join(\',\');
9 8 var headings = $(headingsSelector);
9 9 if (!headings.length) return \'\';
9 10 var className = options.class || \'toc\';
9 11 var listNumber = options.hasOwnProperty(\'list_number\')? options.list_number : true;
9 12 var result = \'<ol class="\' + className + \'">\';
9 13 var lastNumber = [0, 0, 0, 0];
9 14 var firstLevel = 0;
9 15 var lastLevel = 0;
9 16 var i = 0;
9 17 headings.each(function() {
9 18 var level = +this.name[1];
9 19 var id = $(this).attr(\'id\');
9 20 var text = $(this).html();
9 21 lastNumber[level - 1]++;
9 22 for (i = level; i <= 5; i++) {
9 23 result += \'</li></ol>\';
9 25 if (firstLevel) {
9 26 for (i = level; i < lastLevel; i++) {
9 29 if (level > lastLevel) {
9 30 result += \'<ol class="\' + className + \'-child">\';
9 32 result += \'</li>\';
9 35 firstLevel = level;
9 37 result += \'<li class="\' + className + \'-item\'+ className + \'-level-\' + level + \'">\';
9 38 result += \'<a class="\' + className + \'-link" href="#\' + id + \'">\';
9 39 if (listNumber) {
9 40 result += \'<span class="\' + className + \'-number">\';
9 41 for (i = firstLevel - 1; i < level; i++) {
9 42 result += lastNumber[i] + \'.\';
9 44 result += \'</span> \';
9 46 result += \'<span class="\' + className + \'-text">\' + text + \'</span></a>\';
9 47 lastLevel = level;
9 49 if (lastLevel) {
9 50 result += \'<a class="\' + className + \'-" title="\' + lastLevel + \'">\';
9 52 return result;
9 54 module.exports = tocHelper;'

