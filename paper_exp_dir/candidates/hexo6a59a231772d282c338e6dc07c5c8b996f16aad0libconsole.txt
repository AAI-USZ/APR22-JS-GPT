Min editdistance: 11.00
Closest candidate: 4 26 module.exports = function(args){
0 1 var config = hexo.config,
0 2 extend = hexo.extend,
0 3 domain = extend.domain.create();
0 4 if (!config) return next();
0 5 hexo.extend.console.register('test', function(args){
0 6 if (!args._.length){
0 7 hexo.call('help', {_: ['test']}, function(){
0 8 return args.pop();"

1 1 require('../config')(process.cwd(), next);
1 2 },
1 3 function(next){
1 4 require('../loader')(next);
1 6 function(){
1 7 var list = require('../extend').console.list(),
1 8 keys = Object.keys(list);
1 9 if (keys.indexOf(command) === -1){
1 10 var maxLen = 0,
1 11 result = [],
1 12 length = 0;
1 13 list.sort(function(a, b){
1 14 var nameA = a.name,
1 15 nameB = b.name;
1 16 if (nameA.length >= nameB.length && maxLen < length){
1 17 maxLen = length;
1 18 results.push(list[nameA] - b[0]);
1 19 }
1 20 if (maxLen < length){
1 21 result += '\
1 22 More info: http://zespia.tw/hexo/docs/cli.html\
1 23 ';
1 24 } else {
1 25 result += dump[nameA];
1 27 if (result.length){
1 32 result += dump[name]
1 34 });
1 35 next();
1 36 }, callback);
1 38 ], function(){
1 39 list.push({
1 40 command: key,
1 41 args: [
1 42 {
1 43 path: baseDir + 'list',
1 44 commands: Object.keys(list)
1 47 var command = require('../commands').shift(),
1 48 list = hexo.extend.console.list(),
1 49 commands = helps.sort(function(a, b){
1 50 var orderA = a[0],
1 51 orderB = b[0];
1 52 if (orderA.length >= orderB.length && maxLen < orderA.length){
1 53 var length = orderA.length - length;
1 54 commands.push({
1 55 name: key,
1 56 commands: commands,
1 57 options: options
1 60 keys.push({
1 70 if (orderA < orderB) return -1;
1 71 else if (orderA > orderB) return 1;
1 72 else return 0;
1 74 list.forEach(function(item){
1 75 var padding = length - item[0].length - 2;
1 76 var rule = {
1 77 excerpt: ''
1 78 };
1 79 for (var i=0; i<length; i++){
1 80 var item[i] = item[i];
1 81 if (rule.exec(item[0])){
1 82 var options = _.extend({}, item);
1 83 if (options.excerpt){
1 84 item[0] = options.excerpt;
1 86 item[1] = options.content;
1 89 if (options.top){
1 90 item[0].top = options.length - 1;
1 93 queue.splice(0);
1 97 };"

2 4 require('../theme').init(next);
2 7 require('../generate')(process.cwd(), next);
2 12 if (_.indexOf(keys, 'length')!== -1){
2 14 result = '\
2 15 Usage: hexo <command>\
2 16 \
2 17 Commands:\
2 19 var helps = [
2 20 ['version', 'Display version'],
2 21 ['help', 'Display help']
2 22 ];
2 23 _.each(list, function(val, key){
2 24 helps.push([key, val.description]);
2 26 helps = helps.sort(function(a, b){
2 29 if (orderA.length >= orderB.length && maxLen < orderA.length) maxLen = orderA.length;
2 30 else if (maxLen < orderB.length) maxLen = orderB.length;
2 34 _.each(helps, function(item){
2 35 result +=''+ item[0].bold;
2 36 for (var i=0; i<maxLen + 3 - item[0].length; i++){
2 37 result +='';
2 39 result += item[1] + '\
2 45 console.log(result);
2 47 list[command](args);
2 51 extend.console.register('server', 'Run server', function(args){
2 53 domain = hexo.debug;
2 54 if (!config ||!config.server){
2 55 var help = [
2 56 'Example:',
2 57 '  deploy:',
2 58 '    type: rsync',
2 59 '   host: <host>',
2 60 '    user: <user>',
2 61 '   root: <root>',
2 62 '   port: [port] # Default is 22',
2 63 '   delete: [delete] # Default is true',
2 64 '    delete: [delete] # Default is true',
2 65 '',
2 66 'More info: http://zespia.tw/hexo/docs/cli.html\
2 67 ');
2 69 console.log(help.join('\
2 70 '));
3 1 var files = _.extend({}, next);
3 2 console.log('Loading.');
3 3 require('../config')(process.cwd(), {}, function(){
3 41 module.exports = function(){
3 42 var hexo = global.hexo = new Hexo(__dirname + '/../../scripts/server.js');
3 43 if (!config.server) return;
3 44 var list = route.list(),
3 47 async.each(keys, function(item, next){
3 48 list[item](function(err, result){
3 49 if (err) throw err;
3 50 if (result.skipped){
3 51 result.success = true;
3 52 } else if (result.success){
3 53 result.skipped = false;
3 55 result.success = 0;
3 57 result.log('server listening on port 3000');
4 1 var files = _.clone(this.data);
4 2 async.forEach(files, function(item, next){
4 3 if (_.isObject(item)){
4 4 var lang = item.locale(lang);
4 5 if (lang){
4 6 var obj = require('./' + item);
4 7 obj.language = lang;
4 9 var lang = 'default';
4 11 if (_.isString(obj)){
4 12 obj.language = obj.language;
4 14 obj.language = obj.language || 'default';
4 17 }, function(){
4 18 this.load(lang);
4 19 }, next);
4 21 var keys = Object.keys(this.data);
4 22 for (var i in keys){
4 23 this.data[i] = this.data[i];
4 26 module.exports = function(args){
4 27 var val = args._.pop();
4 28 if (!val) return next(new Error('Val is not defined');
4 29 var target = this.data.substr(0, target.length - extname.length);
4 30 if (!data.length) return next(new Error('No data found for'+ target));
4 31 this.each(function(item){
4 32 if (item.substr(0, target.length - extname.length){
4 33 this.update(item);
4 35 this.insert(item);
4 38 console.log(val);
5 4 if (!config){
5 7 'You should configure deployment settings in _config.yml first!',
5 9 'Available Types:',
5 10 ' '+ Object.keys(deployer).join(', '),
5 13 'For more help, you can check the online docs:'+ 'http://zespia.tw/hexo/'.underline
5 17 return next();
5 20 return hexo.emit('ready');
5 23 if (!Array.isArray(config)) config = [config];
5 24 var posts = [
5 26 id: 'posts',
5 27 title: 'Deployment',
5 28 ags: ['- foo', 'bar']
5 31 id: 'drafts',
5 32 title: 'Post-Type',
5 33 ags: ['- bar']
5 36 return posts.map(function(post){
5 37 var path = post.params.path;
5 38 if (!path) return next();
5 39 var data = Post.findOne({source: path});
5 40 data.tags.forEach(function(tag){
5 41 if (!data.length) return;
5 42 post.remove(data.path);
5 44 return;
5 47 return hexo.post.remove = next();
5 50 return Post.remove({source: path});
5 55 hexo.emit('ready');
5 60 args = args, callback = args.join(' '),
5 61 log = args.shift(),
5 62 config = args.length? args.join(' ') : ['config', 'log', config],
5 63 mode = args.mode? args.mode : config.markCaptured? true : false,
5 64 logFormat = args.ltime? args.time : config.logtime.createFormat;
5 65 if (!config.auto_spacing) config.auto_spacing = false;
5 66 var args = _.toArray(arguments),
5 67 path = args.shift(),
5 68 str = '',
5 69 self = this;
5 70 for (var i=0, len=args.length; i<len; i++){
5 71 var item = args[i];
5 72 if (item.substr(0, 1) === '.'){
5 73 path = item;
5 74 break;
5 77 if (args.g || args.generate){
5 78 log.setFormat(':level :config.log_format'), args.message);
5 80 log.setFormat(':message');
5 82 log.setLevel(config.logLevel(config.archive, config.archive);
5 83 logger_format);
5 85 config.logger_format = log;
5 87 var posts = posts.sort(function(callback){
5 88 return callback();
6 44 var keys = Object.keys(list);
6 45 console.log(keys);
6 47 list[item] = item;
6 49 console.log(list);
6 74 helps.forEach(function(item){
7 1 var questions = _.compact([
7 2 {id: 'framework', options: ['jasmine'], name: 'qunit', answers: [ 'jasmine','qunit'], version: '0.0.0'},
7 3 {id: 'other', options: [ 'different'], name: 'updates', [ '0.0.0'}
7 4 ]), {
7 5 id: 'exclude',
7 6 question: 'Should any of the files included by the previous patterns be excluded?',
7 7 hint: 'You can use glob patterns, eg. "**/*.swp".\
7 8 ' +
7 9 'Enter empty string to move to the next question.',
7 10 multiple: true,
7 11 validate: validatePattern,
7 12 condition: function(answers) {return answers.requirejs;}
7 13 }, {
7 14 id: 'includedFiles',
7 15 question: 'Which files do you want to include with <script> tag?',
7 16 hint: 'This should be a script that bootstraps your test by configuring Require.js and\'+
7 17 \'kicking __karma__.start(), probably your test-main.js file.\
7 19 \'Enter empty string to move to the next question.\',
7 24 id: \'files',
7 25 question: \'Which files do you want to test-main.js?',
7 26 hint: \'You can use glob patterns, eg. "**/*.swp".\
7 27 \' +
7 30 validate: validatePattern
7 32 id: \'exclude',
7 33 question: \'Should you exclude from the previous patterns be excluded?',
7 40 id: \'autoWatch',
7 41 question: \'Do you want Karma to watch all the files and run the tests on change?',
7 42 hint: \'Press tab to list possible options.\',
7 43 options: [\'yes\', \'no\'],
7 44 boolean: true
7 45 }];
7 46 var StateMachine = function(rli, colors){
7 47 var currentQuestion;
7 48 var answers;
7 49 var currentOptions;
7 50 var currentOptionsPointer;
7 51 var pendingQuestionId;
7 52 var done;
7 53 this.onKeypress = function(key) {
7 54 if (!currentOptions ||!key) {
7 57 if (key.name === \'tab\' || key.name === \'right\' || key.name === \'down\') {
7 58 this.suggestNextOption();
7 59 } else if (key.name === \'left\' || key.name === \'up\') {
7 60 currentOptionsPointer = currentOptionsPointer + currentOptions.length - 2;
7 63 if (!key.ctrl &&!key.meta && key.name!== \'enter\' && key.name!==\'return\')) {
7 64 key.name = \'escape\';
7 67 this.onLine = function(line){
7 68 line = line
7 69 return line
7 70 .split('\
7 72 ').join('^\
7 73 ').join(line);
7 75 .replace(/})
7 76 .replace(/g, line)
7 84 .split('/g, line)
7 85 .split('^').join(line);
7 86 .split('\\r").join(line);
7 89 this. onDeployer = function(line){
7 90 return line? line : line
8 5 log = hexo.log,
8 7 default = config.default;
8 8 if (debug){
8 9 var now = new Date(),
8 10 cache = {};
8 11 if (config.language){
8 12 config.language = config.language;
8 16 if (config.server){
8 18 logger = hexo.log,
8 20 if (config.logger_format){"

9 1 var files = _.clone(files);
9 2 if (files){
9 3 _.each(files, function(val, i){
9 4 var lang = file.languages[i];
9 6 var lang = lang.toLowerCase();
9 7 if (Array.isArray(config.language)){
9 8 lang = config.language[i];
9 10 lang = config.language;
9 17 var scaffoldDir = hexo.scaffold_dir;
9 18 file.dir(scaffoldDir, function(files){
9 20 var scaffold = _.clone(files);
9 21 file.copy(scaffoldDir + item, scaffold, next);
9 25 var scaffoldPath = path.join(hexo.base_dir, item);
9 26 file.dir(scaffoldPath, function(files){
9 29 file.copy(scaffoldPath + item, scaffoldPath, next);
9 33 ], callback);
9 39 module.exports = function(args, callback){
9 43 default = config.defaults? default.config : hexo.config,
9 44 root = config.root;
9 46 hexo.call('help', {_: ['new']}, callback);
9 49 if (args.length){
9 50 if (!/^\\w+/.test(args[0])){
9 51 nextend = args.pop();
