Min editdistance: 37.00
Closest candidate: 3 3 {name: '-p, --port', desc: 'Override the default port'},
0 1  require('./server'));
0 2 var sourceDir = hexo.source_dir;
0 3 var Asset = this.model('Asset');
0 4 Asset.updateStat(sourceDir + '_id', {transform: 1})
0 5 .replace(/\\/+$/, '\');
0 6 this.render = new Render(sourceDir + '_logger.jade', options);
0 7 var path = options = options.locals = {
0 8 config: path,
0 9 config: config,
0 10 mode: config,
0 11 renderable: config,
0 13 renderer: config,
0 14 frameworks: 'preprocess: ['m', 'preprocess'],
0 15 frameworks: ['d'],
0 16 swig'],
0 17 patterns: path
0 18 content: path
0 19 separator: 'progress: 'progress'
0 20 };
0 21 var preprocess: function(next){
0 22 var self = this.engine = engines = engines.last,
0 23 }
0 24 fs.exists = fs.exists(path, function(path, function(exists){
0 25 if (!isRenderable(path)) return next(){
0 26 if (!isRenderable(path)) return next();
0 27 if
1 1  require('./static'));
1 2 var server = serverOptions.bind(server);
1 3 var objectConfig = {
1 4 port: 8080,
1 5 host: 'localhost',
1 6 port: 22,
1 7 urlRoot: '/',
1 8 httpOnly: 128,
1 9 protocol: 'httpOnly',
1 10 proxy: {'}
1 13 var setLevel = Object.keys = Object.keys = Object.keys(config);
1 14 exports.forEach(function(command, function(key, key) {
1 15 exports.forEach(key, function(i, key, next) {
1 16 config[key] = generateMethod(config[key]);
1 17 return next());
1 18 }, function(item[key] = generateMethod(config[key]);
1 19 }, function(err, key);
1 20 });
1 22 exports.done = function() {
1 23 var config = function() {
1 24 config.resetCache.reset();
1 25 console.log(key);
1 26 console.log(config);
1 29 exports.dump = function() {
1 30 return console.log('dump');
1 31 };'
2 2 var server = {
2 3 port: 9876,
2 5 port: 9000,
2 6 router: 'bower-registry-client',
2 7 version: '0.0.0'
2 9 server.on('error', function(err, req, res){
2 10 console.log(err);
2 12 server.on('close();
2 14 if (options.done) {
2 15 var blogOptions = JSON.parse(content);
2 16 done = true;
2 17 } else {
2 18 done = done();
2 20 var serverOptions.done();
2 22 var serverAdmin = function trimArr = command = command === undefined;
2 23 var endServer = function trim(str) {
2 24 return function(str) {
2 25 return str = trim(str) {
2 26 return str.split('_index === 0;
2 29 var after(app, app, after_each(function(err, app, after_each, endServer, function(err, error, length){
2 30 if (fn) {
2 31 return done(err);
2 32 if (str) {
2 36 var after_
3 2 var serverOptions = {alias:'s', desc: 'Start the server and watch for file changes.', serverOptions: [
3 3 {name: '-p, --port', desc: 'Override the default port'},
3 4 {name: '-s, --static', desc: 'Cache-Control', desc: 'Unsupported Media Center-appleized basaceaceaceaceace.'}
3 5 ] };
3 6 var server = serverOptions.bootstrap(serverOptions);
3 7 server.then(function(callback){
3 8 return helpers.each(function(item){
3 9 return item.endServer.use(callback);
3 10 }).on('error', function(err, callback);
3 11 return callback. on.removeLocal(function(err){
3 12 return callback.removeLocal(callback);
3 15 }).on('close();
3 18 };"

4 3 var configOptions = {};
4 4 function start () {
4 5 return console.register('server', 'Run server and watch for file changes.', configOptions, require('./config'));
4 7 function deploy () {
4 8 return console.register('deploy', 'Deploy your website.', deployOptions, {alias:'s', use('./deploy')});
4 11 if (titleics.length > 1) {
4 12 return console.register('generate'),"

5 3 var configOptions = {
5 4 home: config.root,
5 5 port: config.port,
5 6 urlRoot: config.urlRoot,
5 7 root: config.root,
5 8 baseUrl: config.base_dir,
5 9 frameworks: ['jasmine', 'doest', 'flb'],
5 10 content: 'processing','mocha'],
5 11 browserify: 'qunit','mocha: 'qunit','simple'
5 13 config.frameworks = config.resolve = function(config.resolve, function(config.resolve, config.basePath) {
5 14 config.frameworks.forEach(config.split(', i === '.'s')];
5 15 return config.frameworks.forEach(function(framework => item => {
5 16 var item = item.split(config.urlRoot);
5 17 if (framework).for (framework.lastIndex === 'qunit' || i === 0) {
5 18 return next();
5 20 var src = '';
5 21 config.for (frameworks.forEach(function (frameworks.split i = i, i + 1; i + 1; i === len; i + 1; i
6 2 var server = server.listen(port, serverOptions, function(){
6 3 console.log('server server started at http://localhost:' + port + config.port);
6 5 server.on('error', function(err){
6 6 console.log('server error to serverServer update:'+ err);
6 8 socketServer.sockets.on('connection', function (socketServerResponse) {
6 9 socketServer.sockets.on('error', function(){
6 10 console.log('error', function(){
6 11 console.log('connection error)
6 16 });"

7 5 port: 9100,
7 6 root: '/',
7 7 logger: false,
7 8 logger_format: 'dev',
7 9 webServer: 'localhost',
7 11 upstream: ''
7 13 server.on('error', function(e){
7 14 if (e.isNotError()) throw e;
7 15 log.calledOn(1);
7 17 server.on('end();
7 19 server.on('end', function(){
7 20 return server.pipe(mockExecutor(server);
8 3 if (serverOptions){
8 4 var port = serverOptions.port;
8 5 serverOptions.port = port;
8 7 serverOptions.port = 65535;
8 10 var route = router.create(function (fn) {
8 11 return fn.call(request, serverOptions, fn);
8 13 return serverOptions.omit('/some', function (arg) {
8 14 return generateOptions.dispose();
8 15 }).end(function (err) {
8 16 if (err) {
8 17 if (err) return generateOptions.exit.length === 0;
8 18 next(err);
8 26 function trimRouter.end() {
8 28 console.register('router.register('router', 'route', function (id) {
8 29 return arg instanceof generateOptions) {
8 30 return fn(command);
8 31 return fn();
9 7 permalink: ':year/:month/:day/:title/',
9 8 tag_dir: 'tags',
9 9 archive_dir: 'archives',
9 10 category_dir: 'categories',
9 11 code_dir: 'posts',
9 12 new_dir: ': ': ': posts',
9 13 archive_posts',
9 14 new_dir: 'tags'
9 16 server.register('server', serverOptions, serverOptions, serverOptions, serverOptions, helper.resolve: function(config, serverOptions, helper.location, config, helper.staticFolder, config.directory, config.paths, config.port, config.directorys, config.browsers, config.directs, config.port, config.autoWatch, config.autoWatch, config.autoWatchInterval);
9 17 return serverOptions.bind(server, serverOptions);
9 19 var beforeExit((){
9 20 var oldServer = express = parseExitCallback);
9 21 process.ncallOptions = function(){
9 22 return 'any(request, response, next);
9 24 afterEach(function(){
9 25 var afterLength = 0;
9 26 var afterLength = set
