Min editdistance: 3.00
Closest candidate: 5 1 this.registry = new RegistryClient({
0 1  this.config.registry = true; });
0 2 });
0 3 it('should set default registry config', function () {
0 4 expect(this.config.registry).to.deep.equal(this.conf);
0 6 it('should set default search config', function () {
0 9 it('should set default register config', function () {
0 12 it('should set default publish config', function () {
0 13 expect(this.config.registry).to.deep.equal(this.config.registry);
0 15 it('should set default cache path config', function () {
0 16 expect(this.config.cache).to.deep.equal(this.config.cache);
0 18 it('should set default timeout config', function () {
0 19 expect(this.config.timeout).to.equal(this.timeoutVal);
0 21 it('should set default strictSsl config', function () {
0 22 expect(this.config.strictSsl).to.equal(this.config.strictSsl);
0 24 });"

1 1  this.config = {}; }
1 3 it('should set default registry settings', function () {
1 5 expect(this.config.registry).to.deep.equal(this.config);
1 24 expect(this.config.timeout).to.deep.equal(this.config.timeout);
1 28 expect(this.config.strictSsl).to.be.false;
2 1  'client = { search: 'https://bower.herokuapp.com' };
2 2 client.search = 'https://bower.herokuapp.com'
2 3 client.options = {};
2 4 client.type = 'conf';
2 5 client.name = 'prompt';
2 6 client.url = this.uri;
2 8 client.type = 'after_post_render';
2 9 client.time = 5000;
2 10 client.error = 'timeout';
2 11 client.pending = true;
2 12 this.conf = {};
2 18 expect(this.config.registry).to.deep.equal(this.uri);
2 27 expect(typeof this.config.cache ==='string').to.be.ok;
3 1  - {});
3 4 expect(this.registry).to.deep.equal(this.conf);
3 8 expect(this.registry).to.deep.equal(this.uri);
3 27 expect(this.registry).to.deep.equal(this.timeoutVal);
3 37 it('should have a lookup prototype method', function () {
3 38 expect(RegistryClient.prototype).to.have.property('lookup');
3 40 it('should have a search prototype method', function () {
3 41 expect(RegistryClient.prototype).to.have.property('search');
3 43 it('should have a register prototype method', function () {
3 44 expect(RegistryClient.prototype).to.have.property('register');
3 46 it('should have a clearCache prototype method', function () {
3 47 expect(RegistryClient.prototype).to.have.property('clearCache');
3 49 it('should have a resetCache prototype method', function () {
3 50 expect(RegistryClient.prototype).to.have.have.property('resetCache');
4 1 'some-client' is a valid registry field, true);
4 4 expect(this.config.registry).to.deep.equal([
4 5 this.conf || this.conf.registry
4 6 ]);
4 11 this.conf.registry
4 13 expect(this.config.registry).to.deep.equal(this.config.registry)
4 17 expect(this.config.registry).to.deep.equal(this.config.registry), 'https://bower.herokuapp.com');
4 23 expect(this.config.cache).to.deep.equal([
4 24 this.config.cache
4 28 expect(this.timeoutVal).to.equal(this.timeoutVal);
5 1 this.registry = new RegistryClient({
5 2 strictSsl: false,
5 3 timeout: this.timeoutVal
5 5 this.conf = {
5 6 search: [this.uri],
5 7 register: this.uri,
5 8 publish: this.uri
5 9 };
5 24 expect(this.registry).to.deep.equal(this.cache);
5 36 expect(this.registry).to.deep.equal(this.config);
7 11 describe('instantiating a client without custom options', function () {
7 12 it('should provide an instance of RegistryClient', function () {
7 13 expect(this.registry).to.be.ok;
7 16 expect(this.registry._config.registry).to.deep.equal(this.conf);
7 19 expect(this.registry._config.registry.search[0]).to.equal(this.uri);
7 22 expect(this.registry._config.registry.register).to.equal(this.uri);
7 25 expect(this.registry._config.registry.publish).to.equal(this.uri);
7 28 expect(this.registry._config.cache).to.equal(this.conf);
7 31 expect(this.registry._config.timeout).to.equal(this.timeoutVal);
7 34 expect(this.registry._config.strictSsl).to.be.false;
8 1  this.config.client = {
8 8 beforeEach(function () {
8 9 nock('https://bower.herokuapp.com:443')
8 10 .get('/')
8 11 .expect('client', 'https://bower.herokuapp.com/this'));
8 13 it('should set properties correctly', function () {
8 14 this.config.client = {
8 21 this.config.ca = {
8 48 it('should set default cache methods', function () {
8 49 this.config.cache = {
8 55 it('should set default timeout', function () {
8 56 this.config.timeout = {
8 57  timeout: 20000,
8 58 registry: {
8 62 }
8 66 this.config.strictSsl = {
