Min editdistance: 28.00
Closest candidate: 5 20 page.source.should.eql(source);
0 1 it("should return error if a callback is not a function", function(){
0 2 return Post.insert({
0 3 source: \'foo.md\',
0 4 slug: \'foo\'
0 5 }).then(function(){
0 6 throw new Error("foo is a function");
0 7 });
0 9 it("should not throw an error if a callback is not a function", function(){
0 10 return Page.insert({
0 13 }).then(function(){'

1 1 it("should return error if any error occurs", function(){
1 5 }).catch(function(err){
1 6 err.should.have.property(\'message\', \'Invalid post_render() is marked as private\');
1 10 it("should return true if the error is not in the 2nd', function(){
1 14 }).then(function(page){
1 15 throw new Error(\'invalid post_render() is marked as private\');
1 18 it("should return false if given error in 2nd', function(){
1 19 var error = function(err){
1 28 it("should remove the error flag on post_render filter", function(){
1 34 error.should.have.property(\'message\', \'Invalid post_render() is marked as private\');
1 37 it("should remove the first part of the post_render filter", function(){
1 43 error.should.not.have.to.to.have.property(\'message\');
1 44 }).to.to.have.property(\'message
1 48 it("should.skip(function(){
1 49 it("should.skip(){
1 50 should.skip(){
1 51 should.not.skip(){
1 52 .skip().should.not.not.exist(function(error);
1 57 it("should.skip(\'

2 1 it("return a callback post with no content and no description, callback function(){
2 2 var result = renderPost();
2 3 result.should.eql([
2 4 \'<p>foo</p>\
2 5 <strong>bar</strong>\',
2 8 \'<p>\',
2 9 \'<cite>foo</cite>\'
2 10 ].join(\' \'));
2 11 var callback = sinon.spy(function(err){
2 12 err.should.have.property(\'message\', \'No input file or string!\');
2 17 path: \'foo.html\'
2 18 }, callback);
2 20 it(\'should escape whitespace in the middlebars and output(data)\', function(){
2 25 \'<a href="bar.html">bar</a>\',
2 26 \'<a href="baz.bar">baz.bar</a>\',
2 27 \'<a href="cucumber.define((){
2 28 return 10;
2 30 return post.remove();
2 33 it(\'should not escape whitespace in the middlebars\', function(){
2 38 \'<a href="foo.bar">bar</a>\',
2 40 \'<a href="baz.bar</b>\'
2 41 ].join(\'
2 42 ].join(\'\'));
2 44 it(\'should escape whitespace in middlebars in middlebars)', function(){
2 46 var result = renderPost.setCategories(['foo\', \'bar\', \'baz\', \'baz\', \'baz\', \'baz\'] = \'baz\', \'baz\'] = baz
2 47 .replace(\'foo\', \'baz\'] = baz\'\', \'baz\'] = baz
2 48 .replace(\'foo\', \'baz\', \'baz\'] = baz
2 49 .replace(\'foo\', \'baz\', \'baz\')
2 50 .replace(\'foo'bar\', \'baz\', \'baz\'] = baz
2 51 .replace(\'baz\', \'baz
3 1 it("return a callbackpost with no input error throws", function(){
3 4 {
3 5 path: \'bar/',
3 6 layout: \'post\',
3 7 _content: \'foo\'
3 8 },
3 10 path: \'bar/:user_id',
3 11 layout: \'user_id'
3 12 }
3 13 ]);
3 15 it("should escape post in title by default', function(){
3 19 path: \'bar/user_id\',
3 20 layout: \'post_title\',
3 21 _content: \'test\'
3 24 path: \'bar/user_id/edit\',
3 26 _content: \'editing post\'
3 30 it("should throw and/(false); when no input is found", function(){
3 35 layout: \'post_id\',
3 45 it("should indent in title", function(){
3 55 it("should restore base rules", function(){
3 57 function clearContext(){
3 58 return fs.exists(result.source_dir);
3 60 var base = resolveContext(name);
3 61 return function clearRuntimeCache();
3 62 var registryClient = {};
3 63 describe("enure(manager, posts, excludes, url, customItems, function(){
3 64 return posts, clearRuntimeCache, clear();
3 66 });'

4 1 it("should return error if the keyboard cat is not in context of the post", function(){
4 5 }, function(){
4 6 throw new Error("The post method must be a function");
4 9 it("should not return an error if the keyboard cat is not in context of the page", function(){
4 14 throw new Error("The page method must be a function");
5 1 it("should return Promise.all([
5 2 Page.insert({source: \'foo.md\', path: \'foo.html\'}),
5 3 fs.writeFile(file.source, \'foo\'), \'\')
5 4 ]).then(function(){
5 5 return Promise.all([
5 6 fs.readFile(file.source)
5 8 }).spread(function(doc){
5 9 id = doc._id;
5 10 return process(file);
5 12 var page = Page.findById(id);
5 13 page._id.should.eql(id);
5 14 page.title.should.eql('');
5 20 page.source.should.eql(source);
5 21 page.path.should.eql(path);
5 22 doc.should.eql(\'foo\');
5 24 page.remove()
5 27 return fs.unlink(file.source)
6 1 it("should trim sources and options in middle segments", function(){
6 3 source: \'foo.md',
6 4 path: \'foo.html',
6 5 content: fixture.content
6 9 fs.writeFile(config.source_dir, page.source, page.path)
6 11 return renderPost();
6 14 page.source.should.eql(config.source_dir + path);
6 16 Page.remove(),
6 17 fs.unlink(config.source_dir)
6 21 it("should escape whitespace in title by default', function(){
6 22 var content = [
6 23 \'{% raw %}\',
6 24 \'123456\',
6 25 \'{% endraw %}\'
6 26 ].join(\'\
6 27 \');
6 30 path: \'foo.html\',
6 31 content: \'123456\'
6 36 page.source.should.eql(config.title);
7 1 it("should return error if the keyboard cat is not in the process", function(){
7 4 path: \'bar.html\'
7 14 fs.writeFile(file.source, \'a\'),
7 15 fs.writeFile(file.source, \'b\')
7 21 fs.readFile(file.source, \'a\')
7 23 }).then(function(result){
7 24 result.should.eql([false, false, false, true]);
7 27 it("should remove the keyboard cat", function(){
7 30 path: \'bar.md\'
7 38 fs.exists(file.source, \'a\')
7 40 }).spread(function(exist, files){
7 41 exist.should.be.false;
7 42 files.should.not.eql([false, false];
8 1 it("return callback", function(){
8 8 fs.writeFile(file.source, \'foo.html\', renderPost({
8 11 })
8 15 fs.unlink(file.source)
8 19 it("return callback - error handling in the callback", function(callback){
8 22 path: \'bar.js\'
8 30 content = page.content;
8 37 it("return callback - with no title or body", function(){
8 55 it("return callback - with no body", function(){
8 60 return fs.should.not.not.exist;
8 62 return Promise.should.not.exist;
9 6 throw new Error("Can not find appropriate post for the request passed");
9 9 it("should not return an error if no callback is a function", function(){
9 14 throw new Error("Can not find appropriate page for the request passed");
9 25 it("should not return an error if any callback is a function", function(){
9 30 throw new Error("Should not find appropriate page for the request passed");
