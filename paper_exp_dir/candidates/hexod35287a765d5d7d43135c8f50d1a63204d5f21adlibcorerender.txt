Min editdistance: 44.00
Closest candidate: 1 1 var ext = data.engine || getExtname(data.path);
0 1 var path = data.path;
0 2 var text = '';
0 3 var ext = '';
0 4 var result = '';
0 5 var self = this;
0 6 if (data.text){
0 7 text = data.text;
0 8 } else if (data.path){
0 9 text = file.readFileSync(data.path);
0 10 } else {
0 12 }
0 13 if (!ext ||!self.isRenderable(ext)){
0 14 return next(null, false);
0 16 if (ext && isRenderableSync(ext)){
0 17 return next(null, true);
0 19 return result;
0 20 };"

1 1 var ext = data.engine || getExtname(data.path);
1 3 var renderer = hexo.extend.renderer.get(ext, true);
1 4 return renderer.call(this, data, options);
1 6 return text;
2 2 if (data.path){
2 3 text = data.path;
2 7 return;
2 11 return renderer({
2 12 path: data.path,
2 13 text: text
2 14 }, options);
3 1 return data? data.paths.unshift(0, options.paths.length) : data.paths.unshift(options.extends);
4 3 var result = {};
4 10 };
4 11 var renderSync = exports.renderSync = function(data, options){
4 13 var text = this.text;
4 18 var text = this. text;
4 20 var text = this. text;"

5 2 var split = data.split;
5 3 if (ext && isRenderableSync(split)){
5 6 return view.renderSync({
5 7 path: split[0],
5 8 text: split[1]
6 2 var locals = this.app.locals[ext] || {};
6 3 var viewDir = this.app.view_dir || getExtname(data.path);
6 4 var viewName = this.isRenderableSync(ext)? view : view.source;
6 5 var localsSync = this.isRenderableSync(ext)? localsSync : {};
6 6 if (options.only){
6 7 text = text.replace(/([\\u4e00-\\u9fa5\\u3040-\\u30FF])([a-z0-9@#&;=_\\[\\$\\%\\^\\*\\-\\+\\,\\.\\/(\\\\)\\?\\:\\\'\\"\\[\\]\\(\\)])/ig, '$1 $2')
6 8 .replace(/([a-z0-9#!~&;=_\\]\\,\\.\\:\\?\\$\\%\\^\\*\\-\\+\\)\\/])([\\u4e00-\\u9fa5\\u3040-\\u30FF])/ig, '$1 $2');
6 11 text = '';
6 12 } else if (options.only){
6 13 text = another.stringify(options.only);
6 17 if (options.gutter){
6 18 var line = options.gutter;
6 19 if (line.length <= 1){
6 20 var tabs = line.length = 1;
6 22 var first_ = '';
6 23 var tabs = '';
6 24 var first_pop = '';
6 26 for (var i = lineNum = '';
6 27 if (first_first_pop()!== 1){
6 28 } = _.length = _pop();
6 30 return i > 0;
6 32 var line_next = _next = '';
6 34 }'

7 3 var result = _.extend({
7 8 var renderer = hexo.extend.renderer.get(ext);
7 9 return renderer? renderer.output : data.path;
8 1 var text = getExtname(data.path);
8 3 var result = {path: data.path, text: text};
