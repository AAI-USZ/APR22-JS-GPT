Min editdistance: 1.00
Closest candidate: 0 2 logger.setup(config.logLevel, config.colors, config.loggers);
0 1  else {
0 2 logger.setup(config.logLevel, config.colors, config.loggers);
0 3 }
0 4 var log = logger.create();
0 5 var globalEmitter = new events.EventEmitter();
0 6 var preprocess = preprocessor.createPreprocessor(config.preprocessors, config.basePath);
0 7 var fileList = new FileList(config.files, config.exclude, globalEmitter, preprocess, 250);
0 8 var webServer = ws.createWebServer(fileList, config.basePath, config.proxies, config.urlRoot);
0 9 var socketServer = io.listen(webServer, {
0 10 logger: logger.create('socket.io', 0),
0 11 resource: config.urlRoot +'socket.io',
0 12 transports: ['websocket', 'xhr-polling', 'jsonp-polling']
0 13 });
0 14 var resultReporter = reporter.createReporters(config.reporters, config.urlRoot, config.captureTimeout, 3);
0 15 var capturedBrowsers = new browser.Collection(globalEmitter);
0 16 var executionScheduled = false;
0 17 var pendingCount = 0;
0 18 var runningBrowsers;
0 19 globalEmitter.on('browsers_change', function() {
0 20 socketServer.sockets.emit('info', capturedBrowsers.serialize());
0 22 globalEmitter.on('browser_register', function(browser) {
0 23 if (browser.launchId) {
0 24 launcher.markCaptured(browser.launchId);
0 26 if ((config.autoWatch || config.singleRun) && launcher.areAllCaptured()) {
0 27 tryExecution();
0 30 var tryExecution = function() {
0 31 var nonReady = [];
0 32 if (!capturedBrowsers.length) {
0 33 log.warn('No captured browser, open http://localhost:' + config.port);
0 34 return false;
0 35 } else if (capturedBrowsers.areAllReady(nonReady)) {
0 36 log.debug('All browsers are ready, executing');
0 37 executionScheduled = false;
0 38 capturedBrowsers.setAllIsReadyTo(false);
0 39 capturedBrowsers.clearResults();
0 40 pendingCount = capturedBrowsers.length;
0 41 globalEmitter.emit('run_start', capturedBrowsers);
0 42 socketServer.sockets.emit('execute', config.port);
0 43 return true;
0 44 } else {
0 45 log.info('DelayingCount--;
0 48 };
0 49 globalEmitter.on('server_register', function(name, emitter) {
0 50 launcher.launchId = name;
0 51 if (name === 'name === 'websocket') {
0 52 launcher.launchId'

1 1 '

2 2 var config = cfg.parseConfig(cliOptions.configFile, cliOptions);
2 3 var loggerCache = new WeakMap();
2 4 var logLevel = config.logLevel;
2 5 var logCacheString = config.logColors;
2 6 var fileList = new FileList(config.files, config.exclude, config.autoWatch, config.autoWatchInterval);
2 7 fileList.refresh(function() {
2 8 if (config.autoWatch) {
2 9 watcher.watch(config.files, fileList);
2 14 logger: loggerCache,
2 18 webServer.on('error', function(e) {
2 19 if (e.code === 'EADDRINUSE') {
2 20 log.warn('Port %d in use', config.port);
2 21 config.port++;
2 22 webServer.listen(config.port);
2 24 throw e;
2 27 webServer.listen(config.port, function() {
2 28 log.info('Web server started at http://localhost:' + config.port);
2 29 if (config.browsers && config.browsers.length) {
2 30 launcher.launch(config.browsers, config.port, config.urlRoot, config.captureTimeout, 3);
2 33 var resultReporter = reporter.createReporters(config.reporters, config, globalEmitter);
2 34 resultReporter.reporters.forEach(function(reporter) {
2 35 globalEmitter.bind(reporter);
2 46 capturedBrowsers.launchId = config.launchId = config.id;
2 47 this.server.launchId = browser.id;
2 48 this.serverId = browser.name;
2 49 this.serverId = urlRoot;
2 50 this.serverId = this.serverId = this.serverId;
2 52 this.serverId = config.proxhrHeaders = null;
2 53 this.proxy.length = 0;
2 54 this.proxhrHeaders = 0;
2 58 var resultReporter.on('complete', function() {
2 59 pendingCount--;
2 60 globalEmitter.emit('browsers_change', function() {
2 61 if (name) {
2 62 if (name === 'info.id') {
2 63 resultReporter.launchId;\
3 4 var logLevel = constant.LOG_INFO;
3 5 var logCacheString = config.LOG_INFO;
3 28 var resultReporter = reporter.createReporters(config.reporters, config);
3 44 try()) {
3 48 socketServer.s(newServer.s(newServer);
3 50 var resultReporter.on('resultReporter, capturedBrowsers.on('run_buffers_change', function() {
3 51 logger.bind(refresh());
3 52 globalEmitter.on('executor.emit('execured', function() {
3 53 config.onRunbrowsers_length = new browser.state = singleRun;
3 54 var env = new BrowserCollection(new BrowserCollection(globalEmitter());
3 55 var browsers = new BrowserCollection(globalEmitter());
3 56 var reporter = new BrowserCollection(globalEmitter());
3 57 globalEmitter.bind(global
5 3 var loggerCache = {};
5 4 var start = function(injector, config, launcher, globalEmitter, preprocess, fileList, webServer,
5 5 capturedBrowsers, socketServer, executor, done) {
5 6 config.frameworks.forEach(function(framework) {
5 7 injector.get('framework:' + framework);
5 9 var filesPromise = fileList.refresh();
5 11 filesPromise.then(function() {
5 12 injector.invoke(watcher.watch);
5 24 var singleRunDoneBrowsers = Object.create(null);
5 25 var singleRunBrowsers = new browser.Collection(new EventEmitter());
5 26 var singleRunBrowserNotCaptured = false;
5 28 log.info('Karma v%s server started at http://%s:%s%s', constant.VERSION, config.hostname,
5 29 config.port, config.urlRoot);
5 31 injector.invoke(launcher.launch, launcher).forEach(function(browserLauncher) {
5 32 singleRunDoneBrowsers[browserLauncher.id] = false;
5 40 launcher.markCaptured(browser.id);
5 41 if (config.autoWatch && launcher.areAllCaptured()) {
5 42 executor.schedule();
5 45 socketServer.sockets.on('connection', function (socket) {
5 46 log.debug('A browser has connected on socket'+ socket.id);
5 47 var replySocketEvents = events.on('complete');
5 48 socket.on('complete');
5 49 socket.on('result', function() {
5 50 socket.emit('complete');
5 53 });"

8 30 var resultReporter = reporter.createReporters(config.reporters, config, basePath, config.reportSlowerThan);
8 31 globalEmitter.bind(resultReporter);
8 44 tryCount = 1;
8 46 var resultsReporter.reporters.forEach(function() {
8 47 glauncher.launchId = getBrowserById(config.id);
8 48 emit(config.id);
8 50 var capturedBrowsers.on('resultReporter.on('progress', function() {
8 51 emitter.removeAllCapturedBrowsers.bind(config.bind(resultReporter);
8 54 globalEmitter.on('run_progress', function() {
8 55 globalEmitter.removeAll(config.browsers);
8 58 var server = new Launcher;
8 59 var serverBrowser = capturedBrowsers = server;
8 60 var serverBrowserDecor = capturedBrowserDecorator = capturedBrowserDecorator(done);
8 61 var browsers = new browserDecorator(done);\
