Min editdistance: 14.00
Closest candidate: 3 23 var layoutDir = themeDir + 'layout' + sep;
0 1 rendererList.forEach(function(item){
0 2 var source = themeDir + item;
0 3 route.set(source, function(list){
0 4 files.forEach(function(item){
0 5 var dirs = item.split(sep);
0 6 for (var i=0, len=dirs.length; i<len; i++){
0 7 var front = dirs[i].substr(0, 1);
0 8 list[source] = true;
0 9 }
0 10 });
0 11 return swig.compile(rendererList)(compiled);
0 13 };"

1 1 render.renderSync({source: source}, function(err, result){
1 2 if (err) throw err;
1 3 if (result.readable){
1 4 file.dir(layoutDir, callback);
1 5 } else {
1 6 file.dir(layoutDir, function(files){
1 7 var content = result.split(sep);
1 8 for (var i=0, len=files.length; i<len; i++){
1 9 var front = dirs[i].substr(i, len - 1);
1 10 if (front === '_' || front === '.') return false;
1 12 return result;
1 13 }).finally(function(){
1 14 return fs.unlink(layoutDir);
2 1 if (rendererList.hasOwnProperty(extname)){
2 2 return rendererList[extname];
2 4 return require('./renderer/extend');
3 1 compile.render(compiled, extname.substring(1), function(err, result){
3 4 file.dir(layoutDir + item, function(err, content){
3 5 if (err) throw new Error('Failed to read file:'+ layoutDir + item);
3 6 next(null);
3 9 file.copy(layoutDir + item, publicDir + item);
3 10 next();
3 14 var content = file.readFileSync(layoutDir + item);
3 20 }, callback);
3 21 };
3 22 exports.layout = function(callback){
3 23 var layoutDir = themeDir + 'layout' + sep;
3 25 async.forEach(files, function(item, next){
3 29 iffront === '_' || front === '.') return next();
3 31 file.read(layoutDir + item, function(err, content){
4 3 list = list.filter(function(item){
4 4 return {
4 5 name: item,
4 6 path: item,
4 7 layout: item.layout
4 10 return rendererList.compile(source, options);
4 12 exports.layout = function(layoutDir, callback){
4 16 var view = themeDir + item;
4 17 file.copy(view, item, next);
4 18 }, next);
4 20 }], callback);
5 4 return Promise.all([
5 5 fs.exists(layoutDir),
5 6 fs.readFile(layoutDir)
5 7 ]).spread(function(exist, files){
5 8 exist.should.be.true;
5 9 delete themeDir;
5 11 var extname = path.extname(item).substring(1);
5 12 compile(render.compile(themeDir + item, function(err, content){
5 13 if (err) throw new Error('Failed to create renderer not yet');
5 14 var filename = (pkg.tags && item.tags.length? item.tags : [],
5 15 headers = {
5 16 _content: content,
5 17 filename: filename
5 19 render.renderSync(data.toString(), { layout: false })
5 20 .spread(function(stdout, stderr){
5 21 var content = grunt.file.read(gracefulCleanup(content),
5 22 front = '';
5 23 var rendered = swig.compile(content);
5 24 render.compile(rendered, content);
5 34 for (var front = item.length;
5 35 for (backoff item.length - 1;
5 36 item.length == 0;
5 37 for (backoff item[0] = true;
5 40 }, next();
5 41 }, next());
5 44 file.readFile.copy(layoutDir + item, layoutDir + item, layoutDir + item, next);
5 47 async.forEach(layoutDir = function(layoutDir, next){
5 48 var content = function(layoutDir, next){
5 49 var content = pageNumConfig, locals){
5 50 var locals = pageLink = _.getHiddenFile(layoutDir);
5 51 var newLocals = {};
5 52 if (layoutDir){
5 54 var content = layoutDir + item;
5 55 content =
6 1 compile.renderSync({
6 2 path: layoutDir +'source',
6 3 layout: false,
6 4 filename: path,
6 5 locals: {
6 6 hidden: true,
6 7 filename: path
7 4 return fs.readFile(layoutDir + item, function(err, content){
7 5 if (err) throw new Error('Compile Error:'+ rendererList[extname] + '\
7 6 ');
7 7 return content;
8 6 fs.listDir(layoutDir,
8 7 fs.existsSync(path.join(layoutDir, 'layout' + sep))
8 8 ]).spread(function(stdout, stderr){
8 9 return swig.compile(meta(data) + '\
8 10 ';
9 4 var result = [
9 5 'layout:',
9 6 '---',
9 7 'title: {{ title }}',
9 8 'date: {{ date }}',
9 9 'tags:',
9 10 '---'
9 11 ].join('\
9 13 return result.join('\
9 16 exports.layout = function(layout, content){
9 23 if (front === '_' || front === '.') return next();
9 27 var path = item.substring(0, item.length - extname.length);
9 28 file.write(path, content);
