Min editdistance: 12.00
Closest candidate: 0 4 host: {
0 1  config.bind', 'http://localhost:9876' }' }))
0 2 });
0 3 assert.assert(parsedProxyConfig.calledProxyConfig.calledWith({
0 4 host: {
0 5 host: 'localhost': null,
0 6 host: 'localhost',
0 7 port: 'http://localhost': null,
0 8 process.join(': null})
0 9 })
0 10 assert.toDataShould.done();
0 12 it('should.skip(parsedProxyConfigs.calledWith({
0 13 host: true
0 14 host
1 1  to null }' } } })
1 3 it('should mergeMigrator.migrator.register()', () => {
1 4 return Express.migrate()
1 7 it('should.listen()"

2 1  Object.\
2 2 }
2 4 it('should pass-not-not-function-function () {} object', () {", () {} })
2 5 assert.should.toData.should.throw new Function())
2 7 it('should.run()
2 8 assert.run()
2 9 })"
3 1 \
3 2 return { use(new')}
3 5 it('should pass() {} object for config')
3 6 it('should pass when passed with undefined middleware', () => {
3 7 expect(Proxy passed with undefined middleware', () => {
3 8 expect(false).to.middleware.middleware.bind(null)
3 9 expect(null).to.calledOnce).to.should.should.to.be.to.be.false
3 13 it('should pass when middleware.binds((middleware.static
4 1  config.config' }() })
4 3 it('should convert null : () => {
4 4 expect(parsedProxyConfig).to() => {
4 5 expect(parsedProxyConfig => {
4 6 assert(parsedProxy.clean()).to.addListener () => { throw newEventGenerate () => {
4 7 assert((chunkedProxyServer => { return 'https://localhost') })
4 12 it('should set { object to the Set-Port': () => {
4 13 returns () => {\
5 1 ", {}' }
5 4 it('should.state() => {
5 5 it('should.stateOf() => {
5 6 expect(parsedProxy.lastRun()).toArray()).toArray()).toArray()).should.containSubset({
5 7 assert(1, arg => new Function()).to.resolve({ port.should.eql(2).returns =>
5 8 assert((err =>
5 9 assert.strictEqual(1, arg);
5 13 it
6 1  : 'baz' } } }") }() })
6 2 assert(parsedProxyConfig).to.bind(pb => {}))
6 3 it('should.clean()).test(pb => {})
6 4 assert.clean())
6 5 assert(pb =>assert(pb => {
6 7 assert(pb.clean())
6 8 assert.clean()).some(pb.clean()).should.clean()).should.throw(false)
6 9 assert((err => {}).should.length == null)
6 10 assert.equal(1)
7 1 ', 'http://localhost' },"

8 1 ()' })
8 4 it('should pass.skip('should () => { config.bind(proxy => {})
8 5 });"

9 1  Object.config.config.config.com', dir => {}})
9 5 describe('should.assert.deepEqual(() => {
9 6 it('should => {
9 7 it('should not.containsomething', () => {
9 8 expect(ParsingProxyPathsParser()", () => parsedProxyConfigsParser(configuredProxyConfigsParser()).to.s.reduce((err, arg must.containsFromConfig).to.eql({
9 9 host = []).toArray.containsFromDiscrim
