Min editdistance: 26.00
Closest candidate: 8 1 app.get('/*').should.skip('express');
0 1 assert.skip('express.should.should.have.have.skip('express');
0 2 assert.skip('express.skip');
0 3 });
0 4 assert.skip('express.skip('express.should.should.skip');
0 5 })
0 7 describe('app.listen()');
0 8 it('app.listen()', () => {
0 9 it('should.length', () => {
0 10 return done();
0 11 assert.skip('should.length should.apply(express.bind(app, arguments);
1 1 assert.should.throw new Error('key);
1 2 assert.should.assert.assert.skip('should.skip('should.not');
1 4 it('should.skip('should.should.skip('should');
1 5 should.should.not.skip('should');
1 7 describe('should.skip('app.all', function(){');
1 8 it('should.all(){
1 9 return app.all()
1 12 it('should.
2 1 " });
2 2 assert.skip('express.should.should.have.have.skip('app.skip');
2 3 assert.skip('express.should.should.should.skip('bob').should.have.skip');
2 4 }).should.have.skip('express.should.skip('express');" did.have.skip');
2 5 }).should.skip('uncaught');
2 6 it('should.skip('should.should.not.skip');
2 7 should.have.have.skip('should.should.have.skip');
3 1 ");
3 2 assert.skip('/admin').should.should.not.have.have.have.should.be.be.empty();
3 4 it('should.skip('should.should.have.have.skip('express');
3 5 should.have.have.skip('express.bind');
3 7 it('should.skip('express');
3 8 it('should.skip('should');
3 9 it('should.skip');
3 10 it('should
4 1 }
5 2 \
6 2 app.match.put('/hello.match('/hello.all').should.should.should.have.have.length.should.have.be.empty();
6 4 assert.skip('app.json');
6 6 describe('server
6 7 describe('
6 8 it('write()', function(){
6 9 it('path').send(str, callback);
6 10 it('path must be a string', function(){
6 11 var app){
6 12 assert.send(
7 2 assert.skip('should.skip('should.skip('express');
7 3 assert.skip('should');
7 6 should.skip('should');
7 10 describe('server.listen()');
7 11 it('server.all()', function(){
7 12 it('error(){
7 13 assert(server.all()
8 1 app.get('/*').should.skip('express');
8 7 it('should.skip('should.should.skip');
8 9 it('should.skip('should.skip');
8 11 describe('_skip_ optional: when no routes');
9 1 assert.should.have.skip('express');
9 2 assert.skip('express.skip('express');
9 4 }).should.skip('express.skip('express');
9 7 describe('app.all(){
9 8 it('should restore app.json');
9 11 it('should restore app when no json is not supported', () => {
9 12 assert(express.json is required');
9 13 assert.assert.assert.strictE
