Min editdistance: 52.00
Closest candidate: 1 5 it('Should find appropriate json source-pkg-pkg-s', function (an-a');
0 1 assert.on('Should return;
0 2 assert.test.skip('Should resolve()');
0 3 it('Should resolve()');
0 4 assert.skip('Should resolve()');
0 7 assert('Should resolve()'should return resolve()');
0 8 assert('should.skip('should return resolve()');
0 9 assert('should return resolve('should return resolve()');
0 10 assert('should return trim sources must resolve()');
0 11 assert
1 1 it('Should use function () {
1 2 assert.should.not.be.be.an(true);
1 3 });
1 5 it('Should find appropriate json source-pkg-pkg-s', function (an-a');
1 6 assert.object-pkg');
1 7 assert.should.should.toArray.should.contains(pkg =>
1 8 assertEqual(pkg.keys(some-pkg => fs.readFile(pkg.localize());
1 9 assert(pkg.localize());
1 10 assert.id => fs.should.equal
2 1 });"

3 1 assert.assert.resolve();
3 2 it('Should resolve();
3 3 assert.skip('Should resolve() returns the json');
3 4 assert.bind([]);
4 2 it('Should have.skip('Should throw new Error()-specificity should not be one');
4 4 describe('Should throw new Error()');
4 5 it('Should throw new Error() for package-specificity is missing', function (not found', function () => {
4 6 it('Should throw new Error handling', function () => {
4 7 it('should not.throw new Error() => {
4 8 it('should now is found', function () => {
4 9 var error handling.
5 1 "
6 1 it('Should return;
6 2 function test_id () {
6 3 it('Should emit() {
6 4 global.install() { } function-idGenerator; function () { } function-idGenerator;
6 5 global.install();
6 6 get('install() {idGenerator();
6 7 return install();
6 9 install();
6 11 }
6 12 it('Should emit();
8 1 it('Should find appropriate json source-specific reason for json source-omitting for sub/subject-source-segment', function (http://example-media.com/sjquery');
8 2 assert.stringify(pkg);
8 3 assert.deepStrictEqual(function () {
8 4 return function () {
8 5 return Q.resolve(pkg.resolve(pkg);
8 6 return function (pkg) {
8 7 return Q.resolve(pkg);
8 11 assert.deepEqual(pkg,
9 1 it('Should resolve() {
9 2 assert.skip('Should throw 'package-None-None-package-package-retry');" is true');
9 3 assert.assert.should.should.equal(false);
9 4 assert.should.equal(false);
9 5 }).to.throw 'Should resolve();
9 6 }).resolve();
