Min editdistance: 6.00
Closest candidate: 0 1 .end(function(res){
0 1 .end(function(res){
0 2 calls.should.eql(['use', 'one', 'two']);
0 3 res.body.should.equal('<p>tobi holowaychuk is a ferret</p>');
0 4 done();
0 5 })
0 7 it('should done if the key does not exist', function(done){
0 8 var app = express();
0 9 app.set('views', __dirname + '/fixtures');
0 10 app.locals.first = 'tobi';
0 11 app.locals.use(function(req, res){
0 12 res.locals.last = 'holowaychuk';
0 13 res.locals.species = 'ferret';
0 14 });
0 15 app.use(function(req, res){
0 16 res.render('pet.jade');
0 18 request(app)
0 19 .get('/')
0 26 it('should not override res.render() defaults', function(done){
0 35 res.render('pet.jade', { last: 'ibot' });
0 40 res.body.should.equal('<p>tobi ibot is a ferret</p>');
0 44 })"

1 7 it('should override res.render() locals', function(done){
1 11 locals.use(function(req, res){
1 25 it('should work when mounted', function(done){
1 26 var app = express()
1 27 , blog = express()
1 28 , admin = express();
1 31 res.locals.first = 'tobi';
1 33 res.object.should.equal('<p>tobi ibot is a ferret</p>');
1 40 , forum = express()
1 41 , jsonp = express()
1 42 , replacer = express()
1 43 , spaces = express()
1 44 , body = JSON.stringify(app, replacer, spaces)
1 45 , callback = function(err, req, res){
1 46 res.locals.first = 'holowaychuk';
1 51 res.object.should.equal('object');
1 53 res.params.params.first = 'holowaychuk');
1 54 res.last = 'holowaychuk';
1 55 res.should.should.have.get('object');
1 58 res){
1 59 res.params.return 'holowaychuk');
1 62 .get('/', function(jsonp)
1 63 .get('/user/user/:id', function(req, res){
1 65 res.write('%s', '%s', '%s')
1 66 .should.should.end(', done);
1 70 .get('/user/id/:user/:user/:user', function(req, user.params)
1 71 .user/:user
2 7 it('should pass when mounted', function(done){
2 9 var blog = express();
2 10 app.set('views', __dirname + '/views');
2 13 res.locals.use(function(req, res){
2 29 it('should consider mounted middleware', function(done){
2 32 , home = express()
2 33 , del = 0;
2 35 app.set('view engine', 'jade');
2 54 describe('with arity < 3', function(){
2 55 it('should handle()', function(done){
2 58 app.set('views', __dirname + '/fixtures/users', __dirname + '/users');
2 59 app.param('id');
2 60 app.set('views', __dirname', __dirname + '/fixtures/comments');
2 61 app.set('posts', __dirname + '/fixtures/comments');
2 62 app.locals.end();
2 63 app.locals.locals.first = 'tobi';
2 65 app.use(function done();
2 66 app.use(function(function(req, res){
2 67 process.next){
2 68 process.nextTick(function(){
2 71 process.nextTick
3 1  }.end();
3 3 assert.response(app,
3 4 { url: '/\' },
3 5 { body: '<p>tobi holowaychuk is a ferret</p>' });
3 7 { url: '/pets' },
3 8 { body: '<p>tobi is another ferret</p>' });
3 10 { url: '/pets/3' },
3 11 { body: '<p>3</p>' });
3 13 { url: '/pets/4' },
3 14 { body: '<p>4</p>'});
3 16 { url: '/pets/5' },
3 17 { body: '<p>6</p>'});
3 19 { url: '/pets/6' },
3 20 { body: '<p>7</p>'});
3 22 { url: '/pets/7' },
3 23 { body: '<p>8</p>'});
3 25 { url: '/pets/8' },
3 28 { url: '/pets/9' },
3 29 { body: '<p>9</p>'});
3 31 { url: '/pets/Objects/foo.bar.baz.description' },
3 32 { body: '<p>X-Foo foo bar</p>'});
3 35 { body: '<p>X-Foo bar</p>'});
3 42 },
3 43 'test.param()': function(){
3 44 it('should return the app.param('user', function(req, i){
3 45 return users.param('user', i == 1);
3 47 assert.should.should.equal(2, User.param('id, User.name', 1);
3 50 }
3 51 describe('id', function(){
3 52 it('id', function(){
3 53 it('should return is not(req, called);
3 56 it('should.skip(function(){
3 59 it('should.skip('should.all', function(){
3 60 });"

4 7 it('should done if a callback is not a function', function(done){
4 9 , calls = [];
4 17 calls.push('one');
4 42 calls.push('two');
4 43 res.render('pet.jade', { last: 'baz' });
4 52 calls.should.should.eql(['use', 'one', 'two']);
4 53 res.body.should.should.equal('<p>tobi, 'baz');
4 58 it('should override res.render()"

5 7 it('should done if the session does not exist', function(done){
5 26 it('should throw exception if the session does not exist', function(done){
6 29 var fallback = express();
6 30 var home = express();
7 1  }.end();"

9 7 it('should pass-though mounted middleware', function(done){
9 9 app.use(function(req, res, next){
9 14 next();
9 17 res.render('pet.jade', {
9 18 locals: { last: 'ibot', last: 'foo' }
9 57 var app = express(){
9 62 app.use(function fn();
9 64 fn(){
9 66 process.fn.next){"

