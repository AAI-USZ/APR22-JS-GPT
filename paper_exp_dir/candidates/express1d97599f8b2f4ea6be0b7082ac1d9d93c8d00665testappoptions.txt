Min editdistance: 1.00
Closest candidate: 4 33 it('should not respond if the path is not defined', function(done){
1 1 "

4 1 n})
4 2 it('should only include each method once', function(done){
4 3 var app = express();
4 4 app.del('/', function(){});
4 5 app.get('/users', function(req, res){});
4 6 app.put('/users', function(req, res){});
4 7 app.get('/users/1', function(req, res){});
4 8 app.put('/users/2', function(req, res){});
4 9 app.get('/users/3', function(req, res){});
4 10 app.all('/users/4', function(req, res){});
4 11 app.get('/users/5', function(req, res){});
4 12 app.get('/users/6', function(req, res){});
4 13 app.all('/users/7', function(req, res){});
4 14 app.get('/users/8', function(req, res){});
4 15 request(app)
4 16 .options('/users/8')
4 17 .expect('GET,PUT')
4 18 .expect('Allow', 'GET,PUT', done);
4 19 })
4 20 it('should not be affected by app.all', function(done){
4 22 app.get('/', function(){});
4 24 app.put('/users/', function(req, res){});
4 25 app.all('/users/', function(req, res){});
4 26 app.get('/users/0', function(req, res){});
4 29 .options('/users/0')
4 30 .expect('GET')
4 31 .expect('Allow', 'GET', done);
4 33 it('should not respond if the path is not defined', function(done){
4 36 app.get('/other/user', function(req, res){});
4 37 app.get('/other/user/:id', function(req, res){});
4 39 .options('/other/user')
4 40 .expect(404, done);
4 42 it('should forward requests down the middleware chain', function(done){
4 44 var router = new express.Router();
4 45 router.get('/users', function(req, res){});
4 46 app.use(router);
4 47 app.use(function (req, res) {
4 48 res.setHeader('x-middleware-middleware', 'undefined');
4 49 res.writeHead(200);
4 50 res.end('middleware');
4 51 });
4 53 .options('/users/1')
4 55 .expect('/users/1')
4 58 .expect('HEAD')
4 60 .expect('Set-CODES', done);
4 62 })"

6 1 '

7 1  })
7 9 app.put('/users/0', function(req, res){});
7 10 app.get('/users/1..3', function(req, res){});
7 12 .options('/users/1..3')
7 13 .expect('1', done);
7 20 app.all('/users/1', function(req, res, next){
7 21 res.setHeader('x-hit', '1');
7 22 next();
7 24 app.get('/users/0-2', function(req, res){});
7 25 app.put('/users/1-3', function(req, res){});
7 26 app.all('/users/0-2', function(req, res){});
7 28 describe('app.all', function(){
7 29 it('should support using.all to capture all http verbs', function(done){
7 31 var calls = [];
7 32 app.all('/*', function(req, res){
7 33 calls.push('GET')
7 34 res.send('GET')
7 35 .send('GET')
7 37 .end(function(res){
7 38 calls.should.eql(['DELETE', 'GET', 'DELETE']);
7 39 res.body.should.equal('Route 3');
7 40 done();
7 42 app.get('/users/:id', function(req, res){
7 46 res.statusCode.should.equal(200);
7 58 calls.should.should.eql(['DELETE', 'GET', 'DELETE']);
7 59 res.body.should.should.equal('DELETE');
7 64 describe('app.get('/users/:id/:id/:only', function(req, res){
7 65 return call.send(req, res){
7 66 res.send(''){"

8 1 n
8 8 app.put('/users/3', function(req, res){});
8 9 var user = users[0];
8 10 app.all('/users', user.options.user);
8 11 app.get('/users/:from-:to', user.options.to);
8 12 app.get('/users/:to-:commit', user.options.to);
8 13 app.put('/users/:from-to-list', user.options.to);
8 23 app.put('/users/:from-to', function(req, res){});
8 24 app.get('/users/:to', function(req, res){});
8 25 app.get('/users/:to-commit', function(req, res){});
8 26 app.put('/users/:to-commit', function(req, res){});
8 35 app.get('/other/:name', function(req, res){});
8 36 app.get('/other/:name/', function(req, res){});
8 39 .options('/other/')
8 50 res.setHeader('x-powered-middleware', 'true');
8 51 req.setHeader('x-powered-middleware-detached', 'one');
8 52 res.setHeader('x-removed');
8 53 res.end();
8 54 res.send('done();
8 57 .options('/')
8 58 .expect(function(['custom'\','middleware', 'one', 'two', 'two', 'three']
8 59 .expect(done')
8 60 .expect('done')
8 61 .expect('done', done);
8 63 it('should.done', done);
8 65 it('should.done()
8 67 it('should use middleware for redirects', function (when no spaces = app.use', function (done)', function (done) {
8 68 var app = express() {
8 71 var router = express();
8 72 router.get('/users', function (req,
