Min editdistance: 75.00
Closest candidate: 7 22 const page = Page.findOne({source: file.path});
0 1 '

1 1  data.date = toDate(data.date); }
1 2 if (data.updated) { data.updated = toDate(data.updated); }
1 3 return Promise.all([
1 4 fs.writeFile(file.source, data.content),
1 5 Post.insert({
1 6 slug: \'Hello-World\',
1 7 layout: \'draft\',
1 8 _content: \'Hello World\'
1 9 }, function() {
1 11 fs.readFile(file.source, \'utf8\'),
1 13 slug: \'Hello-World\'
1 14 }, function(data) {
1 15 return data.date.format(\'YYYY-MM-DD HH:mm:ss\');
1 16 }).then(data => {
1 17 data.updated.format(\'YYYY-MM-DD HH:mm:ss\');
1 19 post.remove(),
1 20 fs.unlink(file.source)
1 21 ]);
1 22 });
1 23 }
1 24 function processAsset(file) {
1 25 const id = file.source.substring(ctx.base_dir.length).replace(/\\\\/g, \'/\');
1 26 const Asset = ctx.model(\'Asset\');
1 27 const doc = Asset.findById(id);
1 28 if (file.type === \'delete\') {
1 29 if (doc) {
1 30 return doc.remove();
1 32 return;
1 34 return Asset.save({
1 35 _id: id,
1 36 _id: id
1 39 function Asset(id, id, post_id, post_id, post_id, id_id, post_id, post_id, post_id, cleanPost_post_id, cleanPost_s, cleanPost_s, cleanPosts, cleanPosts) {
1 40 const {'

5 1  data.date = toDate(data.date); } else if (info && info.year && (info.month || info.i_month) && (info.day || info.i_day)) {
5 2 data.date = new Date(
5 3 info.year,
5 4 parseInt(info.month || info.i_month, 10) - 1,
5 5 parseInt(info.day || info.i_day, 10)
5 6 );
5 8 if (data.date) {
5 9 data.date = toDate(data.date);
5 11 if (data.updated) {
5 12 data.updated = toDate(data.updated);
5 14 if (data.category &&!data.categories) {
5 15 data.categories = {};
5 16 } else if (data.tags) {
5 17 data.tags = {};
5 18 } else {
5 19 data.tags = [];
5 22 fs.exists(data.path),
5 23 fs.readFile(data.path)
5 24 ]).spread((exist, data) => {
5 25 exist.should.be.true;
5 26 data.categories.forEach(function (cat) {
5 27 if (!cat.length) return;
5 28 const posts = cat.posts.sort(date, -1).pop();
5 29 if (!posts.length) return;
5 30 posts.forEach(post => {
5 31 post.slug = post.path;
5 32 post.categories.path = post.categories.replace(/: cat.path);
5 33 if (!paths.length);
5 34 if (!paths.length) return;
5 35 return Promise.then(() => {
5 36 paths(post.categories(paths[0).then(path => {
5 37 return posts[0).then(paths[0).format(0).format(0).format(path)).format(path)).format(path)).format(path)).format(path)).format(path)).format(path)).format(path)).format(format));
5 38 }).then(() => {
5 39 const posts)).then(() => {
5 40 const rest();
5 41 returns();
5 43 returns.push(post => {
5 44 const posts)).then(post.splice(post => {
5 45 let i.setTags(paths(0));
5 46 const posts)).format(
7 2 if (typeof data.date === \'string\') data.date = {
7 3 type: 'createDate\',
7 4 layout: \'createDate\',
7 5 _content: content
7 6 };
7 8 fs.writeFile(file.source, config.title, data.date),
7 9 Post.insert({source: file.path, slug: config.title}),
7 10 Post.insert({source: file.path, slug: config.title})
7 11 ]).then(() => {
7 12 ctx.page.__super__(content);
7 13 }).thenReturn(data);
7 15 const keys = Object.keys(data);
7 16 let key = keys.length;
7 18 fs.writeFile(file.source, config.title,
7 22 const page = Page.findOne({source: file.path});
7 23 page.date.toDate = toDate(data.date);
7 25 page.date.toDate(),
7 28 const post = Post.findOne({source: file.path});
7 29 post.date.toDate.toDate = toDate = toDate();
7 30 return Promise.now();
7 31 }).then(()).then(() => {
7 33 fs.map([
7 34 ctx.page.map([
7 35 return fs.unlink(file.stat(file.source),
7 36 ctx.stat()
7 37 ]).then(post => fs.stat()).then(post.stat()).should.unlink(file.stat()).finally.finally.called).finally(() => fs.stat.called).then(() => fs.unlink()).finally(() => {
7 38 file.stat.unlink.calledOnce).finally(() => {
7 39 file.});
7 44 it("processPost.prototype.skip("unlink()", () => fs.unlink(file.stat()).should.should.not.not.
9 9 if (time > 1) data.date = stats.birthtime;
9 11 data.date = stats.birthtime;
9 15 if (time > 1) data.updated = toDate(data.updated);
9 16 } else if (time > 0) data.updated = stats.mtime;
9 17 if (data.category) {
9 18 data.categories = data.categories;
9 19 data.tags = data.tags;
9 20 data.comments = data.comments;
9 21 if (data.path) {
9 22 data.path = data.path;
9 23 data.commit = data.commit;
9 26 data.path = null;
9 28 if (data.permalink) {
9 29 data.permalink = config.root + data.permalink;
9 30 delete data.permalink;
9 31 if (config.root) {
9 32 data.paths = data.paths.replace(/: normalize((data.path) => {
9 33 data.paths[data.paths[data.paths[data.path]));
9 37 } else if (data.categories).categories.categories.push(data.categories);
9 38 deql({
9 39 data.categories.categories.next_id: data.paths: data.categories.categories.next_id || data.categories || { return data.categories.categories.categories.next_id ||
9 42 return data.params = data;
9 45 return Promise.then(data => {
9 46 const postDir = Post.insert([
9 47 create({source: file.source, slugize(),
9 48 config, tag }) => {
9 49 return post.setTags(data);
