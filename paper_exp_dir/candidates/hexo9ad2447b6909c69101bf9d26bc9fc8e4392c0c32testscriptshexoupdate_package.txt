Min editdistance: 1.00
Closest candidate: 0 1 var fs = require('hexo-fs');
0 1 var fs = require('hexo-fs');
0 2 var Promise = require('bluebird');
0 3 describe('i18n', () => {
0 4 var Hexo = require('../../../lib/hexo');
0 5 var hexo = new Hexo(pathFn.join(__dirname, 'config_test'), {silent: true});
0 6 var processor = require('../../../lib/theme/processors/i18n');
0 7 var process = Promise.method(processor.process.bind(hexo));
0 8 var themeDir = pathFn.join(hexo.base_dir, 'themes', 'test');
0 9 function newFile(options) {
0 10 var path = options.path;"

1 3 var crypto = require('crypto');
1 4 var dateFormat = 'YYYY-MM-DD HH:mm:ss';
1 5 describe('asset', function(){
1 7 var baseDir = pathFn.join(__dirname, 'asset_test');
1 8 var hexo = new Hexo(baseDir);
1 9 var asset = require('../../../lib/plugins/processor/asset')(hexo);
1 10 var process = asset.process.bind(hexo);
1 11 var source = hexo.source;
1 12 var File = source.File;
1 13 var Asset = hexo.model('Asset');
1 14 var Page = hexo.model('Page');
1 15 function newFile(options){
1 16 options.source = pathFn.join(source.base, options.path);
1 17 options.params = {
1 18 renderable: options.renderable
1 19 };
1 20 return new File(options);
1 21 }
1 22 before(function(){
1 23 return fs.mkdirs(baseDir).then(function(){
1 24 return hexo.init();
1 25 });
1 27 after(function(){
1 28 return fs.rmdir(baseDir);
1 30 it('pattern', function(){
1 31 pattern.match('foo.json').should.have.property('renderable', true);
1 32 pattern.match('foo.txt').should.have.property('renderable', false);
1 33 should.not.exist(pattern.match('foo.txt~'));
1 34 should.not.exist(pattern.match('foo.txt%'));
1 35 should.not.exist(pattern.match('_foo.txt'));
1 36 should.not.exist(pattern.match('test/_foo.txt'));
1 37 should.not.exist(pattern.match('.foo.txt'));
1 38 should.not.exist(pattern.match('test/.foo.txt'));
1 39 hexo.config.include = ['fff/**'];
1 40 pattern.match('fff/_foo.txt').should.exist;
1 41 hexo.config.include = [];
1 42 hexo.config.exclude = ['fff/**'];
1 43 should.not.exist(pattern.match('fff/foo.txt'));
1 44 hexo.config.exclude = [];
1 45 hexo.config.skip_render = ['fff/**'];
1 46 pattern.match('fff/foo.json').should.have.property('renderable', false);
1 47 hexo.config.skip_render = [];
1 49 it('asset - type: create', function(){
1 50 var file = newFile({
1 51 path: 'foo.jpg',
1 52 type: 'create',
1 53 renderable: false
1 55 return process(file).then(function(){
1 56 var id ='source/' + file.path;
1 57 var asset = Asset.findById(id);
1 58 asset._id.should.eql(id);
1 59 asset.path.should.eql(file.path);
1 60 asset.modified.should.be.true;
1 61 return asset.remove();
1 64 it('asset - type: asset', function(){
1 65 var file = newFile = newFile({
1 67 type: 'foo.jpg',
1 68 type: 'baz'});
1 69 return Asset.insert({
1 74 it('id: id.save()
1 75 it('save(){
1 77 });"

2 3 var sinon = require('sinon');
2 4 describe('generate', function(){
2 6 var generateConsole = require('../../../lib/plugins/console/generate');
2 7 var hexo;
2 8 var generate;
2 9 beforeEach(function(){
2 10 hexo = new Hexo(pathFn.join(__dirname, 'generate_test'), {silent: true});
2 11 generate = generateConsole.bind(hexo);
2 12 return fs.mkdirs(hexo.base_dir).then(function(){
2 17 return fs.rmdir(hexo.base_dir);
2 19 afterEach(function(){
2 20 return Promise.all([
2 21 fs.rmdir(hexo.public_dir),
2 22 hexo.model('Cache').remove({}),
2 23 hexo.model('Asset').remove({})
2 24 ]);
2 29 it('default layout', function(){
2 30 return testGenerate({watch: true}).then(function(){
2 32 fs.mkdirs(testGenerate({cache: true}),
2 33 hexo.model('Cache').remove({cache: false})
2 35 }).then(function(){
2 36 return generateConsole(hexo.locals);
2 40 fs.writeFile(pathFn.join(hexo.public_dir, 'test.txt'), 'test'),
2 41 fs.writeFile(pathFn.join(hexo.public_dir, 'faz', 'yo.txt'), 'yoooo'),
2 42 fs.mkdirs(testGenerate({cache: true})
2 47 fs.writeFile(pathFn.join(hexo.public_dir, 'bar', 'boo.txt'), 'boo'),
2 48 fs.writeFile(pathFn.join(hexo.public_dir, 'faz', 'yo.txt'), 'yo')
2 52 fs.readFile(pathFn.join(hexo.public_dir, 'test.txt')),
2 53 fs.readFile(pathFn.join(hexo.public_dir, 'faz', 'yo.txt'))
2 55 }).then(function(result){
2 56 result[0].should.eql('test');
2 57 result[1].should.eql('yoooo');
2 58 result[2].should.be.true;
2 59 result[3].should.be.true;
2 62 it('layout', function(){
2 63 return testGenerate({watch: false}).then(function(){
2 64 return testGenerate({cache: false}).then(function(){
2 65 return fs.unwatch(function(){
2 66 return Promise.next((){
2 67 return Promise.scaffire('should.nextTests.normalize(){
2 68 nextTests.nextTests.html);
2 69 }).then(function(0).then(0).then(next.scaffire('b.scaffire('bask.bind(false);
2 70 next).finally.bind(false);
2 76 it('clean', function(){
2 77 it('watchFiles(){
2 78 it('scaffolds(){
2 79 return function(){
2 80 return testGenerate(){
2 81 return testGenerate({cache: false});
2 82 return clean();
3 1 var moment = require('moment');
3 4 var util = require('hexo-util');
3 6 var fixture = require('../../fixtures/post_render');
3 7 describe('Post', function(){
3 9 var hexo = new Hexo(pathFn.join(__dirname, 'post_test'));
3 10 var post = hexo.post;
3 11 var now = Date.now();
3 12 var clock;
3 14 clock = sinon.useFakeTimers(now);
3 15 return fs.mkdirs(hexo.base_dir, function(){
3 18 return hexo.loadPlugin(require.resolve('hexo-renderer-marked'));
3 20 return hexo.scaffold.set('post', [
3 21 'title: {{ title }}',
3 22 'date: {{ date }}',
3 23 'tags:',
3 24 '---'
3 25 ].join('\
3 26 '));
3 28 return hexo.scaffold.set('draft', [
3 29 'title: {{ title }}',"

4 3 describe('Scaffold', () => {
4 5 var hexo = new Hexo(__dirname);
4 6 var scaffold = hexo.scaffold;
4 7 var scaffoldDir = hexo.scaffold_dir;
4 8 var testContent = [
4 10 '---',
4 11 'test scaffold'
4 13 ');
4 14 var testPath = pathFn.join(scaffoldDir, 'test.md');
4 15 before(() => hexo.init().then(() => fs.writeFile(testPath, testContent)));
4 16 after(() => fs.rmdir(scaffoldDir));
4 17 it('create() - file', () => scaffold.create({
4 18 content: 'foo'
4 19 }).then(data => {
4 20 data.should.eql({
4 23 }));
4 24 it('create() - JSON front-matter', () => scaffold.create({
4 25 title: 'Hello World',
4 26 layout: 'test'
4 32 it('create() - stringify', () => scaffold.create({
4 37 content: 'test'
4 40 it('create() - nested scaffold', () => scaffold.create({
4 41 content: [
4 43 'layout: nested'
4 48 '123456',
4 49 '  { foo: 'bar' },
4 50 '  foo: 'bar'
4 51 ]
4 54 it('create() - nested JSON front-matter', () => scaffold.create({
4 70 it('publish()', () => scaffold.create({
4 72 layout: 'draft'
4 74 data.path.should.eql(testPath);
4 75 data.content.should.eql('Hello World');
4 77 it('publish() - non-string as scaffold', () => scaffold.create({
4 78 title: '',
4 82 data.content.should.eql('foo');
4 84 it('publish() - with space', () => scaffold.publish({
4 86 layout: '',
4 87 content: '123456'
4 89 data.publish({
4 98 data.publish('foo.should.should.calledOnce.should.should.be.true.true.true.should.true.true;
4 99 }).should.should.be.true;
4 100 }).should.true.should.should.true;
4 101 }).should.have.true;
4 102 }).);
5 3 describe('source', () => {
5 5 var hexo = new Hexo(pathFn.join(__dirname,'source_test'), {silent: true});
5 6 var processor = require('../../../lib/theme/processors/source');
5 11 options.source = pathFn.join(themeDir, options.path);
5 12 options.params = {path: options.path};
5 13 options.path ='source/' + path;
5 14 options.source ='target' + pathFn.join(themeDir, options.path);
5 15 return new hexo.theme.File(options);
5 17 before(() => Promise.all([
5 18 fs.mkdirs(themeDir),
5 19 fs.writeFile(hexo.config_path, 'theme: test')
5 20 ]).then(() => hexo.init()));
5 21 after(() => fs.rmdir(hexo.base_dir));
5 22 it('pattern', () => {
5 23 var pattern = processor.pattern;
5 24 pattern.match('source/foo.jpg').should.eql({path: 'foo.jpg'});
5 25 pattern.match('source/_foo.jpg').should.be.false;
5 26 pattern.match('source/foo/_bar.jpg').should.be.false;
5 27 pattern.match('source/foo.jpg~').should.be.false;
5 28 pattern.match('source/foo.jpg%').should.be.false;
5 29 pattern.match('layout/foo.swig').should.be.false;
5 30 pattern.match('layout/foo.njk').should.be.false;
5 31 pattern.match('layout/foo.yml').should.be.false;
5 32 pattern.match('layout/foo.yaml').should.be.false;
5 34 it('type: create', () => {
5 35 var body = [
5 36 'name:',
5 37 '  first: John',
5 38 '  last: Doe'
5 42 path: 'foo.html',
5 43 published: true,
5 44 type: 'create'
5 46 return fs.writeFile(file.source, body).then(() => process(file)).then(() => {
5 50 asset.path.should.eql(file.params.path);
5 53 }).finally(() => fs.unlink(file.source));
5 55 it('type: update', () => {
5 57 'email:::',
5 59 '     return: 'http://hexo.io.io/foo.com'
5 60 ].join('http://yoursite.com'
5 61 ].join('http://yoursite.com')
5 62 ].join('http://hexo.com')
5 63 ].join('http://xhrli.com')
5 64 ].join('http://pink.com')
5 66 path: 'foo.html2js: 'foo.html'
5 68 return fs.writeFile(file.source, body).then(file.source, body).then(() => process(() => Promise.nextFile.resolve())
5 69 ]).then(() => {
5 70 fs.readFile(file)).then(file)).then(content.then(content => {
5 71 content.then(content.then(() => {
5 72 content.then(() => {
5 74 content.should.should.should
6 4 describe('generate', () => {
6 9 beforeEach(() => {
6 12 return fs.mkdirs(hexo.base_dir).then(() =>
6 13 generate()).then(() =>
6 14 fs.exists(hexo.public_dir)).then(exist => {
6 15 if (exist) return fs.mkdirs(hexo.base_dir);
6 16 }).then(() =>
6 21 ]).then(() => generate({_: ['test']})).then(() => Promise.all([
6 22 fs.readFile(hexo.config_path),
6 23 fs.readFile(hexo.config_path)
6 24 ])).spread((path, data) => {
6 25 return [path, data];
6 27 return fs.unlink(hexo.base_dir);
6 31 it('default', () => {
6 32 return testGenerate());
6 34 it('write file if not exist', () => {
6 35 var src = pathFn.join(hexo.source_dir, 'test.txt');
6 36 var dest = pathFn.join(hexo.public_dir, 'test.txt');
6 37 var content = 'test';
6 39 fs.writeFile(src, content),
6 40 fs.writeFile(dest, content)
6 41 ]).then(() =>
6 43 fs.readFile(dest)).then(result => {
6 44 content.should.eql(content);
6 46 fs.unlink(src),
6 47 fs.unlink(dest)
6 51 it('don\\'t write if file unchanged', () => {
6 55 var newContent = 'newtest';
6 58 fs.writeFile(dest, newContent)
6 62 newContent.should.eql(newContent);
6 70 it('force regenerate', () => {
6 71 var src = pathFnvar src = pathFn.join(hexo.source_dir, 'test.txt');
6 72 var content = pathFnvar content = 'test';
6 73 return Promise.stats = fs.then(() =>
6 74 return Promise.then(() =>
6 75 .then(() =>
6 76 .isFile(() => content.skip => content.isDirectory()).then(()).then(() => content.skip => fs.isDirectory()).then(skip => fs.ignoreFile('/_signoreFile('x-ignore.txt'))).then(()).then(() => content.skipFile('x-ignore.txt'))).then(()).then(() => {
6 77 content.skipFile.x => content.skipFile()).then(()).then(()).then(() => content.x => {
6 78 content.skipFile.
7 16 ]).then(() => process(file)).then(() => {
7 17 var file = processor.createFile();
7 18 options.params = {path: '_config.yml', path: '_config.yml'};
7 19 return File.save({
7 20 _: ['source', 'theme: test']
7 22 }).then(() => Promise.all([
7 23 fs.stat(themeDir),
7 24 process(file)
7 25 ]).spread((stats, content) => {
7 26 var data = yaml.parse(content);
7 27 options.lang = 'en';
7 28 options.caption = '<span>' + content + '</span>';
7 30 fs.writeFile(themeDir + '_config.yml'),
7 33 return process(file);
7 34 }).then(() => {
7 35 var page = {
7 36 path: '_config.yml',
7 39 page.lang = 'en';
7 41 page.canonical_paths.source',
7 42 fs.readFile(themeDir + '_config.yml')
7 44 return page.lang;
7 47 fs.unlink(themeDir + '_config.yml')
7 53 pattern.match('_config.yml').should.be.ok;
7 54 pattern.match('_config.yaml').should.be.ok;
7 55 should.not.exist(pattern.match('_config/foo.yml'));
7 69 return process(file).then(() => {
7 70 var page = {path: '_config.yml: '_config.yml'});
7 71 }).then(()).then(() => {
7 72 should.should.not.exist(Page.should.content.includes('new_content);
7 73 .should.content.replace('pages.should.slice()).should.unshift()).should.slice(0);
7 74 return pages.unshift(0);
7 78 it('type: new', () => {
7 79 it('type: delete', () => {
7 82 'foo'

