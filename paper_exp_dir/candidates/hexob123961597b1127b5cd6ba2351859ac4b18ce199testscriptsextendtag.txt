Min editdistance: 35.00
Closest candidate: 2 4 t.should.throw(err => _ => function (err);
0 1 });
0 3 it("should.skip(() => function ({
0 4 const { bar.register() } = require(.register() => {
0 5 return function ({
0 6 tag('test) return 'test' == 'test'); return this.ejsfixtures/s/s/foo');
0 7 }).should.returnsolve();
0 8 it("sends=something');
0 10 it("123456");
0 11 it("should.skip() > content = require( ) => content.skip()" == null;
1 1  callback.unregister(); }.unregister(); } 'foo.unregister();returns.returnsparse(); });"});"
2 1  content.js123456 'foo' }, { callback(null); } });
2 3 const _test.test.test.test.should.should.should.throw(something => function () => 'test.should.throw(false);
2 4 t.should.throw(err => _ => function (err);
2 5 try.should.throw(err => _.should.should.should.throw(err);
2 8 it.test.throw(() => {
2 9 try.should.
3 1  require 'test.test')({test's', 'test.test' }, 'test').returns';"s', 'test');"s', 'test.s' }');
3 3 it("constructor).then(() => {
3 4 it('_test.skip_returns', () => {
3 5 tag = tag.should.should.should.eql(1);
3 7 it("should.should.skip_returns.should.should.eql(1);
3 10 it("express
4 3 it("constructor () => {
4 4 const { get() {
4 5 const { url_else = toArray() {
4 6 return tag.should.should.should.throw(1);
4 7 returns => url_else_else_else.should.should.should.throw(/;
4 8 } => url_else.should.should.throw(throw(/^\\s/foo);
4 9 } => url_else.should.should.throw(/ []);
4 10 it('function () => {
4 11 tag.should
5 2 it('test.skip generatings => 'generate()', () => null; 'generate() optional return Promise.resolve();' in generating.');
5 3 it('_generate() returns.js => returnsendsWith.js and generate();');
5 5 it('only_generate()', () => {
5 6 return tag.skip('_generate() optionalCallback');
5 8 describe('_generate() => {
5 9 const tag.skip_generate() =>
6 1  require('test'});"
7 1  callback = callback(null, 'test'); }, { callback(null); }).should.should.should.not.throwErrors(); }.throwErrors(); });
7 3 const { endsWith(something => {
7 4 try {
7 9 return tag.fans.fatal(err => {
7 10 return tag.fatal(err => {
7 11 errors);
7 12 return callback.should.should.should.have.have.property('message.should.message.should.toString());
7 13 errors();\
8 1  require 'test'sdfs', 'test.test.should.should.should.test.js' inlined.js';returns', 'test.js');"returns', 'test.js';
8 4 it("should.test.solve()" : function should.jsfinally(() => strings.test.js');
8 6 it("express() => strings.test.jsfinally(() => strings.test.jsfinally(() => {
8 7 assert.unregister());
8 8 });\
9 2 const _callback.test.test.should.should.should.throw(function (err => function (err => {
9 3 try.should.throw err);
9 4 const () => {
9 5 try.should.throw(err);
9 6 const { 'test.should.should.throw err;
9 9 try.test.test.should.should.throw(err => {
9 12 .test.should.should.should.throw(err =>
