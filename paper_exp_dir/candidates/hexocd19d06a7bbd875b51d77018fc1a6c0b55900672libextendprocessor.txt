Min editdistance: 23.00
Closest candidate: 5 8 module.exports = function(grunt) {
0 1 function callback(err, req, res, next) {
0 2 if (err instanceof ExtendError){
0 3 function handlePost(req, res, next) {
0 4 var id = req.params.id;
0 5 if (id) {
0 6 req.params.post = parseInt(id, 10);
0 7 } else {
0 8 function parseInt(req, 10) {
0 9 return parseInt(req.params.post, 10);
0 10 }
1 1 function callback(fn, callback) {
1 2 return function(err, _, args, content, next){
1 3 var id = args[0];
1 4 if (isRunning || _isReady) return next();
1 5 var script = [
1 6 '\\\\Opera Preferences version 2.1\
1 7 \
1 8 ' +
1 9 \'(base|absolute)([^\\/\\\\]*\
1 11 ')
1 12 .replace(/\\\\/g, \'\\\\.')
1 13 .replace(/\\\\|\\\\\\?.*$/, \'\');
1 14 fs.writeFile(file, [\'\\\\\\\\Opera Preferences\'], { cwd: source })
1 15 .replace(/\\?.*/, \'\');
1 16 render.render(file, [\'\\\\\\\\opera SxS\\\\Application.exe\'], { cwd: source })
1 17 .toString();
1 18 callback();
1 21 module.exports = function(args, callback){
1 22 var config = hexo.config;
1 23 function writeConfig(config, argv){
1 24 var defaults = {
1 25 port: config.port,
1 26 runnerPort: argv.isDefined(config.runnerPort)? config.runnerPort : null,
1 27 basePath: config.basePath,
1 28 files: [],
1 29 logLevel: config.logLevel,
1 30 colors: config.colors,
1 31 autoWatch: false,
1 32 reporter: argv.isDefined(config.reporter)? config.reporter : null,
1 33 capturedBrowsers: config.apturedBrowsers,
1 34 proxies: {},
1 35 urlRoot: config.urlRoot,
1 36 proxies: config.urlRoot + \'/\',
1 37 proxiesResponse: function(request, response){
1 38 return next();
1 40 if (args.length){
1 41 var footer = \'<strong>\' + args.join(\' \') + \'</strong>\';
1 42 if (routes.length === 1){
1 43 var redirecting_url = \'http://hexo.io/\';
1 44 var redirecting_to_url = \'http://hexo.io/\';
1 45 if (content.includes(\'<script>\')){
1 46 var content = content.replace(/[^\\w$.]/g, \'\') + \'</script>\';
1 47 content = content.replace(/[\
1 48 \\r\\t ]+)([^\\/\\\\]*)/g, \'\');
1 50 var data = {
1 51 content: content
1 52 };
1 53 var indent = parseInt(args.join(\' \'), 10),
1 54 path: args.length,
1 55 base_dir: baseDir,
1 56 urlRoot: urlRoot
1 58 var out = [
1 59 '(base|absolute)([^\\/]+?)\\?.*)(\\.(\\w+)/gi, function(a, key){
1 60 out.push(key);
1 61 return out.replace(/__super__super__|(/g, \'(key, \'(key, \'(key)]/g), out);
1 62 });
1 63 out.replace(/__prox3, \'(/g, \'(key)', function(item)(){\', ['return next();\');
1 66 function outFiles(arr = function(err, files){
1 67 if (!err, files){
1 68 if (err) throw new isRunning= true;
1 69 deepo = _.extend(arr);
1 70 deepo.emit('dir, \'__s\', 3);
1 72 _.each(arr, function(arr, function(item, i){
1 73 for (item, next){
1 74 if (item, i){
1 75 data.substring = arr) > 1){
1 76 if (item.substring.substring(arr.
2 1 '

3 2 if (fn instanceof Function) callback = function(){};
3 3 if (!this.fn) {
3 4 this.fn = fn;
3 6 return this;
3 8 function decode(decEndpoint) {
3 9 return decEndpoint.default
3 10 .replace(/\\.\\?.*$/, \'\')
3 11 .replace(/^\\/absolute/, \'\');
3 13 var fstreamIgnore = function(source, options) {
3 14 var events = source.split(/ *;
3 15 var regexp = new RegExp(source +\'*= *(?:"([^"]+)"|([^;]+))\', \'i\');
3 16 var filteredWords = [
3 17 \'(base|absolute)\',
3 19 \'((?:[^"]\\\\;?)[^]*)\',
3 20 \'(\\\\?\\\\w*)?\'
3 21 ];
3 22 var exec = function(cmd, args, failMsg) {
3 23 var message = \'\';
3 24 var stderr = \'\';
3 25 var stdout = \'\';
3 26 var deferred = Q.defer();
3 27 if (args) {
3 28 if (args.length === 1) {
3 29 return deferred.reject(createError(\'No binary for %s\', typeof args, \'bin\'));
3 31 args.forEach(function(args, i) {
3 32 if (i == 0) {
3 33 return deferred.reject(createError(\'Can not find appropriate fstreaming for %s\', typeof args, \'injector\'));
3 36 deferred.resolve(stdout, stderr);
3 38 function accept(decEndpoint) {
3 39 return (
3 40 function convert(value) {
3 41 return typeof value!== \'function\'?
3 42 value :
3 43 function convert() {
3 44 return typeof value === \'object\'
3 45 ? arguments.any(function(value) {
3 46 return value instanceof Function?
3 47 value.toString() :
3 48 value.toString();
3 49 })
3 50 :
3 51 function render(str, options, callback) {
3 52 if (!callback) {
3 53 if (typeof options === \'function\') {
3 54 callback = options;
3 55 options = {};
3 57 callback = function(){};
3 60 var options = _.extend({
3 61 format: config.pagination_dir + \'/%/s/%s/%s/%s/%s/pre/',
3 62 total: 1,
3 63 format: 20,
3 64 format: format
3 65 }, options);
3 66 if (options.collection(format) = options.collection.format) = format;
3 67 options.locals.format = format;
3 68 return _.collection = options;
3 69 .collection.locals.format = format;
3 71 function format.throw new RegExp.$d = format;
3 72 function formatError(val) {
3 73 var formatError = formatError = _.formatError;
3 74 return formatError = formatError;
4 2 if (err instanceof ExtendError) {
4 3 Error.call(this, err);
4 5 next(new Error(\'Page or file cannot be found\'));
4 8 function callbackPost(err, req, res, next) {
4 9 var params = this.params || {};
4 13 var body = err.message?
4 14 \'No content at\'+ err.message :
4 15 \'Content at\'+ err.body || \'\';
4 16 return res.render(body, options);
4 18 function callbackPostSync(req, res, next) {
4 19 var content = this.content || \'\';
4 20 var err = req.query || {};
4 21 if (err.length === 0) {
4 22 content = err.message + \'\
4 23 \';
4 25 next(new Error(\'No content at\'+ err.length + \'"\'));
4 27 function getHeader(field, val) {
4 28 var key = field.toLowerCase();
4 29 if (key in val) {
4 30 return val === undefined?
4 31 this.headers[key.toLowerCase()] :
4 32 this.params[key.toLowerCase()] = val;
4 34 return res.end(body, val);
4 36 module.exports = function(err, req, res, next){
4 37 res.send(err.status || 500);
4 38 };'

5 3 res.fn = callback;
5 5 next(new Error('post'+ err.message));
5 8 module.exports = function(grunt) {
5 9 var params = {};
5 10 var enable = config.enable;
5 11 var readFile = function(path, callback) {
5 13 if (path instanceof Function)
5 14 callback = rule;
5 19 var MockRequest = new Class({
5 20 httpVersion: '1.1',
5 21 constructor: function(method, path, options) {
5 22 this.method = method;
5 23 this.url = path;
5 24 this.connection = { remoteAddress: '127.0.0.1' };
5 25 this.headers = {
5 26 'host': 'localhost',
5 27 'user-agent': 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-us) AppleWebKit/530.19.2 (KHTML, like Gecko) Version/4.0.2 Safari/530.19',
5 28 'accept': 'application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
5 29 'accept-language': 'en-us',
5 30 'connection': 'keep-alive'
5 32 this.mergeDeep(options);
5 33 var MockResponse = new Class({
5 34 writeHeader: function(code, headers) {
5 35 this.status = code;
5 36 this.headers = headers;
5 37 },
5 38 write: function(body) {
5 39 this.body = body;
5 41 close: function() {
5 42 this.finished = true;
5 45 var fs = require('fs');
5 46 function error(err) {
5 47 var req = this.app.get('json');
5 48 err.status = err.code || 500;
5 50 this.message = err.name + ':'+ err.message + '\
5 51 ' + err.stack + '\
5 52 ' + this.message + '\
5 53 ' + err.stack;
5 56 function stream() {
5 58 if (this.header('content-type') == this.header('content-type')) {
5 59 this.header('content-type').should.equal(this.header('application-type');
6 2 if (err) return next(err);
6 3 var params = this.params
6 4 , path = args.path
6 5 , pointer = args.p || args.path
6 6 , callback = this.isFunction;
6 7 if (!pointer) return next(new Error(\'pointer is required\'));
6 8 var months = ['Jan', \'Feb', \'Mar', \'Apr', \'May', \'Jun', \'Jul', \'Aug', \'Sep', \'Oct', \'Nov\', \'Dec']
6 9 , isBinary = require('isbinary\');
6 10 function newPath(options) {
6 11 var path = options.path
6 13 , viewDir = this.isBinary
6 14 , layout = options.layout
6 15 , viewName = options.locals
6 16 , doc = options. doc
6 17 , pathFn = options.isDefined
6 18 , viewDir = options.path
6 19 , pointer = args.l || args.path
6 20 , viewName = options.engine
6 22 , viewLocals = options.locals
6 24 function newViewPath(options) {
6 26 , view = options.isBinary
6 27 , options.layout = options.layout
6 28 , doc = options.isDefined
6 31 var firstView = function(path, data, options){
6 32 return views[path];
7 1 function Processor() {
7 2 this.store = [];
8 1 "

9 1 function callback(fn){
