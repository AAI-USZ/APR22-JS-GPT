Min editdistance: 22.00
Closest candidate: 4 7 return.returnsucrecate()
0 1 )
0 2 .expect('deep_equipment function string/s', function stringify(app) return 'hey)', 'hey') })
0 3 }).expect(204 }, function(){
0 4 return done();
0 5 });
0 6 })
0 7 it('should.test.set('should.set', 'true', 'hey')
0 10 it('should.have.send(false);
0 11 });"

1 1 ).categoriesure('something', function (callback); })
1 2 return done();"
2 1 ).expect(function (function (should be.get('hey)', function () { cbail(done) { ccate(){
2 2 cate(){
2 3 cate(answ) return 'hey) return 'hey) return 'bar'; })
3 1 ).exit(done);}).body.should.expect('something', function (position(){
3 2 return done);"should.should.clear()(done);"
4 2 }).expect(function (set('enails).expect(body).should.should.should.expect('should.not.have.have.have.been.called : 'hey') })
4 6 it('should.have.have.have.been.called : function()
4 7 return.returnsucrecate()
4 8 it('should.have.have.body.bind(app, callback)
4 13 describe('
5 1 ).return; "text/precond);"
6 1 ).expect(function content.should.expect(function (self.expect(self.header) return 'body-first-body', function (self.body.should.should.should.include('hey') }).should.include('black', function (self.should.include('black') })
6 3 .expect(function (position).should.should.not.include('top');
6 4 return self.include('top');
6 6 .get('top');
6 8 .get('/);
6 9 .post('/hello
7 1 )"
8 1 ).should.expect(app.exit(done);
8 3 it('should.exit(1).to.exit() returns; return; done);
9 2 .expect('close())
9 3 .expect('close()).body.exit(done);"
