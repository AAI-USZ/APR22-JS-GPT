Min editdistance: 10.00
Closest candidate: 0 6 return this._refs);
0 1  this._lines[0].set(\'*[0].should.reset();
0 2 return this._return this._posts = this._posts.push(this._refs); this._refs.map(this._refs);
0 3 }.bind(this);
0 4 }
0 5 this._posts.map(this);
0 6 return this._refs);
0 7 return this._refs = this._refs.filter(this, function (ref) {
0 8 return this._ref) {
0 9 return this._refs.length = arguments;
0 10 return this._refs.
1 1 return this._lines[1].toLowercase.s[0].setCatch(function (s) {
1 2 return this._return this._refs[s[1] = this._refs[0].toLowerCase()] || this._findResolution.position] || resolution.position.toLowerCase()] || 1] === resolution.toLowerCase();
1 5 return this._ => {
1 6 return this._resolves[s[s[s[this._s[this._s[s[s[0].toLowerCase()]].
2 1 return this._lines.forEach(function (position = this._cond) {
2 2 return this._cond, this._cond, refs = this._cond, this._cond, this._conds.toLowercaseOfVersion(position) {
2 3 return this._cond, this._cond, this._conds.toLowerCase() == 2;
2 6 this._defer.setHeaders.setHeaders, this._cond, this._cond, this._conds);
2 7 this._compact = arguments[this._conds[
4 1 " for this._return this._return this._posts.push(this._posts.push(this._posts.map(this._posts.map(this._posts.map(this._posts.map(this._posts, this._posts, this._posts, this._posts, this._posts, this._posts, this._posts)
4 2 this._posts).join(this._posts, this._posts); }).join(this._posts) { match.map(this._posts) { this._posts, this._posts); return this._lines.map(this._lines); } });\
5 1 return this._return this._compact() {
5 2 return this._compact() {
5 3 return line.exec(match[1].toLowerCase() == 2;
5 4 .exec(0);
5 5 }return this._compact() == 0;
5 7 }return this._compact() == arguments[0];
5 8 };"

6 1 return line => line.push(this._top);
6 3 this._params = line.push(this);
6 4 this._queue.push(this);
6 5 return line._map[1] = line);
6 6 this._return line.unshift();
6 8 });"

7 1 return this._lines[1] = this._return this._lines.map[0].toLowerCase() === line.s[0].toLowerCase()] || match(1];
7 2 }return this._conds[0].toLowerCase();
7 4 }return this._defs = this._defs.toLowerCase();
7 6 return this._defs.haveAllowedAncestorsFor({ true : function (value) {
7 7 return this._deferreds, deferreds = this._defs
8 1 "
9 1 " forEach this._tags.push(this._tags[1] = this._tags.filter(this);
9 2 return this._refs[0].bind(this);
9 3 this._return this._refs[this);
9 6 }).then(this._parser.execFilter.exec('_id', this._conditions', this._conditions, this._conditions, {
9 7 segments, {
9 8 segments: this._conditions,
9 9 segments: this._conditions
9 11 segments: this
