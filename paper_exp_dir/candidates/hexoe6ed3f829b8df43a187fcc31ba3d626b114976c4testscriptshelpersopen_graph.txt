Min editdistance: 23.00
Closest candidate: 3 38 const result = openGraph.call(ctx);
0 1 function meta(options) {
0 2 return tag(\'meta\', options);
0 3 }
0 4 before(() => {
0 5 hexo.config.permalink = \':title\';
0 6 return hexo.init();
0 7 });
0 8 it(\'default\', () => {
0 9 Post.insert({
0 10 source: \'foo.md\',
0 11 slug: \'bar\'
0 12 }).then(post => post.setTags([\'optimize\', \'web\'])
0 13 .thenReturn(Post.findById(post._id))).then(post => {
0 14 openGraph.call({
0 15 page: post,
0 16 config: hexo.config,
0 17 is_post: isPost
0 18 }).should.eql([
0 19 meta({name: \'keywords\', content: \'optimize,web\'}),
0 20 meta({property: \'og:type\', content: \'website\'}),
0 21 meta({property: \'og:title\', content: hexo.config.title}),
0 22 meta({property: \'og:url\'}),
0 23 meta({property: \'og:site_name\', content: hexo.config.title}),
0 24 meta({property: \'og:locale\', content: \'en'}),
0 25 meta({property: \'article:published_time\', content: post.date.toISOString()}),
0 26 meta({property: \'article:modified_time\', content: post.updated.toISOString()}),
0 27 meta({property: \'og:updated_time\', content: post.updated.toISOString()})
0 28 ].join(\'\
0 29 \'));
0 30 return Post.removeById(post._id);
0 32 });'

1 23 meta({property: \'og:locale\', content: \'en\'}),
1 25 meta({property: \'og:updated_time\', content: post.updated.toISOString()}),
1 26 meta({property: \'article:author\', content: hexo.config.author}),
1 27 meta({property: \'og:tag\', content: \'optimize,web\'}),
1 28 meta({name: \'twitter:card\', content:\'summary\'})
2 28 meta({property: \'article:tag\', content: \'optimize,web\'}),
2 29 meta({property: \'article:tag\', content: \'web\'}),
3 32 it(\'title - page\', () => {
3 33 const ctx = {
3 34 page: {title: \'Hello world\'},
3 37 };
3 38 const result = openGraph.call(ctx);
3 39 result.should.eql([
3 40 meta({name: \'description\'}),
3 42 meta({property: \'og:title\', content: ctx.page.title}),
3 45 meta({property: \'og:description\'}),
3 46 meta({name: \'twitter:card\', content:\'summary\'}),
3 47 meta({name: \'twitter:title\', content: ctx.page.title}),
3 48 meta({name: \'twitter:description\'})
4 12 }, options).then(post => post.setTags([\'optimize\', \'web\'])
6 39 result.should.have.string(meta({property: \'og:title\', content: ctx.page.title}));
6 41 it(\'title - options\', () => {
6 42 const result = openGraph.call({
6 43 page: {title: \'test\'},
6 46 }, {title: \'test\'});
6 47 result.should.have.string(meta({property: \'og:title\', content: \'test\'}));
6 49 it(\'type - options\', () => {
6 51 page: {},
6 54 }, {type: \'photo\'});
6 55 result.should.have.string(meta({property: \'og:type\', content: \'photo\'}));
6 57 it(\'type - is_post\', () => {
6 59 page: {}, {type: \'photo\'

8 12 }, function(post) {
8 13 post.content.should.eql([
