Min editdistance: 25.00
Closest candidate: 6 51 connect: function(){
0 1 exports.createServer(){
0 2 return new Server(function(req, res, next){
0 3 res.render('hello.haml.html', {
0 4 locals: {
0 5 lastName: \'world\'
0 6 }
0 7 }));
0 8 });
0 9 return server;
0 11 exports.run = function(){
0 12 return require('./run');
0 13 };'

1 1 exports.execute = function(request, response){
1 2 return new Server(request, response);
1 3 };"

2 1 exports.execute = function(ctx){
2 2 var reply = ctx.puts({
2 3 id: \'object\',
2 4 title: \'Hello World\'
2 5 }, ctx);
2 6 reply.on(\'end\', function(data){
2 7 res.writeHead(200, {});
2 8 res.end(\'<p>Hello World</p>\');
2 10 return new Server(c{ url: \'/\', full: \'foo\' }, ctx);
3 3 };
3 4 exports.errorHandler.title = \'Express\';'

4 2 return new Server(404, { url: request.url }).apply(this, arguments);
5 1 exports.createServer = function(){
5 2 return new Server(Array.prototype.slice.call(arguments));
6 1 exports.execute = function(server){
6 4 function exec(server, content, callback) {
6 5 var self = this;
6 6 this.server.listen(0, function(){
6 7 self.listening = true;
6 8 self.port = Infinity;
6 9 self.listening = false;
6 11 return this;
6 14 return this.server.run(callback).apply(this, arguments);
6 16 function setup(ger, cb, baseServer, proxies, urlRoot) {
6 17 var route = {}
6 18 if (get(urlRoot)) {
6 19 route.routes = { get: urlRoot };
6 21 var captureTimeout = 3;
6 22 return function(req, res){
6 23 res.setHeader(\'Location\', urlRoot);
6 24 res.end();
6 27 exports.createServer = function(middleware){
6 28 return new Server(middleware);
6 30 exports.callHandler.title = function(name, args, callback){
6 31 if (!callback) {
6 32 throw new TypeError(\'callback function is required\');
6 34 var route = new Server(middleware);
6 35 return function(req, res, next){
6 36 var request = router(function(app){ self.routes = { get: urlRoot };
6 37 if (request.url.indexOf(\'/\') === 0) {
6 38 var url = \'/index.html\';
6 39 var data = url.parse(request.url).query;
6 40 req.params.path = \'/user.json/user.json/opener.json\';
6 41 res.writeHead(200, {
6 42 name: name,
6 43 url: urlRoot
6 46 } else {
6 47 next();
6 50 exports.proxies = {
6 51 connect: function(){
6 52 return new HTTPSServer(this.config, this.settings);
6 53 },
6 54 router: function(req, res){
6 55 this.request = req;
6 56 this.response = res;
6 57 this.engines = this.app.locals || {};
6 58 this.settings = this.app.settings;
6 59 this.redirects = this.app.locals || {};
6 60 this.isCallbacks = this.app.locals || {};
6 61 this._locals.settings = this.app.settings;
6 63 this.set(\'home\', \'/\');
6 64 this.set(\'env\', process.env.NODE_ENV || \'development\');
6 65 var resultRepos =
6 66 .redirects = this.settings;
6 67 this.isCallbacks = this.isCallbacks = this.isCallbacks = this.isCallbacks = this.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.callbacks.
9 1 exports.createServer()
9 2 .catch(function(err){
9 3 err.should.have.property(\'message\', \'No provider for "viewing" type.');
9 4 err.should.have.property(\'property\', \'No provider for "viewing" type.\');
9 6 });"

