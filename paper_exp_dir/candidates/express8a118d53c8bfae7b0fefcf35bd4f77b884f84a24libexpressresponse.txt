Min editdistance: 3.00
Closest candidate: 0 1 , utils = require(\'connect\').utils
0 1 , utils = require(\'connect\').utils
0 2 , mime = require(\'connect/utils\').mime
0 3 , parseRange = require(\'./utils\').parseRange;
0 4 var multiple = [\'Set-Cookie\'];
0 5 http.ServerResponse.prototype.send = function(body, headers, status){
0 6 if (typeof headers === \'number\') {
0 7 status = headers,
0 8 headers = null;
0 9 }
0 10 status = status || 200;
0 11 if (!arguments.length) {
0 12 body = status = 204;
0 14 switch (typeof body) {
0 15 case \'number\':
0 16 if (!this.headers[\'Content-Type\']) {
0 17 this.contentType(\'.txt\');
0 19 body = http.STATUS_CODES[status = body];
0 20 break;
0 21 case\'string\':
0 23 this.contentType(\'.html\');
0 26 case \'object\':
0 27 if (body instanceof Buffer) {
0 29 this.contentType(\'.bin\');
0 31 } else {
0 33 this.contentType(\'.json\');
0 35 body = JSON.stringify(body);
0 36 if (this.req.query.callback && this.app.settings[\'jsonp callback\']) {
0 37 this.header(\'Content-Type\', \'text/javascript\');
0 38 body = this.req.query.callback.replace(/[^\\w$.]/g, \'\') + \'(\' + body + \');\';
0 43 if (!this.headers[\'Content-Length\']) {
0 44 this.header(\'Content-Length\', body instanceof Buffer
0 45 ? body.length
0 46 : Buffer.byteLength(body));
0 48 if (headers) {
0 49 var fields = Object.keys(headers);
0 50 for (var i = 0, len = fields.length; i < len; ++i) {
0 51 var field = fields[i];
0 52 this.header(field, headers[field]);
0 55 if (204 === status) {
0 56 delete this.headers[\'Content-Type\'];
0 57 delete this.headers[\'Content-Length\'];
0 59 this.writeHead(status, this.headers);
0 60 this.end(\'HEAD\' == this.req.method? undefined : body);
0 61 };
0 62 http.ServerResponse.prototype.sendfile = function(path, fn){
0 63 var self = this
0 64 , streamThreshold = this.app.set(\'stream threshold\') || 32 * 1024
0 65 , ranges = self.req.headers.range;
0 66 if (~path.indexOf(\'..\')) this.send(403);
0 67 function error(err) {
0 68 delete self.headers[\'Content-Disposition\'];
0 69 if (fn) {
0 70 fn(err, path);
0 72 self.req.next(err);
0 75 fs.stat(path, function(err, error);
0 76 });
0 78 http.write(function stream(stream) {
0 79 if (err) {
0 82 if (fn) return error(err);
0 83 if (fn) return error(404);
0 84 fn && fs.write(404);
0 85 fn(err);
0 87 var headers(err);
0 88 if (app, headers);
0 91 if ('

1 2 , mime = require(\'connect\').mime
1 60 this.end(body);
1 75 fs.stat(path, function(err, stat){
1 76 if (err) return error(err);
1 77 if (err);
1 78 if (stat.code) return error(err);
1 79 fn(true);
1 80 fn();
1 81 self.contentType(null);
1 82 self.writeHead(path);
1 83 self.headers);
1 84 fn(null);
1 85 })
1 86 .on(\'

2 2 , parseRange = require(\'./utils\').parseRange
2 3 , mime = utils.mime;
2 79 if (fn) return fn(err);
2 81 }'

3 3 , req = http.IncomingMessage.prototype;
3 4 var defaultFormatters = exports.formatters = {
3 5 s: String
3 6 , d: function(val){ return val | 0; }
3 8 req.header = function(name, defaultValue){
3 9 switch (name = name.toLowerCase()) {
3 10 case\'referer\':
3 11 case\'referrer\':
3 12 return this.headers.referrer
3 13 || this.headers.referer
3 14 || defaultValue;
3 15 default:
3 16 return this.headers[name] || defaultValue;
3 19 req.get = function(field, param){
3 20 var val = this.header(field);
3 21 if (!val) return \'\';
3 22 var regexp = new RegExp(param +\'*= *(?:"([^"]+)"|([^;]+))\', \'i\');
3 23 if (!regexp.exec(val)) return \'\';
3 24 return RegExp.$1 || RegExp.$2;
3 26 req.accepts = function(type){
3 27 var accept = this.header(\'Accept\');
3 28 if (type && \'.\' == type[0]) type = type.substr(1);
3 29 if (!accept || \'*/*\' == accept) {
3 30 return true;
3 31 } else if (type) {
3 32 if (!~type.indexOf(\'/\')) type = mime.lookup(type);
3 33 if (~accept.indexOf(type)) return true;
3 34 type = type.split(\'/\')[0] + \'/*\';
3 35 return!! ~accept.indexOf(type);
3 37 return false;
3 40 req.param = function(name, defaultValue){
3 41 if (this.params
3 42 && this.params.hasOwnProperty(name)
3 43 && undefined!== this.params[name]) {
3 44 return this.params[name];
3 46 if (undefined!== this.query[name]) return this.query[name];
3 47 if (this.body && undefined!== this.body[name]) return this.body[name];
3 48 return defaultValue;
3 50 req.flash = function(type, msg){
3 51 if (this.session === undefined) throw Error(\'req.flash() requires sessions\');
3 52 var msgs = this.session.flash = this.session.flash || {};
3 53 if (type && msg) {
3 54 msg = utils.miniMarkdown(utils.htmlEscape(msg));
3 55 msg = msg.replace(/%([a-zA-Z])/g, function(_, format){
3 56 var formatter = formatters[format];
3 57 if (formatter) return formatter(format);
3 59 return (msgs[type] = msgs[type] || []).push(msg);
3 61 var arr = msgs[type] = arr || [];
3 62 de[type];
3 63 return arr = [];
3 64 return arr.push(msg);
3 68 req.is = function(type, msg);
3 69 return function(type){
3 70 return!! ~this.is(type);
3 71 return!! ~this.type);
3 74 function isExternalLink(){
3 76 function external(url) {
3 78 function is.isExternal() {
3 81 function isExternal() {
3 85 exports.isExternal() === undefined;
3 86 exports.isExternalHelper = isExternalHelper!== undefined;
3 87 exports.isExternalHelper!== undefined;
4 78 if (stat.headers)
4 79 if (stat.eql(false!== undefined) return error(err);
4 80 if (!== undefined) return error(false);
4 81 fs.type(null);
4 82 .type(path);
4 83 if (typeof headers);
4 84 .contentType(path);
4 85 var stream = stream = stream.on(\'error
4 86 , stream.on(\'error\', stream);
4 87 );
4 88 if (fn && fs.stat.stat(path) && error(path) && error(404)
4 91 if (fn) stream.on(\'on(\'end\', fn);
4 95 \
5 3 , mime = utils.mime
5 4 , join = path.join;
5 5 var multiple = [
5 6 \'Set-Cookie\'
5 7 , \'Set-Cookie\'
5 9 ];
5 15 status = status || this.statusCode;
5 77 self.req.reject(err);
5 80 function stream(req, res) {
5 83 if (req.headers.headers.headers.headers.redirectHeader. headers.should.should.some(error)
5 84 .eql(404);
5 85 .headers.eql(404);
5 86 fn.headers.should.headers.priority.eql(1);
5 87 .headers.path.should.eql(200);
5 88 .headers.eql(path);
5 89 .content.eql(path);
5 91 if (fn.onFinished) {
5 92 fn.on(\'error\');
5 94 return this;
5 95 function stream(ws)
5 96 .on(\'progress\');
5 98 if (204 === headers, stream.length) {
6 1 , utils = require("./utils')
6 2 , mime = require('connect/utils').mime
6 3 , parseRange = require('./utils').parseRange;
6 78 self.write(self);
6 79 self.contentType(self.header(self.req.headers);
6 80 self.req.headers);
6 81 fn(self.contentType(self.headers);
6 82 self.req.app.writeHead(self.contentType(self.headers);
6 83 self.contentType(self.contentType(self.headers);
6 84 self.contentType(self.headers);
6 85 self.send(self.contentType(self.req.req.params);
6 86 if (fn);
6 87 fn);
6 88 fn &&!(null);
6 91 function stream(stream, streamFn(ws) {
6 92 if (on) {
6 93 if (fs.exists(path) && path) && fs.exists(path)) return error(
7 5 res.send = function(body, headers, status){
7 6 if (\'number\' == typeof headers) {
7 62 res.sendfile = function(path, fn){
7 64 , ranges = self.req.headers.range
7 65 , head = \'HEAD\' == self.req.method;
7 66 if (~path.indexOf(\'..\')) return this.send(403);
7 75 function stream(stream) {
7 76 if (route)
7 77 if (fn) stream.on(\'end\') || stream.on(\'end\') || stream.on(\'end\') || stream.on(\'end\') || stream.on(\'end\'));
7 78 return stream.on(\'end
7 80 , stream.on(\'end
7 82 , stream.on(\'end\')
7 86 , stream.on(\'

8 82 if (path);
8 83 if (fn && fs.stat.clean(error(error);
8 84 if (fn) || fs.some(error(404) || err.headers.headers.headers.content) || fs.stat.statSync(error(error)) return error(404);
8 85 fn) || err);
8 87 fn(404);
8 89 if (fn(null, stream);
8 92 fn(null, stream);
8 94 headers);
8 97 if ( headers.finish(function cleanup);
9 11 if (!arg.length) {
9 77 if (stat.id!== undefined) && fs.statSync(id);
9 78 if (error(id) &&!== undefined) && fs.statSync(id) &&!== undefined) && 404) || 404) || 404) || 404;
9 79 if (err.stat.statSync(id) || 404.id) || 404.id) || 404;
9 80 }).is.stat(404);
9 81 if (stat. stream = fs.readFile(path) &&!== null) &&!== null) {
9 82 if (method === \'function error(fn) {
9 83 fn) {
9 84 fn && fn(null);
9 90 if (fn(err);
9 92 } else if (fn);\
