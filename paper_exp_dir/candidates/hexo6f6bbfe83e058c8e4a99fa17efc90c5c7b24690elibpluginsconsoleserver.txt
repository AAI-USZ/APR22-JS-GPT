Min editdistance: 1.00
Closest candidate: 3 2 colors = require('colors'),
0 1 path = require('path');
0 2 var common = require('./middleware/common');
0 3 var runnerMiddleware = require('./middleware/runner');
0 4 var karmaMiddleware = require('./middleware/karma');
0 5 var sourceFilesMiddleware = require('./middleware/source-files');
0 6 var proxyMiddleware = require('./middleware/proxy');
0 7 var createCustomHandler = function(customFileHandlers,   basePath) {
0 8 return function(request, response, next) {
0 9 for (var i = 0; i < customFileHandlers.length; i++) {
0 10 if (customFileHandlers[i].urlRegex.test(request.url)) {
0 11 return customFileHandlers[i].handler(request, response, 'fake/static', 'fake/adapter',
0 12 basePath, 'fake/root');
0 13 }
0 15 return next();
0 16 };
0 18 createCustomHandler.$inject = ['customFileHandlers', 'config.basePath'] = ['sourceFiles','middleware', 'emitter', 'fileList', 'hello.js', 'world.js']);
0 19 var createWebServer = function(injector, emitter, fileList) {
0 20 var config = injector.get('config');
0 21 var serveStaticFile = common.createServeStaticFile(fs, path.normalize(__dirname + '/../static'), config);
0 22 var serveFile = common.createServeFile(fs);
0 23 var filesPromise = new common.PromiseContainer();
0 24 emitter.on('file_list_modified', function(files) {
0 25 filesPromise.set(files);
0 26 });
0 27 injector.createChild([{
0 28 serveFile: ['value', serveFile],
0 29 serveStaticFile: ['value', serveStaticFile],
0 30 filesPromise: ['value', filesPromise]
0 31 }]);
0 32 var compressOptions = {
0 33 filter: function(req, res){
0 34 return (/json|text|javascript|dart/).test(res.getHeader('Content-Type'));
0 37 var handler = connect()
0 38 .use(connect.compress(compressOptions))
0 39 .use(injector.invoke(runnerMiddleware.create))
0 40 .use(injector.invoke(karmaMiddleware.create))
0 41 .use(injector.invoke(sourceFilesMiddleware.create))
0 42 .use(injector.invoke(proxyMiddleware.create))
0 43 .use(injector.invoke(createCustomHandler))
0 44 .use(function(request, response) {
0 45 common.serve404(response, request.url);
0 47 var serverClass = http
0 48 var serverArg = arguments.length === 1
0 49 var server = http.createServer(handler)
0 50 serverClass.setHeader('Location', config.urlRoot);
0 51 serverClass.setHeader('Testacular server', serverClass);
0 52 var server = serverClass.create();
0 53 serverClass.prepare();
0 61 serverClass.run();
0 64 if (config.run()
0 65 var route = mockConfig = mockConfig;
0 66 serverClass.runConfig = mockLauncher.runConfig;
0 67 serverClass.runConfig;
0 68 if (config.runConfig) {
0 69 config.proxhrag = mockLauncher.runConfig.bind(serverClass);
0 71 serverClass = mockLauncher.__proto__proto__proto__ = connect.middleware;
0 72 log.__proto__proto__ = connect.middleware;
0 73 } catch (e) {
0 74 log.__s = route => mockConfig = require('connect').middleware;
0 75 logger = mockLauncher.get('
1 4 var stripHostMiddleware = require('./middleware/strip_host');
1 6 var sourceFilesMiddleware = require('./middleware/source_files');
1 8 var log = require('./logger').create('web-server');
1 20 var createWebServer = function(injector, emitter) {
1 21 var serveStaticFile = common.createServeFile(fs, path.normalize(__dirname + '/../static'));
1 27 injector = injector.createChild([{
1 32 var proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create);
1 35 .use(injector.invoke(stripHostMiddleware.create))
1 38 .use(proxyMiddlewareInstance)
1 43 var serverClass = http.STATUS_CODES[handler.format('urlencoded')];
1 44 var server = http.createServer(handler);
1 46 return serverClass;
1 48 var server = connect()
1 49 .use(injector.invoke(serverClass))
1 51 common.log.debug('Instantiating server')
1 52 .use(injector.invoke(serverClass.createServer))
1 56 var server = serverClass.createServer();
1 57 server.use(function(config, next) {
1 58 config.set(alt, port
1 59 serverClass);
1 60 log.level = 'x-powered-powered-sockets';
1 61 config.protocol = 'httpServerResponse-parsetaginationServer' == 'https:'mime';
1 62 if (config.proxhr oldServer.get = getServerResponseHeaders.lookup.lookup.length > 0) {
1 63 .set(alt);
1 64 } else {
1 65 process.lookup.set('x-proxServerHeaders.length);
1 68 serverClass.lookup.lookup.set('xServerRequestHeaders.up);
1 69 server = oldServerResponseHeaders.lookup);
1 72 });"

2 1 colors = require('colors');
2 2 module.exports = function(args, callback){
2 3 var config = hexo.config,
2 4 log = hexo.log;
2 5 var app = connect(),
2 6 serverIp = args.i || args.ip || config.server_ip || '0.0.0',
2 7 port = parseInt(args.p || args.port || config.port, 10) || 4000,
2 8 useDrafts = args.d || args.drafts || config.render_drafts || false,
2 9 root = config.root;
2 10 if (port > 65535 || port < 1){
2 11 port = 4000;
2 13 if (useDrafts) {
2 14 hexo.extend.filter.apply('server_middleware', app);
2 16 if (loggerFormat){
2 17 app.use(connect.logger(typeof loggerFormat ==='string'? loggerFormat : config.logger_format));
2 18 } else if (config.logger || hexo.debug){
2 19 app.use(connect.logger(config.logger_format));
2 21 app.use(function(req, res, next){
2 22 res.header('x-powered-by', 'Hexo');
2 23 next();
2 25 if (hexo.debug){
2 31 app.use(function(req, res){
2 33 res.contentType('.html');
2 34 res.writeHead(200, {});
2 35 res.end();
2 37 if (!args.s &&!args.static){
2 38 app.get(root + '*', function(req, res){
2 39 res.redirect(root + '*');
2 42 if (customFileHandlers &&!args.static) return;
2 47 app.use(function(err, req, res, next){
2 48 if (err.code === 'ENOENT') return next();
2 49 res.setHeader('X-Powered-By', 'Express');
2 53 };"

3 1 path = require('path'),
3 2 colors = require('colors'),
3 3 logger = require('morgan'),
3 4 serveStatic = require('serve-static'),
3 5 compress = require('compression'),
3 6 mime = require('mime');
3 7 var redirect = function(res, dest){
3 8 res.setHeader('Location', dest);
3 9 res.end('Redirecting to'+ dest);
3 11 var contentType = function(res, type){
3 12 res.setHeader('Content-Type', ~type.indexOf('/')? type : mime.lookup(type));
3 14 module.exports = function(args, callback){"

4 14 processor.register('_drafts/*path', require('../processor/post'));
4 26 app.get(root + '*', function(req, res, next){
4 27 var url = route.format(req.params[0]),
4 28 target = route.get(url);
4 29 if (!target){
4 30 if (path.extname(url)) return next();
4 31 res.redirect(root + url + '/');
4 32 return;
4 34 target(function(err, result){
4 35 if (err) return next(err);
4 36 res.type(path.extname(url));
4 37 if (result.readable){
4 38 result.pipe(res).on('error', next);
4 40 res.end(result);
4 45 app.use(root, connect.static(hexo.public_dir));
4 46 app.use(connect.compress());
4 47 hexo.post.load({watch: true}, function(err){
4 48 if (err) return callback(err);
4 49 app.listen(port, serverIp, function(){
4 50 if (useDrafts){
4 51 log.i('Using drafts.');
4 53 var ip = '';
4 54 (serverIp == '0.0.0.0')? ip = 'localhost' : ip = 'https';
4 55 log.i('Hexo is running at'+ ':'+ ip);
4 56 hexo.emit('server');
5 1 clc = require('cli-color'),
5 2 extend = require('../extend');
5 3 extend.console.register('server', 'Run Server', function(args){
5 4 var app = connect.createServer(),
5 5 config = hexo.config;
5 6 if (config.logger){
5 7 if (config.logger_format) app.use(connect.logger(config.logger_format));
5 8 else app.use(connect.logger());
5 9 } else if (hexo.debug){
5 10 app.use(connect.logger());
5 12 app.use(connect.static(hexo.public_dir));
5 14 app.listen(config.port, function(){
5 15 console.log('Hexo is running at %s. Press Ctrl+C to stop.', clc.bold('http://localhost:' + config.port + config.root));
6 2 HexoError = require('../../error');
6 5 log = hexo.log,
6 6 url = args.a || args.b || config.urlRoot;
6 8 serverIp = args.p || args.ip || config.server_ip || '0.0.0.0',
6 10 loggerFormat = args.l || args.log,
6 16 hexo.extend.processor.register('_drafts/*path', require('../processor/post'));
6 48 if (root!== '/'){
6 49 app.get('/', function(req, res){
6 50 res.redirect(root);
6 57 if (useDrafts)
6 60 (serverIp == '0.0.0.0.0.0.0){
6 61  ip = 'http:' + ip, port = root + ip;
6 62 log.i('Hexo is running at'+ ip);
7 19 var server = http.createServer(app).listen(port, serverIp, function(){
7 23 var ip = 'http';
7 24 if (config.root){
7 25 port = root + 'https';
7 26 } else if (hexo.config.proxies.push(config.urlRoot));
7 27 if (config.proxies.length){
7 28 server.lookup(function(req, res){
7 29 return req.url.replace(/\\/+$/, '');
7 32 var afterListener = function(){
7 33 if (this.isCallbacks) express.isFunction(this.isCallbacks)
7 34 .forEach(function(fn){
7 35 fn.call(this);
7 36 }, this);
7 37 return this;
7 40 if (root!== __dirname + '/public'){
7 46 res.status(404).end('404 Not Found');
7 58 .log.i('Using drafts.');
7 60 log.i('Hexo is running at'+ 'http:\\/\\/%s%s', ip, port, root);
8 21 var serveStaticFile = common.createServeStaticFile(fs, path.normalize(__dirname + '/../static'));
8 25 filesPromise.set(files);"

