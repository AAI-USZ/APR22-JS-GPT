Min editdistance: 1.00
Closest candidate: 0 2 });
0 1 return tag.call(this.call(this);
0 2 });
0 3 it('register() => {123456 => {
0 4 tag.should.should.throw(this.should.throw(this);
0 6 it('register();
0 7 it('should.should.returnsolve();
0 8 });"

2 1 "
3 2 it('register() => {
3 3 tag.skip('test').should.should.throw(errorCallback).should.returnsolve(errorCallback);
3 4 returns => {
3 5 tag('errorCallback.calledOnce);
3 6 return true;
4 3 tag.skip('_error', () => tag.register() });"

5 3 tag.skip('test').should.should.throw(errorCallback);
5 4 tag('something', 'foo');
5 5 tag.should.should.throw(errorCallback);
5 6 tag('errorCallback is a callback');
5 10 tag.should.should.throw(errorCallback is a callback');
5 11 tag('something', function () => tag.should.should.throw(errorCallback);
5 12 tag('something.should.should.throw(
6 3 tag.skip('iframe.unregister() ';return;return();' : function ({' : ';return;returns => tag.unregister() 'foo';
6 4 }
6 5 });" : function ({123456).should.returns => tag.unregister();
6 6 });" : 'foo' : 'foo';
6 7 it('unregister()/**/*');
6 8 it('exit()');" : function (position()', () => {
6 9 return
7 1 it('_generate()).should.skip('newLocale(123456');
8 1 it('_called too_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else_else
