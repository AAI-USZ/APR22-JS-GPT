Min editdistance: 1.00
Closest candidate: 0 1 throw createError('Register requires an interactive shell', 'ENOINT', {
0 1 throw createError('Register requires an interactive shell', 'ENOINT', {
0 2 details: 'Note that you can manually force an interactive shell with --config.interactive'"

1 1  throw createError('Register requires an interactive shell', 'ENOINT', config);
1 2 }
1 3 if (!config.interactive) {
1 4 throw createError('Can not find appropriate GitHub endpoints/' +
1 5 'ENOINT', 'bower-new');
1 7 return Q.nfcall(rimraf, project, logger)
1 8 .then(function () {
1 9 return Q.nfcall(fs.lstat, path.join(config.cwd, config.directory));
1 10 })
1 11 .then(function (stats) {
1 12 if (stats.isDirectory()) {
1 13 return function () {
1 14 return Q.nfcall(rimraf, project, logger);
1 15 };
1 17 throw createError('Should throw an error on invalid GitHub URLs');
1 19 .done();
1 21 function run(project, logger, registryClient) {
1 22 return function (cliOptions, options) {
1 23 var promises;
1 24 var decEndpoints = {};
1 25 if (!mout.object.size(decEndpoints)) {
1 26 decEndpoints = decEndpoints.map(function (decEndpoint) {
1 27 return decEndpoint.name;
1 28 });
1 30 return project.fetch(decEndpoints, logger)
1 31 .spread(function (canonicalDir, pkgMeta) {
1 32 var homepage = pkgMeta.homepage;
1 33 if (!homepage) {
1 34 throw createError('No homepage set for'+ pkgMeta.name, 'ENOHOME');
1 36 if (!jsonCopy.name) {
1 37 return Q.nfcall(fs.writeFile, pkgMeta.name, homepage)
1 39 return Q.nfcall(fs.readFile, pkgMeta.source, {
1 40 name: name
1 43 .then(function (content) {
1 44 var json;
1 45 var content = JSON.parse(content);
1 46 json = content.toString('utf-8');
1 51 .then(function (filenames) {
1 54 promises = filenames.map(function (filename) {
1 55 var name = path.dirname(filename);
1 56 return Q.nfcall(rimraf, name)
1 58 return Q.nfcall(fs.rename, filename);
1 62 return Promise.all([
1 63 clearPackages(decEndpoints, logger);
1 65 .then(function (next) {
1 66 logger.emit('deletedPackage(next);
1 67 .cancel();
1 73 function cleanUpLocalConfigs(admin.s();
1 74 return function clearLinks(admin);
1 75 return configs();
1 76 return function clearLinks(admin, logger.s()) {
1 77 return that.set( that.getAdminsessions, configs, clearLinks());
1 80 function clearLinks(names, posts()) {
1 81 return that.setCategories();
1 83 return that.exclude(names);
1 85 function clearLinks(names) {
2 1 '

3 1 throw createError('Register requires an interactive shell', 'ENOINT', config);
3 4 throw createError('Invalid configuration', 'ECONFLICT', config);
3 6 return project.install(config, logger)
3 7 .then(function (installed) {
3 8 return that._removePackages(that._config);
3 10 .fin(function () {
3 11 that._working = false;
3 14 function clean(logger, config, logger) {
3 17 return Q.all([
3 18 clearPackages(that._logger),
3 19 clearLinks(that._config)
3 20 ])
3 21 .spread(function (entries) {
3 22 return entries;
3 25 function clearRuntimeCache(names, removed) {
3 26 var repository = new Package('jquery', 'git://github.com/mout/clean');
3 27 var names = names.filter(function (name) {
3 28 return mout.object.filter(names, function (value, key) {
3 29 return mout.array.find(names, function (pkg) {
3 30 return pkg === undefined;
3 34 return that._readJson(that._config.cwd)
3 35 .spread(function (json, deprecated, assumed) {
3 36 var jsonStr;
3 37 if (deprecated) {
3 38 that._logger.warn('deprecated', 'You are using the deprecated'+ deprecated +'file');
3 40 if (!assumed) {
3 41 that._jsonFile = path.join(that._config.cwd, deprecated? deprecated : 'bower.json');
3 43 jsonStr = JSON.stringify(json, null,' ') + '\
3 44 ';
3 45 that._jsonHash = md5(jsonStr);
3 46 return that._json = json;
3 49 function merge(config, json) {
3 50 var jsonStr = mout.string.startsWith({}, '1');
3 51 config.offline = false;
3 52 config.verbose = true;
3 55 function mergeMout(config, json) {
3 56 var deprecated = deprecated? '1' : '2';
3 57 return this._json = json;
3 59 var removed = 'not-installed';
3 60 var slashAdded = false;
3 61 var paramcalled = {};
3 62 var options = function noopts = { names;
3 63 var names;
3 64 var names = options || names.pag = null;
3 65 var names = options.paths = slashAdded = {};
3 66 var removed = function clearPossible = function noopts = noopts === undefined? ': options.paths' : ': options.paths' : '';
3 67 var opts = opts.removed = options.paths || null;
3 68 opts.cache = options.exclude = options.exclude =!names;
3 69 if (options.autoWatch!== null &&!== slashAdded) {
3 70 opts.autoWatch!== undefined;
3 71 this._options.autoWatch!== undefined) {
3 72 } else {
3 73 opts.ignorePaths = undefined;
4 3 if (!mout.string.startsWith(config, 'file://')) {
4 4 return;
4 6 config.interactive = process.env.CI;
4 7 return Q.nfcall(rimraf, config.directory)
4 13 return Q.nfcall(fs.stat, path.join(config.cwd, config.directory));
4 15 throw new Error('The command should have failed')
4 16 .fail(function () {
4 17 return Q.nfcall(fs.stat, config.directory);
4 20 return this._bootstrap(targets, resolved, config, logger);
4 23 if (options.save || options.saveDev) {
4 24 return this._manager.preinstall(that._json);
4 26 return this._manager.install();
4 29 if (!options.save) {
4 30 return installed;
4 35 var json = endpointParser.decompose(endpoint);
4 36 if (options.save) {
4 37 return this._manager.save(json);
4 39 return Q.nfcall(fs.readFile, path.join(this._config.cwd, config.json))
4 40 .then(function (contents) {
4 41 var json = JSON.parse(contents.toString());
4 42 json._target = decEndpoint.target;
4 43 json._source = decEndpoint.source;
4 47 return that._manager.install(that._json);
4 50 var json = path.join(that._config.cwd, config.json);
4 52 return this._manager.save(that._json);
4 54 return this._manager.removePackages(that._json);
4 60 .done(function (that._json) {
4 62 return this._manager.home = this._config.install();
4 66 function clean(that.then(that.json) {
4 67 return that._working = false;
4 69 function isBroken(project) {
4 71 return that._working = true;
4 72 return Q.then.then(function () {
4 73 return Q.nreturn Q.n.nfcall(what) {
4 74 return Q.n.nfcall(what() === undefined;
4 75 .then(what, undefined!== undefined;
4 78 .then(this._working)
4 80 .then.then(done) {
4 82 return Q.n.n.
5 1  throw createError('Register requires an interactive shell', 'ENOINT', {
8 1 nthrow createError('Register requires an interactive shell', 'ENOINT', {
8 2 details: 'Note that you can manually force an interactive shell with --config.interactive'
8 5 project = new Project(config, logger);
8 6 readJson(project, logger)
8 7 .then(setDefaults.bind(null, config))
8 8 .then(promptUser)
8 9 .spread(setIgnore)
8 10 .spread(setDependencies.bind(null, project))
8 11 .spread(saveJson.bind(null, project))
8 12 .then(function (json) {
8 13 var json = JSON.parse(json);
8 14 return Q.nfcall(fs.readFile, metaFile)
8 18 .then(function (value, key) {
8 19 var json = value[key];
8 20 if (json) {
8 21 return project.hasJson()
8 23 if (value) {
8 24 return Q.nfcall(locate.bind(resolver), json);
8 26 throw createError('No bower.json present', 'ENOINT', {
8 27 details: 'The bower.json file will be used and filled in'
8 32 return project.set()
8 34 return Q.nfcall(rimraf, target)
8 40 function clean(project, logger, packages, options, config) {
8 41 var logger = new Logger();
8 43 if (options) {
8 45 packages = options.save;
8 47 packages = packages.map(function (pkg) {
8 48 var val = {
8 49 name: pkg.name,
8 50 version: pkg.version,
8 51 homepage: pkg.homepage,
8 52 doc: pkg.canonicalDir
8 55 clearPackages(packages, config, logger),
8 56 clearLinks(names, config, logger)
8 57 ]).spread(function (entries) {
8 61 function clearRuntimeCache(names, config, logger) {
8 62 var repository = project.getPackageRepository();
8 63 return repository.clear();
8 65 function clearLinks(names, config, config, logger) {
8 67 var tags = tags;
8 68 if (nif (names) {
8 69  promises = tags.for (tags.length === 1) {
8 70 return tags.sort(function (a.length) {
8 71 return tags.forEach(function (a.length) {
8 72 return Q.sort(a.last).toArray.filter(function (a, b.length).join(','); });
8 75 return Q.sort(function (a).join(', i).join(', i).join(',');
8 77 if (!tags = posts.length;
8 78 return repository.sort(function (a, i) {
8 79 return Q.filter(function (a) {
8 80 return semver.clean(function (a) {
8 81 return semver.
