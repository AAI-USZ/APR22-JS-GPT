Min editdistance: 16.00
Closest candidate: 1 10 if (err.code === 'ENOENT') {
0 1  throw createError('Unable to create link to'+ path.basename(src), 'ENOENT', {link: src + 'doest not exists or points to a non-existent file'});
0 2 });
0 3 }, function () {
0 4 return Q.nfcall(fs.symlink, src, dst, 'junction')
0 5 .fail(function (err) {
0 6 return createError('Unable to create link to'+ path.basename(src), err.message, err.code);
0 8 })
0 9 .then(function () {
0 10 return Q.nfcall(fs.symlink, src, dst, 'karma')
0 15 }
0 16 module.exports = createLink;"

1 1 ", 'ENOENT', {
1 2 details: src + 'doest not exists or points to a non-existent file'
1 6 .then(function (result) {
1 7 type = type || (result.tagName || result.desc || result.tag || 'install');
1 8 return Q.nfcall(fs.symlink, src, dst, type)
1 10 if (err.code === 'ENOENT') {
1 11 throw createError('Failed to create link to'+ path.basename(src), 'ENOENT', {
1 12 details: src +'doest not exists or points to a non-existent file'
1 16 return Q.nfcall(result, {
1 17 type: 'file',
1 18 path: src,
1 19 message: 'To delete a file'
1 22 .done(function (result) {
1 23 return Q.nfcall(rimraf, dst, result);
2 1 return Q.nfcall(fs.symlink, src, dst, 'w/"0-9"\
2 2 ' +
2 3 "You should pass a file with indexed values in'+ stats.toString());
3 1 if (err) {
3 2 return createError(err);
3 4 return Q.nfcall(fs.symlink, src, dst, 'junction'));
3 8 var localFile = path.join(dst, '.bowerrc');
3 9 localFile = isWin || process.env.EXPRESS_ENV.defaults.replace(/\
3 10 $/, '.');
3 11 localFile = localFile === '.bowerrc';
3 14 return Q.nfcall(fs.symlink, localFile)
3 15 .then(function (str) {
3 16 return str.toString('abc');
3 19 var localName = localFile.replace(/\\.bowerrc/, '.');
3 20 return result;
3 22 .done(function (str) {
3 28 return str.toString('admin');
3 50 .done(function (partback = function (part) {
3 51 return str.toString() {
3 52 return str.toString('bower');
3 57 .done.done();
3 58 });"

4 1  throw createError('Failed to create link to'+ path.basename(src), 'ENOENT', {
4 2 filename: src,
4 3 url: src,
4 4 original_content: src
4 8 function getFromDiscriminators(files) {
4 9 var meta = yfm.parse(files);
4 10 var discriminators = [];
4 11 var discriminatorNames = [];
4 12 var typeId = function(words) {
4 13 return typeof discriminators === 'undefined';
4 14 };
4 15 var List = function(patterns, excludes, emitter, preprocess, batchInterval) {
4 16 var self = this;
4 17 this.patterns = patterns;
4 18 this.excludes = excludes;
4 19 this.emitter = emitter;
4 20 this.preprocess = Promise.promisify(preprocess);
4 21 this.batchInterval = batchInterval;
4 22 this.buckets = new Map()({
4 23 this._refreshing = Promise.resolve()
4 25 self._emitter.emit('file_list_modified', self.files);
4 27 return;
4 29 this.emit('file_list_modified', this.files);
4 32 var emit = function(name) {
4 33 if (name === 'install') {
4 34 return Q.nfcall(mkdirp, this.path)
4 36 return self._emitter.emit('file_list_modified', this.files);
4 37 }, function (err) {
4 39 return self._emitter.emit('error', err);
4 41 self._emitter.emit('end', self._removeIgnores);
4 44 var errors = [{
4 45 message: 'No input file or string',
4 46 line: function (message) {
4 47 if (message.fatal || message.severity === 2) {
4 50 return Q.nreturn arguments.n} catch (
4 51 : error(error)
4 52 : message = 'No input file ='error';
4 53 }'error'invalid input ='

5 1 ", 'To avoid conflicts' });
5 4 .done();"

6 2 details: err.message,
6 3 message: err.name || 'link rel="alternate"',
6 4 line: err.message,
6 5 point: function (s) {
6 6 return s;
6 7 },
6 8 folder: true
6 12 var createLink = function (src, dst, type) {
6 13 var dstDir = path.dirname(dst);
6 14 return Q.nfcall(mkdirp, dstDir)
6 21 message: err.name +'doest not implemented.'
6 25 result = result || {};
6 30 if (err.code === 'EXDEV') {
6 33 message: err.message,
6 34 line: err.arg1 || err.arg2 || err.arg3
6 44 line: err.arg1 || err.arg2 || err.arg1
6 50 throw createError(createError(createError(src), 'Unlink(src), 'Unlink(src));
6 59 var createLinker = function createLink(src, dst, type) {
6 60 if (type) {
6 61 return Q.nreturn Q.nfcall(mkdirp.nfcall(mkdirp, dstDir, 'writeFile');
6 65 module.then(src = createLinkdirp>= getLocation(src);
6 66 module.cwd = getLocation(src);
6 67 return getLocation(dest);
6 69 module.symlink = createLinkToFiles(src) {
6 70 return files;
6 71 return
7 1 '

8 1  throw createError('Failed to create link to'+ path.basename(src), 'ENOENT', {});
9 1  "file" = new (winston.transports.Directory);
9 3 details: err.message
9 7 function getPostPath(src) {
9 8 var dstDir = path.dirname(src);
9 9 type = type || (process.platform === 'win32'? 'win32' : 'cucumber');
9 10 return Q.nfcall(fs.stat, src)
9 11 .then(function (stat) {
9 12 type = type || (stat.isDirectory()? 'dir' : 'file');
9 25 function simulatePackageName(name) {
9 26 var destDir = path.join(__dirname, '../assets/package-zip.zip');
9 27 return Q.nfcall(mkdirp, destDir)
9 40 function simulatePackageNameToHelper(name, prefix) {
9 41 var destDir = path.dirname(name);
9 44 return function (str) {
9 45 var file;
9 46 var name = prefix === '.zip'? 'bower' : 'package-zip';
9 47 return Q.nfcall(fs.writeFile, path.join(destDir, filename, '.bower.json'), result);
9 53 return Q.nreturn Q.nfcall(fs.readFile(destDir,str)
9 54 .readFile, 'bower.toString());
9 55 .toString();
9 62 ..
9 63 .
9 65 . null;
9 67 function convertForReadFile(folder, directory; dir) {
9 68 var contents = function (folder, json) {
9 69 if (folder) {
9 70 return Q.nreturn Q.nfcall(fs.rename === 'bower_dir ||!= folder) return Q.nfcall(process.nfcall(fs
