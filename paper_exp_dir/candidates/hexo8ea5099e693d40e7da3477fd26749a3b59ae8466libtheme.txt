Min editdistance: 1.00
Closest candidate: 0 1 if (front === '_' || front === '.'){
0 1 if (front === '_' || front === '.'){
0 2 return next(null);
0 3 }
0 5 var firstDir = dirs.shift();
0 6 switch (firstDir){
0 7 case'static':
0 8 return themeDir + item themeDir + '_' + item;
0 9 break;
0 10 case 'layout':
0 11 file.read(themeDir + item, function(err, content){
0 12 if (err) throw err;
0 13 var filename = path.basename(item, extname);
0 14 content = yfm(content);
0 15 layout = layout.toLowerCase();
0 16 if (layout === 'page'){
0 17 return Promise.resolve(layout);
0 18 } else {
0 19 return content;
0 21 });
0 22 var result = render.renderSync({ extname: path.extname(themeDir), path: themeDir });
0 23 return result;
0 25 };
0 26 exports.render = function(template, locals, callback){
0 27 if (_.isFunction(locals)){
0 28 callback = locals;
0 29 locals = {};
0 31 var layout = cache[template],
0 32 body = partial.render(layout.source, layout._content, locals);
0 33 if (layout.layout && cache.hasOwnProperty(layout.layout)){
0 34 var parent = cache[layout.layout];
0 35 var newLocals = _.clone(locals);
0 36 newLocals.body = body;
0 37 var content = partial.render(parent.source, parent._content, newLocals);
0 38 return Promise.all([
0 39 render.render(newLocals, body),
0 40 render.renderSync(newLocals)
0 41 ]).spread(function(result){
0 42 var result = render.renderSync(content, newLocals);
0 44 }).then(function(){
0 49 exports.renderSync = function(layout){
0 50 return locals = _.clone(layout);
0 51 };"

1 7 case'source':
1 8 return themeDir + item themeDir + item themeDir + '_';
1 11 return layout + item themeDir + item themeDir + '_';
1 14 return layout + item themeDir + layout + '_';
1 16 case 'create':
1 17 return themeDir + newlayout + item_layout + '_';
1 19 default:
1 20 var ext = extname;
1 21 if (ext === '.'){
1 24 return next(new TypeError('No such file or directory "%s"', extname));
1 27 }, callback);
1 30 var _layout = function(layout, content){
1 32 content = content.replace(/<h3>.*?<\\/h3>/g, '');
1 34 content = content.replace(/<h1>.*?<\\/h1>/g, '');
1 36 var result = render.renderSync(content, extname, newLocals);
1 39 module.exports = function(options, callback){
1 40 if (_layout.is_false){
1 41 options = _layout.call(options, callback);
1 43 var layout = options.layout === undefined? true : options.layout,
1 44 content = [layout];
1 45 var content = partial.renderSync(content, options);
1 46 if (layout){
1 47 var content = content.replace(_layout.photo, options);
1 49 content = page.photos[layout];
1 51 var result = render.end_photo = result;
1 52 if (layout = layout.length = layout.length < end_length) + 1;
1 54 return result.replace _layout = false;
2 5 if (dirs[0] === 'layout'){
2 6 file.read(themeDir + item, function(err, file){
2 8 var filename = path.basename(item, extname),
2 9 dirs = item.split('/');
2 10 for (var i=0, len=dirs.length; i<len; i++){
2 11 var front = dirs[i].substring(0, 1);
2 32 for (var j=0, len=dirs.length; j<len; j++){
2 39 file.read(themeDir + item, function(err, function(err, item){
2 40 if (err, file){
2 43 file.contentType === 'layout'

3 8 cache[filename] = yfm(file);
3 9 cache[filename].source = themeDir + item;
3 10 next(null);
3 13 if (_.indexOf(renderer, extname.substring(1))!== -1){
3 14 render.compile(themeDir + item, function(err, result, output){
3 16 var outputFile = output? item.replace(extname, '.' + output) : item;
3 17 file.write(publicDir + outputFile, result, next);
3 20 file.copy(themeDir + item, publicDir + item);
3 25 })
4 5 if (!dirs.length) return next(null);
4 6 var src = path.join(themeDir, item);
4 7 return render.compile(src, extname, next);
5 23 var outputFile = output? item.replace(extname, '.' + output) : output;
6 13 if (_.indexOf(list, extname.substring(1))!== -1){
7 8 var view = themeDir + item;
7 9 file.dir(view, function(files){
7 10 async.forEach(files, function(item, next){
7 11 var extname = path.extname(item),
7 12 filename = path.basename(item, extname),
7 20 if (options.only){
7 21 var obj = _.extend(default, obj);
7 25 obj.forEach(function(err, i){
7 31 filename = path.basename(item, extname);
7 39 obj.onlyOnce.push(next);
7 46 obj.each(function(err, i){
7 47 if (err)=obj.val === 0? null : err;
7 48 next(obj);
7 57 exports.render.renderSync = function(options, options){
7 58 options = options, function(obj){
7 59 options = _.options = _.extend({
7 60 back = options, cache: true,
7 61 back = options.back =!= null,
7 62 }, options.layout = false,
7 63 ignore = options.layout = false,
7 64 ignore = false;
7 65 var output = options.collection;
7 66 var i, locals = options.collection;
7 67 var i = _.collection;
7 68 var iList = this;
7 69 var locals = this;
7 71 var result = this;\
8 9 view.render(view, options, function(err, result){
8 11 if (result.readable){
8 12 file.copy(themeDir + item, publicDir + dirs.join('/'), next);
8 14 file.write(publicDir + item, result, next);
8 19 render.compile(themeDir + item, function(err, result){
8 28 var content = file.readFileSync(themeDir + item);
9 7 case'static/'/.test(firstDir) && themeDir.isatty(1) &&!~extname.indexOf('.'))){
9 15 cache[filename] = yfm(content);
9 21 var content = swig.compile(content);
9 22 ext(null);
9 40 var content = body;
9 42 callback(newLocals);
