Min editdistance: 16.00
Closest candidate: 9 22 if (item == null) {
1 1  else {
1 2 this.statusCode = body;
1 3 body = arguments[1];
1 4 }
1 6 var app = this.app;
1 7 var replacer = app.get('json replacer');
1 8 var spaces = app.get('json spaces');
1 9 var body = JSON.stringify(this.statusCode, replacer, spaces);
1 10 this.charset = this.charset || 'utf-8';
1 11 this.set('jsonp callback name', 'callback');
1 12 this.set('views', process.cwd() + '/views');
1 14 this.locals = function(obj){
1 15 for (var key in obj) {
1 16 this.locals[key] = obj[key];
1 18 return this;
1 19 };
1 20 this.use(function(req, res, next){
1 21 var charset;
1 22 res.locals.isAbsolute =!! ~charset.indexOf('-))? ~res.indexOf('-') :
1 23 true;
1 24 next();
1 25 });
1 26 this.use(function(err, req, res, next){
1 28 res.locals.isAbsolute =!! ~res.indexOf('-')?!! ~res.indexOf('-') :
1 33 res.locals.isAbsolute =!! ~res.indexOf('-')?!!== -1 :
1 38 res.locals.isAbsolute =!! ~res.indexOf(this.get('-') || '') + err.indexOf('to') > 0;
1 39 res.locals.toString();
1 43 this.use(function(req, res){
1 44 res.status(res, ranges, ranges = this.setHeaders, ranges);
1 45 res;
1 46 res.setHeaders(req, headers);
1 47 res.setHeaders, statuses;
1 49 res. statuses;
1 51 res.res;
1 54 res = statuses;
1 55 res.res.res;
1 56 res.completion;
1 57 res.completion;"

2 1 '

3 1  :
5 7 var replacer = app.get('json replacer') || {};
5 9 var body = JSON.stringify(req.body || JSON.stringify(this.statusCode));
5 10 this.statusCode = this.statusCode;
5 11 this.readable = this.app.get('json').toString();
5 18 this.locals.use = function(fn){
5 19 if (3 == fn.length) {
5 20 if (4 == fn.length) {
5 21 this.viewCallbacks.push(fn);
5 22 } else {
5 23 this.viewCallbacks.push(function(req, res, done){
5 24 fn(req, res);
5 25 done();
5 32 res.setHeader('X-Powered-By', 'Express');
5 33 req.app = res.app = self;
5 34 req.res = res;
5 35 res.req = req;
5 36 req.next = next;
5 37 res.locals = function(obj){
5 39 res.locals[key] = obj[key];
5 41 return res;
5 47 res.status(res.send(res.send());
5 50 this._router.use(function(req, res, function(req, res, next){
5 51 var router, done){
5 52 var router, methods = route, app, __proxies = 0;
5 53 res.__proxies = 0;
5 54 res.__proxies.forEach = 0;
5 55 res.__proto__proxies.forEach(function getProxies.length__proxies.length__proxies.length__());
5 56 router.handle = getProxies();
5 57 router.params = getProxies;
5 58 if (__proxies.isCallbacks.some) function no(router) {
5 59 router.handleStackTraces.forEach(function (method) {
5 60 router._proxies = function
9 6 res.json = function(obj){
9 7 if (2 == arguments.length) {
9 8 this.statusCode = obj;
9 9 obj = arguments[1];
9 16 var keys = Object.keys(obj);
9 17 var key = '';
9 18 var i, len, item;
9 19 for (i = 0, len = keys.length; i < len; i++){
9 20 key = keys[i];
9 21 item = obj[key];
9 22 if (item == null) {
9 23 view = this.get('Link');
9 24 break;
9 27 this.links = function(links){
9 28 return this.set('Link', Object.keys(links).map(function(rel){
9 29 return \'<\' + links[rel] + \'>; rel="\' + rel + \'"\';
9 30 }).join(', \'));
9 32 res.send = function(body){
9 33 var req = this.req;
9 34 var head = \'HEAD\' == req.method;
9 35 var len;
9 36 var self = this;
9 41 if (self.req.fresh) this.statusCode = 304;
9 42 if (204 == this.statusCode || 304 == this.statusCode) {
9 43 var err = new Error(\'status code of "\'+ this.statusCode + \'"\');
9 44 err.statusCode = parseInt(err.toString());
9 45 if (err) {
9 46 err.message = \'should.remove();
9 48 error = \'StatusCode = \'Expected to \'Expected to "";\';
9 49 return this.statusCode = \'
9 51 this.write(this.set(\'Content-Encoding\', self.headers\', stat);
9 52 this.set(\'Content-Encoding\', function(err){"

