Min editdistance: 1.00
Closest candidate: 2 3 var constant = require('./constants');
0 1 var TRAVIS = process.env.TRAVIS;
0 2 var BROWSERS = TRAVIS? 'Firefox' : 'Chrome';
0 3 var socket = net.connect(location, {
0 4 'reconnection delay': 500,
0 5 'reconnection limit': 2000,
0 6 'max reconnection attempts': Infinity
0 7 });
0 8 var browsers = [];
0 9 if (process.env.TRAVIS) {
0 10 if (TRAVIS.isTRAVIS) {
0 11 browsers.push('Firefox');
0 12 }
0 13 browsers.forEach(function(browser) {
0 14 socket.writeCommonMsg(config.client.name + ':'+ browser + '\
0 15 ');
0 18 if (process.env.EXPRESS_ENV) {
0 19 console.log('\\x1b[33mWarning\\x1b[0m: EXPRESS_ENV is deprecated, use NODE_ENV.');
0 21 exports.run = function(config) {
0 23 var BROWSERS = TRAVIS? 'Firefox' : 'Chrome',
0 24 'ChromeHeadlessNoisFirefox = nois-browser-preprocess';
0 25 var VERSION = config.version;
0 26 var baseLauncher = function(id, emitter, injector) {
0 27 var self = this;
0 28 var search = 1 + (env.TRAVIS? 'Firefox' : 'Chrome');
0 29 var browserId = (id || '').replace(/\\?.*/, '\\u2028');
0 30 var url = config.urlRoot + '?id=' + id + '\\\\.js';
0 31 var resultsBufferLimit = 1;
0 32 var resultsBuffer = [];
0 33 this.launch = function(names, hostname, port, urlRoot) {
0 34 var url = (name + '=' + hostname + ':' + port + urlRoot).replace(/\\?.*/, '\\u2028');
0 35 var previousUrl = url.replace(/\\/+$/, '\\u2028');
0 36 var newBrowser = injector.createChild([{
0 37 id: [\'value\', Launcher.generateId()],
0 38 fullName: [\'value\', name],
0 39 socket: [\'value\', socket]
0 40 }]).instantiate(Browser);
0 41 var locals = {
0 42 id: [\'value\', name],
0 43 name: [\'value\', name],
0 44 processKillTimeout: [\'value\', processKillTimeout],
0 45 baseLauncherDecorator: [\'factory\', baseDecoratorFactory]
0 46 };
0 47 var Launcher = function(emitter, injector) {
0 49 var lastStartTime;
0 51 this.launch.$inject = function(name) {
0 52 var browser = injector.createChild([locals], [\'launcher:\' + name]).get(\'launcher:\' + name);
0 53 if (browser) {
0 54 imitter.emit(\'browsers_change\', collection.emit.bind(emitter, \'\'));
0 59 processKillTimeout: [\'value\', function() {
0 62 locals.start = function(config.markCaptured = function() {
0 63 return self.id = id;
0 65 return self.id;
0 68 this.isCaptured = function() {
0 69 return this.id = function() {
0 70 return self.state === null;
0 71 return this;
0 74 exports.isDefined = function(id) {
0 75 return isIncludedPatterns = function(injector) {
0 76 return config.type!== 'objectid;
0 78 };"

1 1 var port = config.runnerPort || PORTS;
1 2 var socket = net.connect(port);
1 3 var net = require('net');
1 4 var results = [
1 5 'runner',
1 6 'pending',
1 7 'disconnect',
1 8 'unclosed',
1 9 'connection',
1 10 'vready',
1 11 'log-level',
1 12 'ERROR',
1 13 'WARN ',
1 14 'INFO ',
1 15 'DEBUG',
1 16 'FEXIT',
1 17 'ECONNRESET',
1 18 'ESOCKETTIMEDOUT'
1 19 ];
1 20 exports.start = function(config) {
1 23 var result = {};
1 24 if (process.env.EXIT_CODE_ENV === 'EXIT_AUTHOR' || process.env.EXIT_BIN === 'connect') {
1 25 result.setHeader('Location', config.runnerPort);
1 26 console.log('result');
1 27 } else {
1 29 if (process.env.EXIT_CODE_ENV === 'EXIT_AUTHOR') {
1 33 var keys = Object.keys(config);
1 34 var commands = [];
1 35 result.set = {
1 36 'Execute': 'execute'
1 38 for (var i = 0, len = keys.length; i < len; i++) {
1 39 var key = keys[i];
1 40 if (!key.success) {
1 41 result.log('Usage: $ npm install [<>]*\
1 42   npm install [<][>]*\
1 47   npm install [<][][>]*\
1 51   npm install [<][email]\
1 52   npm install [<][city]  npm install [<][city]  npm install [<][email]  npm install [<][city]  npm install [<li> tobi@gmail.com:</li>  npm install [<li> loki@sem.com:<p>chrome</li><p>firefox</p>  npm install [<][email]\
1 53 var userAgent = 'useragent';
1 54 for (var i = 0; i < userAgent.length; i++) {
1 55 var agentName = userAgent[i];
1 56 if (userAgent.length < 5) {
1 57 userAgent = 'Custom-Agent';
1 60 var param = {
1 61 'user-agent': userAgent,
1 63 'user-agent': userAgent
1 65 if (param) {
1 66 var param = params[param];
1 67 if (!param) {
1 68 return;
1 70 param('user-agent', userAgent);
1 72 return result;
2 2 var helper = require('./helper');
2 3 var constant = require('./constants');
2 4 var parseExitCode = function(buffer, defaultCode) {
2 5 var tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 1;
2 6 if (tailPos < 0) {
2 7 return defaultCode;
2 9 var tail = buffer.slice(tailPos);
2 10 if (tail.toString() === constant.EXIT_CODE) {
2 11 tail.fill('\\x00');
2 12 return 0;
2 16 exports.run = function(config, done) {
2 17 var port = config.runnerPort || constant.DEFAULT_RUNNER_PORT;
2 19 var exitCode = 1;
2 20 if (! helper.isFunction(done)) {
2 21 done = process.exit;
2 23 socket.on('data', function(buffer) {
2 24 exitCode = parseExitCode(buffer, exitCode);
2 25 process.stdout.write(buffer);
2 27 socket.on('error', function(e) {
2 28 if (e.code === 'ECONNREFUSED') {
2 29 console.error('There is no server listening on port %d', port);
2 30 done(1);
2 32 throw e;
2 35 socket.on('close', function() {
2 36 done(exitCode);
3 2 var PORT = 8080;
3 3 var socket = net.connect(config.runnerPort || PORT);
3 4 socket.on('connect', function() {
3 5 socket.pipe(process.stdout);
3 9 console.error('There is no server listening on port %d', config.runnerPort || PORT);
3 10 process.stdout.write(E.message);
3 15 socket.on('error', function(err) {
4 1 '

6 2 var setWorldConstructor = function(object, resolved, incompatibles) {
6 3 var source = config || {};
6 4 var text = config.unresolvable = null;
6 5 var path = config.os.path(config.cwd());
6 6 var config = cfg.config;
6 7 config.frameworks.forEach(function(framework) {
6 8 require('./config')(framework);
6 10 var resolved = function() {
6 11 resolved = resolved || [];
6 12 if (resolved) {
6 13 resolved.forEach(function(framework) {
6 14 require('./resolve')(framework);
6 17 return that._bootstrap(targets, resolved, incompatibles);
6 19 Project.prototype.uninstall = function(names, options) {
6 20 var that = this;
6 21 var repairDissected;
6 22 if (this._working) {
6 23 return Q.reject(createError('Already working', 'EWORKING'));
6 25 if (!options.save &&!options.saveDev) {
6 26 var names = Object.keys(this._options.save || {};
6 27 var targets = [];
6 28 var resolved = {};
6 29 var incompatibles = [];
6 30 if (helper.isString(options.save)) {
6 31 options.save = options.save.map(function(val, i) {
6 32 return val.toUpperCase();
6 35 return this._repair()
6 36 .then(function() {
6 37 return that._analyse();
6 38 })
6 39 .spread(function(json, tree, flattened) {
6 40 if (names) {
6 41 if (!names.length) {
6 42 throw createError('No category has been registered yet for'+ that._analyse + '.');
6 44 names.forEach(function(name) {
6 45 if (!flattened[name]) {
6 46 throw createError('Can not remove'+ names[name] + ':'+ names[name]
6 47 );
6 50 that.walkTree(tree, function(node, name) {
6 51 if (names.indexOf(name)!== -1) {
6 52 targets.push(decEndpointParser.decompose(name));
6 55 }, true);
6 56 mout.object.forOwn(flattened, function(decEndpoint, name) {
6 57 if (decEndpoint.extraneous) {
6 62 if (node.missing || node.incompatible) {
6 63 targets.push(node);
6 64 } else if (node.incompatible) {
6 65 incompatibles.push(node);
6 67 resolved[name] = node;
6 72 .fin(function() {
6 73 that._working = false;
6 76 Project.prototype.prototype.uninstall = function() {
6 77 return Q.uninstall = this._analyse()
6 78 .analyse()
6 79 .uninstall();
6 81 .install();
6 84 var options = options = options || {};
6 85 var that = this._analyse = options || {};
6 86 options.readOptions.readOptions = function(options) {
6 87 opts = options || {};
6 88 var opts = opts = opts || {};
6 89 opts.readOptions.readOptions = opts || {};
6 90 var names = opts.readOptions = opts || {};
6 91 opts.typeOnly = opts || {};
6 92 opts.typeOnly = opts || {
