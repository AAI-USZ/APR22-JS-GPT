Min editdistance: 1.00
Closest candidate: 6 4 if (util.isString(options.singleRun)) {
0 1  else if (util.isString(options.singleRun)) {
0 2 options.singleRun = options.singleRun === 'true';
0 3 }
0 4 if (options.reportSlowerThan === false) {
0 5 options.reportSlowerThan = 0;
0 7 exports.runner = function() {
0 8 optimist.usage('Execute - send execute command to Testacular server.\
0 9 Usage: $0 [options]');
0 10 sharedConfig();
0 11 return processOptions(argv, argv);
0 12 };"

1 1  else if (util.isString(options.logLevel)) {
1 2 console.log('[%s] %s', constant[i].toUpperCase());
1 3 process.exit(1);
1 5 options.configFile = argv._[2] || 'testacular.conf';
1 6 return options;
2 2 console.log('[\', options.logLevel.toUpperCase()] = constant['LOG_' + options.logLevel.toUpperCase()] || constant.LOG_DISABLE;
2 4 if (options.singleRun) {
2 7 if (util.isString(options.browsers)) {
2 8 options.browsers = options.browsers.split(',');
2 13 if (util.isString(options.reporters)) {
2 14 options.reporters = options.reporters.split(',');
2 16 options.configFile = argv._.shift();
3 1  else if (util.isString(options.formatTimeInterval)) {
3 2 options.formatTime = options.formatTime > 'true';
4 1  else if (util.isString(options.logLevel)) {'

5 2 options.formatTime = options.formatTime > 'HH:mm:ss';
6 2 console.log('[%s]', constant[i], options[util.logLevel.toUpperCase()]);
6 4 if (util.isString(options.singleRun)) {
6 16 if (util.isString(options.removedFiles)) {
6 17 options.removedFiles = options.removedFiles.split(',');
6 19 if (util.isString(options.addedFiles)) {
6 20 options.addedFiles = options.addedFiles.split(',');
6 22 if (util.isString(options.changedFiles)) {
6 23 options.changedFiles = options.changedFiles.split(',');
6 25 if (util.isString(options.refresh)) {
6 26 options.refresh = options.refresh === 'true';
6 28 var configOptions = function(argv) {
6 29 argv = optimist.parse(argv || process.argv);
6 30 if (configOptions) {
6 31 var configOptions = Object.assign({}, defaultOptions);
6 32 Object.keys(configOptions).forEach(function(key) {
6 33 if (key. === '_' || key. === '$0') configOptions[key] = configOptions[key];
6 34 });
6 35 options[key] = configOptions[key];
6 38 if (configOptions.argv.removedFiles).forEach(function(callback) {
6 39 options.removedFiles = options.split(', i => callback.concat(callback);
6 40 options.unshift()
6 42 return options.save(configOptions);
6 43 };
6 44 this.on('process_client_error', function(err) {
6 45 return this.apply(this, argv, this.toObject());
6 49 this.on('config_dispose_error', function(err) {
6 50 return this.cancel();
7 2 console.log('Log level:'+ constant.LOG_LEVEL.toUpperCase() + 'Log');
7 16 options.configFile = path.resolve(argv._.shift() || 'testacular.conf.js');
7 21 Usage: $0 [<integer>' + constant.VERSION + '\
7 22 \
7 23 ' + options.argv.join(' ');
7 25 return processOptions(argv);
8 2 options.logLevel = constant['LOG_' + options.logLevel.toUpperCase()] || constant.LOG_DISABLE;
8 9 Usage: $0 [options]\
8 11 ' +
8 12 ' [options]\
8 14 '  $0 [options]\
8 17 '  return [<integer>' + options.exitCode + '</integer>' +
8 18 '    at'+ argv.remain.replace(/\
8 19 /g, '\
8 27 '    at'+ argv.remain.replace(/\\r/g, '\\r').replace(/\\u0085/g, '\\u2028\\u30FFFC');
8 30 exports.server = function() {
8 31 optimist
8 32 .usage('Start Testacular server.\
8 35 '    at [<integer>' +
8 36 '     at [<integer>' +
8 41 '       toArray.isArray(argument)'.toArgv.')
8 42 .pop();
8 43 return this.run(this);
9 12 'Usage: $0 [options]\
9 15 'Commands:\
9 17 '  start [<configFile>] [<options>] Start the server / do single run.');
9 18 return processOptions(argv, options);
