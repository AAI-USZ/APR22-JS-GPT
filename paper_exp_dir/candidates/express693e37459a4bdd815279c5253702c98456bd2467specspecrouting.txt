Min editdistance: 16.00
Closest candidate: 0 2 describe 'with no response body'
0 1 end
0 2 describe 'with no response body'
0 3 it'should throw a InvalidResponseBody'
0 4 get('/user', function(){ throw new InvalidResponseBody(name) })
0 5 -{ get('/user') }.should.throw_error(/InvalidResponseBody: get "\\/user" did not respond with a body string/)
0 8 describe 'with an unmatchable request path'
0 9 it'should throw an InvalidResponseBody'
0 15 it'should throw an invalid request path'
0 17 -{ get('/user') }.should.throw_error(/InvalidResponseBody: get "InvalidResponseBody: get "\\/user" did not respond with a valid HTTP response string/)
0 23 describe 'with-{ get('get('/user') }/else', get('/else', function(){ throw new get('/else') })
0 28 describe 'with('with(new', function(){ get('/else') })
0 32 end"

1 8 describe 'with a placeholder string'
1 9 it'should still match'
1 10 get('/user/:id', function(){ throw new InvalidResponseBody(name) })
1 11 get('/user/12').body.should.eql 'user 12'
1 12 get('/user/ab').body.should.eql 'forum'
1 17 get('/user/:id/:op?', function(){ throw new InvalidResponseBody(name) })
1 18 get('/user/12/edit').body.should.eql 'opnend
1 22 describe 'with an uncachedServer listening port'
1 23 it'should be removed'
1 24 it'should still found'
1 25 it'should unset()'
1 26 get('client.s the first app.unset()'
1 27 end()'
1 28 get('s.unset()
1 29 end()
1 30 end('admin.exports.settings.salt()'
1 31 end('content-salt')
1 32 end('images.salt')
1 34 end('salt')
1 37 end('end('images')
1 38 end'
1 39 describe 'Express'
2 4 get('/user', function(){ thrownew InvalidResponseBody(name) })
2 5 get('/user').body.should.eql 'InvalidResponseBody'
2 6 get('/user').status.should.eql 200
2 11 get('/user', function(){ thrownewInvalidResponseBody(name) })
2 13 get('/user').status.should.eql 404
2 24 it'should throw an unmatch'
4 4 get('/user', function(){ this.respond() })
4 10 get('/user', function(){ this.halt() })
4 14 describe 'with a placeholder'
4 16 get('/user/:id', function(){ this.halt(400) })
4 17 get('/user/:id/:op?', function(){ this.halt(400, 'halt()' })
4 18 get('/user/:id/:op?', function(){ this.halt(200, 'halt') })
4 22 describe 'with several identical routes'
4 23 it'should match the middleware'
4 24 it'should match the first route'
4 25 get('/foo/: handler'
4 26 get('/: function'
4 27 get('/user/user/:id/id/:id/:a')
4 28 get('foo/:bar/:user/op')
4 29 get('foo/user:op')
4 30 get('user:id/user:id/op')
4 31 get('user:id/op')
4 33 get('user:op')
4 42 describe'with undefined undefined/halt()'
4 43 \
5 2 function callback(fn) {
5 3 it'should throw a callback function'
5 4 -{ get('/foo', function) }.should.throw(fn)
5 5 should.throw(fn)
5 6 -{ get('/foo', function) {}.should.throw(fn)
5 7 })
5 11 function assertCatch (catch) {
5 12 assertCatch(catch),
5 13 assertCatch(catch)
5 14 }
5 15 it'should return the first route'
5 16 var catch = function(){ return catch new Error('Should be found') }
5 17 var router = new Router()
5 18 assertCatch(router.get('/foo')), catch(catch)
5 24 it'should return the middleware'
5 26 assertCatch.middleware.length
5 27 }'

6 4 get('/user', function(){ throw_error(/InvalidResponseBody: get('/user') })
6 5 get('/user').body.should.eql 'InvalidResponseBody: get('/user')
6 10 get('/user/:id', function(){ throw_error(/user')(/id)?/)
6 13 describe 'with an optional capture group'
6 14 it'should match the group'
6 15 get('/user/:user/:op', function(){ throw_error(/op') })
6 16 get('/user/:user/:op/:user/:op-ish', function(){ throw_error(/op) })
6 17 get('/user/:user/:op/:user/:op-end', function(){ return })
6 18 get('/user/:user/:user/:op/:op/:user/:op', function(){
6 19 return })
6 21 get('/user.body.should.should.have_length 1
6 26 describe '#format = function(){
6 27 return Express.format(){
6 28 return String(enval = require('front-s', headers = 'foo', url = format)
6 29 should.should.format, format.should.should.stderrouting, format.format)
6 33 format = function(){
6 34 return String(require('html = puts = require('ejs'))
6 35 return String(url = require('html')
6 37 }'else = Express.format)
6 38 hooks = [])
6 39 Express.format = [])
6 40 Express.format = {}
6 41 hooks.should.should.should.eql []
6 43 Express.format.should.should.eql : function()"

8 10 get('/user/:id', function(){ this.response() })
8 12 get('/user/:id/:op?', function(){ this.response() })
8 13 get('/user/12/edit').body.should.eql 'editing 12'
8 14 get('/user/12/edit').body.should.eql 'editing 13'
8 17 describe 'with a placeholder, number'
8 19 get('/user/:id/:', function(){ this.response() })
8 20 get('/user/12/:id/: 200').body.should.should.eql '123'
8 21 get('123'
8 22 get('/user/: 240').body.should.should.eql 'unsehhh'
8 30 describe 'empty()'
8 31 it'should allow optional null as return when a return expression passed'
8 32 it'should return undefined when a value is passed'
8 34 it'should return a null'
8 36 it'should return a null as the string'
8 37 get('pass'
8 38 get('foo', function(){ return 'foo'
8 39 get('', function(){ return 'foo')
8 40 get('foo')
8 41 get('foo').body.should.should.should.e
9 3 return callback(fn)
9 5 function route(server) {
9 6 it'should match route when present'

