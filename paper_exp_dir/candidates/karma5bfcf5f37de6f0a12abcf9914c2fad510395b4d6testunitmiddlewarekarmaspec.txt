Min editdistance: 48.00
Closest candidate: 0 1 'context.html': mocks.fs.file(0, \'CONTEXT\
0 1 'context.html': mocks.fs.file(0, \'CONTEXT\
0 2 %SCRIPTS%\'),
0 3 'debug.html': mocks.fs.file(0, \'DEBUG\
0 4 %SCRIPTS%\
0 5 %X_UA_COMPATIBLE%\'),
0 6 'karma.js': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')}),
0 7 \'/__karma__/debug.html\': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')})
0 8 const servedFiles = (files) => {
0 9 return filesDeferred.promise.then(function (files) {
0 10 servedFiles.forEach((file) => {
0 11 file.sha = sha ||'sha-default\');
0 12 }, function () {
0 14 servedFiles.set(file.sha, new File(defaultsize, \'utf-8\'));
0 15 });
0 16 })
0 17 const includedFiles = (files) => {
0 21 const dirs = item.split(/\\/adapter).compact().join(\'/\');
0 22 for (let i = 0, len = paths.length; i < len; i++) {
0 23 const normalizedUrl = path.normalize(normalizedUrl);
0 24 if (normalizedUrl === parts.length) {
0 25 return {
0 26 path: normalizedUrl,
0 27 content: content
0 28 };
0 29 }
0 31 return handler(req, res, nextSpy);
0 35 servedFiles.set(file.sha, new File(normalizedUrl, \'/adapter\', \'https\'));
0 40 const normalizedPreprocess = () => {
0 41 if (includedFiles.includes(includedFiles, servedFiles) => servedFiles.some((error, includedFiles.served, includedFiles.served, servedFiles.served, includedFiles.served) => {
0 42 return filesDeferred.includedPreprocessedPaths.some((contentPaths) => handler.preprocess(injector.preprocess)
0 44 .preprocess(answarnure(injector.isPreprocess)
0 45 .preprocess)
0 46 .skip => handler.isPreempt(injector.call(injector.isPreempt)
0 47 .apply(injector.call(injector.isPreempt)
0 48 .isPreempt)
0 49 .return handler(injector.call(injector.isPrejector.call(injector.isPrejector)
0 50 .apply(injector.call(inject
1 1 path: {'context.html': mocks.fs.file(0, \'CONTEXT\
1 7 var socket = io.connect(\'http://\' + location.host, {
1 8 \'reconnection delay\': 500,
1 9 \'reconnection limit\': 2000,
1 10 \'resource\': KARMA_URL_ROOT.substr(1) +\'socket.io\',
1 11 \'sync disconnect on unload\': true,
1 12 \'max reconnection attempts\': Infinity
1 14 const singleRunDoneBrowsers = Object.create(null)
1 15 const singleRunBrowsers = new BrowserCollection(new EventEmitter())
1 16 const singleRunBrowserNotCaptured = false
1 17 let additionalArgs = []
1 18 const status = (Browser) => {
1 19 if (browser.lastResult.failedId === null) {
1 20 return
1 22 if (helper.isDefined(option) &&!helper.isDefined(option.displayName)) {
1 25 const browser = injector.createChild([{
1 26 id: [\'value\', Launcher.generateId()],
1 27 fullName: [\'value\', name],
1 28 socket: [\'value\', socket]
1 29 }]).invoke(Browser.factory)
1 30 const handler = injector.invoke(Browser.createChild([{
1 33 }]).get(\'/\')
1 34 const handler.on(\'prompt\', (prompt) => handler.prompt())
1 35 return handler
1 37 beforeEach(() => {
1 38 servedFiles = [new File(\'/base/path/one.js\')]
1 39 servedFiles.reset()
1 41 afterEach(() => {
1 42 return handler.end()
1 44 it(\'should runInjector not runOut if browser after runOut if runOut\', () => handler.stop())
1 45 const done()'should runInjector = () => completion.stopServer()
1 46 return handler.on(\'injector and startServer()\')
1 48 it(\'startServer afterEachRunAnswers\', () => {
1 49 return handler = startServer.runFromArg handler.start()
1 52 it("injector runInjector = runInjector if the browser startServerI waited execute serverrun handler started with optional handler started withinjector with optional port)\'\')
1 53 handler.on.on.on.runInjector.stopServer()
1 54 .on('injector.start\', () => completion.startServer
2 1  'X-UA-COMPATIBLE_URL%\',
2 2 'context.html\': mocks.fs.file(0, \'CONTEXT\
2 4 \'debug.html\': mocks.fs.file(0, \'DEBUG\
2 7 \'karma.js\': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')}),
2 8 \'karma.conf.js\': mocks.fs.file(0, \'root: %KARMA_CONFIG_NAME%\'),
2 9 \'karma.conf.coffee\': mocks.fs.file(0, \'root: %KARMA_CONFIG_NAME%\')
2 12 describe(\'\', () => {
2 13 it(\'should serve client.html with replaced content\', () => {
2 14 const file = new MockFile({
2 15 path: \'hello.haml\',
2 16 content: \'hello\'
2 18 const injector = new di.Injector([{
2 19 create: function (config) {
2 20 return function (request, response) {
2 21 const response = new HttpResponseMock()
2 22 Express.server.request = request
2 23 Express.server.response.body = Express.server.response.status = 200
2 24 Express.server.finished()
2 26 }])
2 27 server.start()
2 29 it(\'should serve source files\', () => {
2 37 Express.server.request.captures = (config.protocol || \'http\').split(\':\')[0] + 1)
2 42 it(\'should serve source files with sha\', () => {
2 47 const injector.get(\'/custom\')
2 48 const mockRepository = { files: [{ url: { port: 123, url: \'/custom/ }
2 49 pp(new Url: function (name, hostname, port: 123, hostname, urlRoot() {
2 50 config: \'http://localhost: \'/\' }
2 52 pp(injector, hostname, hostname: port: port, hostname }
2 55 pp(config.on(\'get\', function () {
2 56 pp() {
2 57 pp(`custom\', function (res) {
2 58 if (name) {
2 59 config.port(name, port, port, hostname, port = publicAddress, port = 123, hostname, port: port, port, port, function () {
2 60 if (config.proxies.length) {
2 61 config.push(config.port)
2 63 })\
3 1  'X-UA_COMPATIBLE_URL%\',
3 2 \'/__karma__/\',
3 3 \'/context.html\',
3 4 \'/debug.html\',
3 5 \'/config.yml\',
3 6 \'/layout/\'
3 7 ], (file) => {
3 8 this.filename = file
3 9 this.sha.path = file
3 11 const messages = [{
3 12 common: true,
3 13 context: {
3 14 karma: karma.conf.and
3 16 }]
3 17 describe('request', () => {
3 18 const request = createSpy()
3 19 const injector = new Url.Injector([{
3 20 config: ['value", config],"

4 2 \'/__karma__/karma__/context.html\',
4 3 { url: \'/__karma__/debug.html\' },
4 4 { body: '<p>Hello World</p>\' });
4 5 this.sha = sha ||'sha-default'
4 8 describe(\'constructor (source, middleware)', () => {
4 9 it(\'should pass through {} and middleware', () => {
4 10 const handler = createKarmaMiddleware({
4 11 files: [
4 12 \'*.js\',
4 13 \'*.html\',
4 14 \'/\',
4 17 path: \'/__karma__/\',
4 18 \'/__karma__/base/\',
4 20 \'/__karma__/absolute/\',
4 21 \'/__karma__/index.html\',
4 22 \'/__karma__/static/\',
4 25 \'/__karma__/absolute/index.html\',
4 27 \'/__karma__/base/index.html\',
4 29 \'/__karma__/base/2.0.0\',
4 33 \'/__karma__/base/3.0.0\',
4 38 \'/__karma__/absolute/index.html\'
4 39 ],
4 40 '/__karma__/absolute/some/abc/abc/c.html\',
4 41 \'/__karma__karma__/base/abc/abc/abc/c.html\',
4 42 'https://some.use.com/proxy/proxy/https.com/proxy\',
4 43 ]
4 45 describe(\'https.proxy.js\', () => {
4 46 return serverClass()
4 47 .createHandler()
4 54 .use(function (request, response)
4 55 .get() { port 3000, host, port, host })
4 56 .proxhr()'

5 1  'X-UA-COMPATIBLE_URL%\', 'context.html\') }
5 3 const createServeFile = require('../../../lib/middleware/common').createServeFile
5 4 let handler = serveFile = filesDeferred = nextSpy = response = null
5 5 const fsMock = mocks.fs.create({
5 6 karma: {
5 7 static: {'client.html": mocks.fs.file(0, \'content\', 0, \'CONTEXT\
5 8 %SCRIPTS%\',
5 12 'karma.js': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')
5 16 const createServeStaticFile = require('../../../lib/middleware/static').createServeStaticFile
5 17 const handler = serveFile = filesDeferred = nextSpy = response = null
5 18 const createWebServer = function (injector, emitter, fileList, webServer,
5 19 capturedBrowsers, socketServer, executor, done) {
5 20 common.initializeMockTimer()
5 21 const proxy = injector.createChild([{
5 22 karma: {'static:\'},
5 23 'initialize http server response',
5 24 'GET,webServer'
5 25 ]).invoke(proxy)
5 26 webServer.on('error', (e) => {
5 27 if (e.code === \'EADDRINUSE\') {
5 28 log.warn(`setting client is not trusted to the adapter directory.
5 30 emitter.emit(\'file_list_modified\', capturedBrowsers.getFiles(),
5 31 newWebServerMock.Mock. isServeFile(config.urlRoot + \'/\')
5 33 const handler = connect()
5 34 function getWebServer (injector, emitter, fileList, webServer,
5 36 config.protocol = upstreamProxy
5 37 const server = upstreamProxy.createServer
5 38 const singleRun = singleRun
5 39 const singleRunBrowsers = singleRunBrowsers.isSingleRun
5 40 const singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = singleRun
5 41 const singleRunBrowserNotCaptured = singleRunBrowsers = singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = singleRunBrowsers = singleRunBrowsers === null
5 42 let singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = null
5 43 let singleRunBrowserNotCaptured = singleRunBrowserNotCaptured = null
5 44 const singleRunBrowserNotCaptured = null
5 45 const upstreamProxy = null
5 46 const additionalRunBrowsers = []
5 47 const singleRunBrowserStack = () => {
5 48 if (config.lastRunBrowser) {\
6 1  'X-UA-COMPATIBLE_URL%}' },
6 2 base: {
6 3 path: {
6 4 'client.html\': mocks.fs.file(0, \'CONTEXT\
6 8 %X_UA_COMPATIBLE_URL%\'),
6 9 'karma.js\': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')
6 14 const createFilesPromise = require('../../../lib/middleware/static/common\').createFilesPromise
6 15 describe('normalizePath', () => {
6 16 it('should convert patterns to objects and set defaults', () => {
6 17 const normalizedPath = path => {
6 18 exports.normalizePath('/foo/bar/').should.eql(normalizePath(path) || path.startsWith('/foo/bar'))).to.eql(normalizePath(path))
6 21 create: [
6 22 {
6 23 path: \'/karma.js\',
6 24 frameworks: ['jasmine'],
6 25 port: 9876,
6 26 protocol: { 'https:', 'https: [] }
6 27 },
6 28 schema: {
6 29 'internal.html\': mocks.fs.file(0, \'CONTEXT\
6 34 \'karma.js\': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')
6 37 server = injector.invoke(mock.createWebServer)
6 39 it(\'should setupWebServer\', () => {
6 40 expect(server.get(\'/\')).to.get('/base/webServer()\')
6 41 expect('/
6 42 expect(223)
6 46 it('should setupServer())
6 47 it(\'should setupServer())
6 48 it(\'should setupCallHandler()\', () => {
6 49 expect(injector.get(\'should.getFilesPromise.jsFilesPromise\')).to.js\')
6 51 it(\'should.use((requestUrl)
6 52 .get)
6 53 .get(\'/injector.get)
6 54 .get(\'/injector.httpServerRequest)
6 57 .get(\'/injector)
6 59 .get('/')
7 1 path: {'one.js': mocks.fs.file(0, \'js-source'), 'content' },
7 2 sha: {'one.js': mocks.fs.file(0, \'js-source\'), \'content' },
7 3 var redirecting_url = { \'http://redirecting-url.com\', \'https://eslint.org/content/\' },
7 6 config: {},
7 7 customFileHandlers: ['value\', { config: { get: { url: \'/__proxy__/' },
7 8 helper: ['value\', helper],
7 9 emitter: ['value\', emitter],
7 10 fileList: { files: { served: [], included: [] } }
7 12 const middleware = require(\'../../../lib/middleware\')
7 13 const servedFiles = require(\'../../../lib/middleware/common\')
7 14 const servedStaticFile = require(\'../../../lib/middleware/static\')
7 15 const normalizedHttpRequest = require(\'../../../lib/middleware/normalizeHttpRequest\')
7 16 const customContextFile = require(\'../../../lib/middleware/customContextFile\')
7 17 const handler = connect.createServer()
7 19 normalizedHttpRequest = handler
7 21 it(\'should redirect to /users\', () => {
7 22 server._blah.should.equal(302)
7 23 server._blah.should.equal(300)
7 25 it(\'should set the session cookie\', () => {
7 26 server._blah.should.session({ user: { name: \'tj\' } })
7 27 server._blah.should.session({ user: { name: \'tj\' })
7 29 server._blah.should.match(/^\\w+\\.\\:\\d+\\.\\d+$/)
7 30 server._blah.should.have.been.called
7 32 it(\'should not getter/prompt from run\', () => {
7 33 server._blah.blah.should.not.should.return
7 35 describe(\'when run()\', () => {
7 36 server._blah.use(Express.createServer)
7 37 server._blah.createServer()
7 38 .execFilter(\'getFilesPrompt()\')
7 39 .exec)
7 40 .skip(\'should.exec)
7 41 .setHeader(\'prompt()\', (config.prompt)
7 42 .end())
7 43 .exports.server.server.
7 44 .getFilesPrompts(\'client.head)
7 45 .head.returns.returns.prompts.returns.returns.some(config.prompt)
7 46 .resolveFiles([
7 47 config.prompts, done)
7 49 it(\'should setHeader()\', server)
7 51 it(\'should not set headers\', server)
7 52 it(\'should set set by default\', () => {
7 53 server._blah.
8 1 path: {'client.html\': mocks.fs.file(0, \'CONTEXT\
8 7 \'context.html': mocks.fs.file(0, \'CONTEXT\
8 10 'karma.js': mocks.fs.file(0, \'root: %KARMA_URL_ROOT%, proxy: %KARMA_PROXY_PATH%, v: %KARMA_VERSION%\')})
8 12 describe(\'karma\', () => {
8 13 it(\'should serve client.html with replaced rules\', () => {
8 14 const file = new File({
8 15 path: \'hello.js\',
8 16 content: \'world\'
8 19 create: () => { return true },
8 20 createMockTimer = injector.createSpy()
8 22 const servedFiles = m.createServeFile(fsMock, null)
8 23 assert(servedFiles.length === 0) {
8 24 return false
8 27 assert(onlyServedFiles.length === 0) {
8 28 return true
8 42 const fakePreprocessor = sinon.createPreprocessor({'

9 2 'one.js': mocks.fs.file(0, \'js-source'),
9 3 'new.js': mocks.fs.file(0, \'new-js-source')
9 7 const createServeFile = require(\'../../../lib/middleware/common\').createServeFile
9 8 const createKarmaMiddleware = require(\'../../../lib/middleware/karma\').create
9 10 const clientConfig = {
9 11 foo: \'bar\'
9 13 const injector = {
9 14 get (val) {
9 15 switch (val) {
9 16 case \'config.client\':
9 17 return clientConfig
9 18 case \'config.crossOriginAttribute\':
9 20 default:
9 21 return null
9 25 nextSpy = sinon.spy()
9 26 response = new HttpResponseMock()
9 27 filesDeferred = helper.defer()
9 28 serveFile = createServeFile(fsMock, \'/karma/static\')
9 29 handler = injector.invoke(mockProxies, handler)
9 31 it(\'should inject and start all browsers\', () => {
9 32 const spy = sinon.spy()
9 33 const browser = createKarmaMiddleware({
9 35 new Url(\'http://some.com\'),
9 36 servers: [
9 37 new Url(\'http://more.org/some.js\')
9 42 return val === undefined?
9 43 new Url(\'http://some.com\') :
9 44 new HttpResponseMock()
9 51 servers = [
9 53 new HttpRequestMock()
9 56 it(\'should start all browsers after all files have been preprocessing with previous url\', () => {
9 57 const proxy.stop(() => {
9 58 const testExecute()
9 59 expect(() => {
9 60 expect(nextSpy).not.not.to.to.not.contains(\'https://localhost\')
9 61 expect(12345')
9 62 expect(1).to.not.to.contains(\'3.contains(\'3.123.123\')).to(\'))
9 63 expect(preprocess.deep.exit).to.exit).to.exit).to.deep.apply((err => {'something.deep.process.process.exit).exit).deep.apply((middleware.kill).not.args)
9 67 it(\'should setInterval(() => {
9 68 expect(Mock.autoWatch, urlRoot, handler) => handler.exec)
9 70 handler.execAsync('https://localhost:99886868Lib-9812341234123412341234.2\')
9 71 expect(handler)
9 72 expect(in
