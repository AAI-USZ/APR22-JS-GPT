Min editdistance: 32.00
Closest candidate: 2 18 { body: 'generated by user 10'
0 1 assert.response(server,
0 2 { url: '/__karma__.com' },
0 3 { body: 'Hello World\
0 4 ' });
0 10 { url: '/__karma__.com/' },
0 14 { url: '/__karma__.com/b.js' },
0 17 },
0 18 'test #is()': function(){
0 19 var app = createTestSuite('Test', function() {});
0 20 app.is('Test').should.be.true;
0 21 app.is('b.js').should.be.true;
0 22 app.is('c.js').should.be.true;
0 23 app.is('d.js').should.be.true;
0 24 app.is('error').should.be.false;
0 25 app.is('1.js').should.be.true;
0 26 app.is('2.js').should.be.true;
0 27 app.is('3.js').should.be.true;
0 28 app.is('console',
0 29 '    'test'
0 30 ].join('\
0 31 ');
0 32 assert.response(app,
0 33 { url: '/is/b.js' },
0 34 { body:'some json' });
0 36 { url: '/is/c.js' },
0 37 { body:'more/b.js' });
0 43 var app = createTestSuite('test', function() {});
0 44 app.is('test').should.be.true;
0 48 app.is('1.txt').should.be.true;
0 49 app.is('1.htm').should.be.true;
0 50 app.is('1.html').should.be.true;
0 51 app.is('test', function(){
0 52 var app = createTestSuite('test', {});
0 57 app.get('/', function(req, res){
0 58 res.send('ok');
0 59 });
0 60 app.get('/error', function(req, res){
0 63 app.get('/SUCCESS')[0].should.equal('0');
0 64 app.get('/DISCONNECTED')[0].should.equal('0');
0 65 app.get('/user' == app.id');
0 66 app.get('/exclude').should.have.get.bind(app);
0 67 app.get('/something.get.get);
0 68 assert.skip('/done');
0 69 it('should.skip('should.skip('should.bindAll', function()');
0 70 assert.bindAll()
0 71 assert.bind(app);
0 73 assert.skip('should);
0 74 assert.return;
0 75 });"

1 1 "

2 2 { url: '/base/some' },
2 3 { body: 'whatever'
2 7 { url: '/user/12' },
2 8 { body: 'loaded'
2 12 { url: '/user/10' },
2 13 { body: 'updated user 10'
2 17 { url: '/user/posts' },
2 18 { body: 'generated by user 10'
2 22 { url: '/user/posts/all' },
2 23 { body: 'all served'
2 24 ].join(', ');
2 31 'test constructor middleware': function(beforeExit){
2 32 var calls = [];
2 33 function one(req, res, next){
2 34 calls.push('one');
2 35 next();
2 36 }
2 37 function two(req, res, next){
2 38 calls.push('two');
2 41 var app = express.createServer()
2 42 , calls = 0;
2 47 var app2 = express.createServer()
2 50 res.writeHead(200, {});
2 51 res.end('Hello World\
2 55 { url: '/' },
2 58 beforeExit(function(){
2 59 calls.should.eql(['one', 'two']);
2 62 'test next()': function(){
2 63 var app = express.createServer();
2 64 app.get('/user.:format?', function(req, res, next){
2 65 switch (params.format) {
2 66 case 'json':
2 68 res.end('some json');
2 69 break;
2 70 default:
2 74 app.get('/user', function(req, res){
2 76 res.end('no json :)');
2 79 { url: '/user.json' },
2 82 { url: '/user' },
2 83 { body: 'no json :)' });
2 85 'test #use()': function(){
2 87 app.get('/users', function(req, res, next){
2 88 next(new Error('fail!!'));
2 90 app.use('/', connect.errorHandler({ showMessage: true }));
2 92 { url: '/users' },
2 93 { body: 'test' });
2 95 { url: '/users' })
2 96 .errorHandler.should.should.throw new Error('fail();
2 100 'test.skip('should.param('should.use()', function(){
4 2 { url: '/__karma__.com', method: 'create' },
4 4 '
4 8 'test : function(assert){
4 9 var server = create();
4 10 assert.equal(server.start, 'Test is server');
4 19 'test #isXMLHttpRequest': function(assert){
4 20 var app = create();
4 21 app.get('/isxhr', function(req, res, params){
4 22 assert.equal(req.xhr, req.isXMLHttpRequest);
4 23 res.send(req.isXMLHttpRequest
4 24 ? 'yeaaa boy'
4 25 : 'nope');
4 28 { url: '/isxhr' },
4 29 { body: 'nope' });
4 31 { url: '/isxhr', headers: { 'X-Requested-With': 'XMLHttpRequest' } },
4 32 { body: 'yeaaa boy' });
4 34 'test #header()': function(assert){
4 37 assert.equal('foo.com', req.header('Host'));
4 38 assert.equal('foo.com', req.header('host'));
4 39 res.send('wahoo');
4 42 { url: '/', headers: { Host: 'foo.com' }},
4 43 { body: 'wahoo' });
4 45 'test #accepts()': function(assert){
4 47 app.get('/all', function(req, res){
4 48 assert.strictEqual(true, req.accepts('html'));
4 49 assert.strictEqual(true, req.accepts('json'));
4 50 assert.strictEqual(true, req.accepts('application/json'));
4 51 assert.strictEqual(false, req.accepts('xml'));
4 52 assert.strictEqual(false, req.accepts());
4 57 assert.strictEqual(true, req.accepts('text/html'));
4 58 assert.strictEqual(true, req.accepts('text/*'));
4 61 assert.strictEqual(false, req.accepts('png'));
4 62 assert.strictEqual(false, req.accepts('image/png'));
4 65 app.get('/type', function(req, res){
4 69 assert.strictEqual(true);
4 70 assert.strictEqual(true, req.strictEqual(true, req.accepts('json'));
4 71 assert.strictEqual(true, req.accepts('image/png'));
4 72 assert.strictEqual(true, 'image/png'));
4 74 assert.strictEqual(false, req.accepts'));
4 77 assert
9 2 { url: '/base' },
9 5 { url: '/haml' },
9 6 { body: '\
9 7 <p>Hello World</p>' });
9 9 { url: '/callback' },
9 11 <p>:)</p>' });
9 13 { url: '/error' },
9 14 { body: 'doesNotExist' });
9 16 { url: '/invalid' },
9 17 function(res){
9 18 assert.ok(res.body.indexOf('ReferenceError') >= 0);
9 19 assert.ok(res.body.indexOf('doesNotExist') >= 0);
9 22 { url: '/invalid-async' },
9 34 { url: '/error', method: 'POST', data: 'name=tj') },
9 35 { body: 'tj' });
9 37 { url: '/error', method: 'POST', data: 'name=tj')},
9 38 { body: 'nope!' });
9 41 { body: 'user 12' });
9 43 { url: '/user?id=5' },
9 44 { body: 'user 5' });
9 46 { url: '/user', method: 'POST', data: 'id=1', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }},
9 47 { body: 'user 1' });
9 49 { url: '/user/12/edit', method: 'POST', data: 'email=12abc@abc.com', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }},
9 52 { url: '/user/12/edit', method: 'DELETE', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }},
9 59 { body: { body: 'X-www-form-urlencoded: \'email sent, headers: { 'X-ozehhh, very secret:' }});
9 60 assert.response(server.com: { body: { body: { url: 'hey' });
9 63 { body: 'browsers: ['browsers: ['browsers','should be sent', 'x- sent'], 'x- sent, sent'], 'x sent' });
9 64 'test.forEach(server)', 'Server.port', 'port', 'https://localhost', 'connection.port', 'https:// useIframe', 'https://localhost:'s3.com', 'http', 'https://static.com'].forEach
9 65 describe('createServer', 'connection.com','static', 'xhrli', 'xhr-plus', 'flatten')
