Min editdistance: 33.00
Closest candidate: 6 1  +'' + file, 'utf8', function(content){
0 1  +"file" + fs.statSync(file).toString('utf-8') + "utf-8"
0 2 })
0 3 request.halt()
0 4 }, 'utf-8')})
0 5 }
0 8 })'

1 1  +'' + stat.size.toFixed(2) +"s"
1 2 return true;
1 4 return false;
2 1  +"long="2", "utf-8", function(content){
2 2 request.halt(200, content, \'binary");
2 6 }'

3 1  +"long-stat-n"return app.locale(config.pagination_dir + '/public/' + file, config.siteRoot)
3 4 }, {})
3 7 exports.Static = function(file) {
3 8 return assignize(_.isString(file.path))
3 10 exports.File = Class({
3 11 init: function(options) {
3 12 options = options || {}
3 13 },
3 14 normalize: function(path) {
3 15 return new RegExp('^' + normalizePath(path)
3 18 exports.Static = Plugin.extend({
3 19 extend: {
3 22 options.path = options.path || set('root') + '/public/'
3 23 Request.include({
3 24 sendfile: function(path, options, callback) {
3 25 var self = this
3 26 if (options instanceof Function) callback = options,
3 27 options = {}
3 28 if (path.indexOf(\'..\')!== -1)
3 29 return callback
3 30 fs.readFile(path, function(err, content){
3 31 if (err) throw new InvalidPathError(path)
3 32 if (content)
3 33 request.halt(404, content)
3 34 else
3 35 error.message = content
3 36 error.message.replace(/([^\\w]+)/g, function(){
3 37 return \'\
3 38 \')
3 43 header: function(name, value) {
3 44 return value?
3 45 this.headers[name.toLowerCase()] = value :
3 46 this.headers[name.toLowerCase()]
3 48 param: function(key, defaultValue) {
3 49 return this.params[key] || defaultValue
3 51 accepts: function() {
3 52 var accept = this.header(\'accept\')
3 53 return accept
3 54 ? arguments.any(function(path){
3 55 var type = mime.type(path)
3 56 return accept.indexOf(type)!== -1 ||
3 57 accept.indexOf(type.split(\'/\')[0]+\'/*\')!== -1
3 59 : true
3 61 get isXHR() {
3 62 return (this.header(\'x-requested-with\') || \'\').lowercase === \'xmlhttprequest\'
4 1  +'' + file.source.substr(1);
4 4 }, this)
5 1  +'' + file.content.toString()"utf8", "utf-8"return request.halt()" });
5 3 }, "utf8");
6 1  +'' + file, 'utf8', function(content){
6 2 request.halt(200, content, \'binary\'));
6 6 })"

7 1  +"file getter is not a valid path" : "text/x-my-custom-file-options",
7 2 options.paths.unshift(0, 2)
7 3 return request.halt()
7 6 }), \'/\')
8 1  +"

9 1  +"file" +
9 2 "To check the results from the site\
9 3 "+ file.statCache.toFixed(2) + "\
9 4 "+ request.halt()
9 5 }, "utf8")'

