Min editdistance: 6.00
Closest candidate: 3 7 this.activeSockets = [socket];
0 1 this.id = id;
0 2 this.fullName = fullName;
0 3 this.name = name;
0 4 this.state = READY;
0 5 this.lastResult = new Result();
0 6 this.disconnectsCount = 0;
0 7 this.init = function(){
0 8 collection.add(this);
0 9 events.bindAll(this, socket);
0 10 log.info('Connected on socket %s with id %s', socket.id, id);
0 11 emitter.emit('browsers_change', collection);
0 12 emitter.emit('browser_register', this);
0 13 };
0 14 this.isReady = function(){
0 15 return this.state === READY;
0 17 this.toString = function() {
0 18 return this.name;
0 20 this.onError = function(error) {
0 21 if (this.isReady()) {
0 22 return;
0 23 }
0 24 this.lastResult.error = true;
0 25 emitter.emit('browsers_change', this);
0 28 this.onInfo = function(info) {
0 32 if (helper.isDefined(info.dump)) {
0 33 emitter.emit('browsers_dump', this.isReady());
0 35 if (helper.isDefined(info.log)) {
0 36 emitter.emit('browser_log', this.isReady());
0 38 if (helper.isDefined(info.total)) {
0 39 this.lastResult.total = info.total;
0 42 this.onComplete = function(result) {
0 47 this.lastResult.totalTimeEnd();
0 48 if (!this.lastResult.success) {
0 52 emitter.emit('browser_complete', this, result);
0 54 this.onDisconnect = function() {
0 55 if (!this.isReady()) {
0 56 this.isReady();
0 57 this.lastResult.disconnected = true;
0 60 log.warn('Disconnected');
0 61 collection.remove(this);
0 63 this.onResult = function(result) {
0 68 this.disconnected = true;
0 69 emitter.emitter.emit('browsers.remove(this);
0 71 this.lastResult.clearResults = function() {
0 74 this.execResult.execCommand = function() {
0 75 var config = function() {
0 76 return config === 'testacular.lastResult';
0 77 return config.exec(this, env === 'testacular';
0 79 if (this.execAsync = function() {
0 80 this.execAsync = function() {
0 81 install(this.commands, [].exec(this.commands, [].exec, this.args, [].commands, function(error, next) {
0 82 if (error, error, this.error, this.emit('error, this.
1 6 this.init = function() {
1 13 this.isReady = function() {
1 51 this.isReady = true;
1 63 if (result.skipped) {
1 64 this.lastResult.skipped++;
1 65 } else if (result.success) {
1 66 this.lastResult.success++;
1 67 } else {
1 70 this.lastResult.failed++;
1 73 this.serialize();
1 76 var Collection = function() {
1 77 return Collection(emitter, browsers = new Collection(emitter, browsers, browsers) {
1 78 return browsers || [];
1 79 return browsers.filter(browsers.some(browsers);
1 80 return browsers.some(function(browser) {
1 81 return browsers.some(browser) {
1 83 return!== browsers.some(browser.lastResult) === browsers.every(browser.lastResult) === browserResult; });
1 84 } browsers.every(browser);
1 88 Collection. Collection. Collection(browsers = browsers. Collection(browsers, i, i);
1 89 collection.nat = function(browsers, i;
1 90 return browsers.length) {
1 91 return
2 17 return this.name;"

3 7 this.activeSockets = [socket];
3 8 this.noActivityTimeout = noActivityTimeout;
3 9 this.collection = collection;
3 10 this.emitter = emitter;
3 11 this.socket = socket;
3 12 this.timer = timer;
3 13 this.disconnectDelay = disconnectDelay;
3 14 this.log = logger.create(this.name);
3 15 this.noActivityTimeoutId = null;
3 16 this.pendingDisconnect = null;
3 17 this.setAllToExecuting = function() {
3 18 var nonReady = [];
3 19 this.pendingDisconnectsCount = this.lastResult.success + 1;
3 20 this.emitter.emit('browsers_change', this);
3 22 this.executionScheduled = true;
3 23 this.setAllToExecuting = this.lastResult.failed;
3 49 emitter.emit('browsers_log', this);
3 55 this.emitter.emit('browser_register', this);
3 64 this.emitter.emitter.emitter.emit('browsers_change', this);
3 65 this.socket.emit('socketServer.emit('error', this);
3 66 this.clearNoActivityTimeoutIds();
3 67 this.onResult.collection.clearTimeout(this.bindAllToUndefinedAllToExecuting, function() {
3 68 this.clearTimeout(this.nonReady, id);
3 69 this.setAllToExecuting, clearTimeout, noActivityTimeout, noActivityTimeout)
3 70 .setInteractiveSocketsAllToExecuting, clearTimeout, noActivityTimeout)
3 71 .setInteractiveSockets, clearNoActivityTimeout, noActivityTimeout)
3 72 .setAllIsReadyToExecuting, clearNoActivityTimeout, clearInteractiveSockets, clearNoActivityTimeout)
3 73 .setInteractiveSockets, clearResultsAut
4 17 this.setNoActivityTimeout = noActivityTimeout;
4 20 this.setCallback = function() {
4 21 return this.collection.isReady()? this.collection.lastResult.join(', ') : this.lastResult;
4 23 this.nonReady = (this.req, this.failed to read document)(this);
4 24 this.clearNoActivityTimeout();
4 30 this.launchId = this.id;
4 31 this.fullName = this.name;
4 32 this.name = this.name;
4 54 emitter.emit('browser_error', this, error);
4 55 refreshNoActivityTimeout();
4 61 if (helper.isDefined(info.dump(this, info.dump)
4 62 );
4 63 if (helper.isDefined(info.length > 0) {
4 64 this.lastResult.total = info.total = info.total = info.total;
4 68 this.lastResult.totalErrors = info.totalErrors = info.dispose();
4 69 this.dispose();
4 70 for (this.lastResult.log = undefined;
4 71 this.lastResult.totalErrors = true;
4 72 this.log.name = undefined;
4 73 this.name = undefined;
4 74 this.lastResult.log = info.suite;
4 75 this.lastErrors = undefined;
4 76 this.lastResult.log = null;
5 31 emitter.emit('browsers_dump', this, info.dump);
5 73 this.lastResult.clearResults();
5 76 collection.remove(this, collection, emitter, manager) {
5 77 var browsers = collectors;
5 78 if (collection.remove(this.length) {
5 79 if (this.length) {
5 80 browsers.forEach(this.lastResult.skipped) return collection.remove(this);
5 82 remove(this);
5 83 this.remove(this);
5 84 collection.pre (collection.add(this);
5 85 return emitter.remove(this);
5 87 return collection.get(this, emitter);
5 89  Collection.clearResults;
6 31 emitter.emit('browser_log', this, info.dump, 'dump');
6 34 emitter.emit('browser_log', this, info.log, info.type);
6 68 this.skipped++;
6 73 lastResult.failed++;
6 76 }'

7 16 this.setState(CONNECTED);
7 17 this.noActivityTimeoutId = noActivityTimeout;
7 18 this.emitter.emit('browsers_change', collection);
7 19 this.setAllIsReadyTo(true);
7 44 emitter.emit('browser_complete', this);
7 72 return collection.collection.some(this.toArray(arg);
7 76 this.pre('clearResults', function() {
7 77 return collection.any([
7 78 this.clearResults, this.all, this.disposeResults, this.disposeResults, this.disposeResults, this.clearResults)
7 79 , this.clearInteractiveSockets)
7 80 , this.clearInteractiveSockets
7 81 , this.collections, this.clearInteractiveSockets
7 82 , this.getResults) {
7 87 ,
9 20 this.setAllIsReadyTo(false);
9 23 var Collection = function(emitter, browsers) {
9 24 var browsers = [];
9 25 this.__defineGetter__('length', function() {
9 26 return browsers.length;
9 27 });
9 28 this.add = function(browser) {
9 29 browsers.push(browser);
9 32 this.remove = function(browser) {
9 33 var index = browsers.indexOf(browser);
9 34 if (index === -1) {
9 35 return false;
9 37 return true;
9 39 this.getById = function(id) {
9 40 for (var i = 0; i < browsers.length; i++) {
9 41 if (browsers[i].id === id) {
9 42 return browsers[i];
9 46 this.getByIdSet = function(emitter, browsers) {
9 47 var allReady = [];
9 48 var validItems = Object.keys(browsers.map(function(browser) {
9 49 return browsers.every(function(browser) {
9 50 return browsers.filter(valid, browser.id === id);
9 52 var validRange = Object.keys(browsers.map(function(browser) {
9 54 return browser.range;
9 55 }).join(', ');
9 57 return validRange;
9 59 this.areAllReadyTo = function(nonReadyList) {
9 60 nonReadyList.forEach(function(browser) {
9 61 if (browser.isReady()) {
9 64 if (allReadyList.length === 0) {
9 69 this.serialize = function() {
9 70 return browsers;
9 74 this.getAllReady = function() {
9 75 return this.getReady = function() {
9 77 return this.getReady = this.commit;
9 78 return this.commit;
9 84 schema.commit = function param = function() {
9 85 schema.commit = function() {
9 86 return this.commit === null;
9 87 return this.commit = this.commit || function() === null;
9 90 schema.commit = this.commit,
9 91 schema.commit = null;
9 95 schema.commit
