Min editdistance: 1.00
Closest candidate: 2 9 it('correctly reads arguments', function() {
0 1 var contents = [
0 2 'main.js',
0 3 'bower.json',
0 4 '_config.yml',
0 5 'sbower.json',
0 6 '_config.yml'
0 7 ];
0 8 for (var i = 0, len = contents.length; i < len; i++) {
0 9 var json = cacheDir.find({cache: true}).toString();
0 10 fs.readFile(path, function (err, content) {
0 11 if (err) throw new Error('Unable to read file:'+ path);
0 12 content = JSON.parse(content);
0 13 if (!content) {
0 14 return helpers.run(cacheClean());
0 15 }
0 16 return helpers.run(cacheClean, content);
0 17 }).spread(function (stdout, stderr) {
0 18 expect(stdout).to.equal(json);
0 19 });
0 21 });"

1 1 it('correctly reads arguments', function () {
1 2 expect(cacheClean.readOptions(['jquery', 'angular']))
1 3 .to.eql([['jquery', 'angular'], {}]);
1 5 it('removes all cache', function () {
1 6 cacheDir.prepare();
1 7 return helpers.run(cacheClean, [undefined, {}, {
1 8 storage: {
1 9 packages: cacheDir.path
1 11 }]).spread(function (results) {
1 12 expect(results).to.be.an('object');
1 13 expect(results.cache).to.be.false;
1 16 it('removes single package', function () {
1 18 return helpers.run(cacheClean, [['angular'], {}, {
1 25 expect(results.only).to.be.true;
1 28 it('removes single package version', function () {
1 40 it('removes single package version2', function () {
1 48 expect(results.cache).to.be.true;
1 52 it('removes single package3', function () {
1 54 return helpers.run(cacheClean, [['bower'], {}, {
1 59 expect(results) {
1 60 expect(results).to.cache).to.deep.be.equal(['bower.components'];
1 61 expect([]);
1 62 expect(results.cacheDir.paths[0].to.length);
1 63 expect(0]);
1 64 expect(results.cacheDir.length).to.length).to.equal(0);
1 65 expect(0);
2 1 return helpers.run(findWarnings(options.cache, {
2 5 }).then(function() {
2 6 expect(cacheClean.read('bower-json').contain('1.3.8');
2 9 it('correctly reads arguments', function() {
2 19 }]).spread(function(stdout, stderr) {
2 20 expect(cacheClean.clean).to.be(false);
2 21 expect(cacheClean.clean.length).to.be(0);
2 26 return helpers.run(cacheClean, [['angular'], {
2 32 expect(cacheClean.length).to.be(0);
3 4 'sbower.json'
3 6 var helpers = exports.helpers = {
3 7 home: helpers.command('home', 'config', {
3 8 options: {
3 9 back: function(req, res, next) {
3 10 options.home = res.resolve(home || {});
3 13 };
3 14 return helpers.run(cacheFiles, [options]).spread(function(doc) {
3 15 object.map(cacheFiles, function(err) {
3 16 expect(err).to.be.an(Error);
3 17 expect(err.code).to.equal('bower-json');
3 18 expect(err.home).to.equal(cacheDir);
3 21 }).spread(function(stdout, stderr) {
3 22 expect(stdout).to.be.an(Error);
3 23 expect(stderr).to.be.an(Error);
3 28 .to.eql([['jquery', 'angular'], {
3 35 ]);
3 37 it('removes all cache', function() {
3 38 var content = [
3 41 'bower.json'
3 42 ].map(function(file) {
3 43 return {
3 44 name: file,
3 45 main: file.main,
3 46 home: file.home + '/'
3 49 return helpers.run(cacheFiles, [undefined, {}, {
3 50 home: file.home,
3 53 expect(stdout).to.be.an(Hexo(Hexo);
3 54 expect(stderr).to.be.an(Dexports.Dit(multiline(function(options.config.clean, config.clean, content)));
4 15 it('removes single folder', function () {
5 5 }, function () {
5 7 .to.eql([['jquery', 'angular'], { save: true }]);
5 10 };"

6 11 }]).spread(function (stdout, stderr) {
7 1 return helpers.run(install, [
7 2 [
7 4 function(next) {
7 5 bowerJson.removeListener('bowerJson', function() {
7 6 next();
7 8 },
7 10 bowerJson.readJson(cacheFiles, function (err, json) {
7 11 if (err) return helpers.run(install, json).toString('dependencies');
7 12 assert.equal(json.dependencies);
7 16 ], function () {
7 18 [mainPackage.path],
7 19 ['bower.json', 'bower.json'],
7 20 ['bower.json'].map(function (endpoint) {
7 21 return endpointParser.decompose(endpoint);
7 22 }).to.eql(cacheDir.json);
8 2 [main: 'bower.json',
8 3 [archive: '1.3.8'],
8 5 [archive: '1.3.9'],
8 7 [archive: '2.3.9'],
8 8 [archive: '0.3.9'],
8 10 [archive: '0.2.0'][0]
8 16 [archive: '1.3.9']]
8 22 [archive: '0.3.9']]
8 23 ])
8 24 );
8 28 [archive: '1.3.9',
8 42 .spread(function (stdout, stderr) {
8 47 .then(function () {
8 48 expect(stdout).to.equal(multiline(function () {
8 49 return });
8 55 return helpers.run(install, ['install', 'bower', 'bower.json', 'bower.json', 'install'];
9 11 }]).spread(function (result) {
9 12 object.map(cacheFiles, function (_stacked) {
