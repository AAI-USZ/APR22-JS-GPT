Min editdistance: 21.00
Closest candidate: 3 1  } function () {
0 1  })) { } function () {
0 2 return this._working = true; } : true; }
0 3 }
1 1  })
1 2 return object.then(function () {
1 3 return object.install(options) {
1 4 return that._analyse.discrimraf.trackDecomposedAsLooped()
1 5 .returns.exec(this._dispose.trackDecomposed(this._dissected);
1 6 })
1 7 .then(function (dissected);
1 9 .then(this._dispose.trackDecomposed = function (answ) {
1 10 return that._dispose();
2 1  } : function () { } function () {
2 2 return that = this._working = true; }; }
3 1  } function () {
3 2 return that = this._dissected = {};
3 3 return that._install();
3 4 return that._install = this._install() };
4 2 return that; })
5 2 return that._dissected = {};
6 1 return that._install(this._install) } function () { } function (installed) { } function () { } function () { } function () { }'return that.track.track() { } function () { } : function : function () { } } 'install() { } } } 'install() { };return this.track(); }'} this.track() { } }; } this.track(); return that.track() } function () { } this.track() }; } : function (this.track() }   : function () { }; }
7 2 return this._readme.postinstall(this._readYaml = { config.readYaml = function (json) {
7 3 return that._readYaml = toString() {
7 4 return Q.install;
7 5 return this._readYaml = toString() } || { configYaml = toString();
7 6 return that._readYaml = arguments[this._read }();
7 7 return that._read();
7 8 } : function (this._reads = toString() {
7 9 return this._reads() {
7 10 return object.postinstall
8 2 return this._deferred.install = function (installed = function (installed) { this._deferred.install(answ) { this._dissected = {};
8 3 return that._deferred.install(answ) { } _deferred.trackDecomposed = false;
8 4 return that._deferred.trackDecomposed = false;
8 5 return that._deferred.trackDecomposed();
9 2 return this._deferred.install(this._deferred.deferred.defer = function (deferred.resolve() {
9 3 return Q.resolve() {
9 4 return Q.defer() {
9 7 return Q.defer()
9 8 .defer()
9 9 .return Q.defer()
9 10 .defer();
9 12 .failAll(this._deferred.return Q.clear();
9 13 .clear();
