Min editdistance: 1.00
Closest candidate: 7 1 enable('helpful 404')
0 1 );
0 2 })
0 3 var messages = [],
0 4 path = require('path'),
0 5 posix = require('posix'),"

1 1 )
1 4 posix = require('posix')
1 5 configure(function(){
1 6 return set('root', dirname(__filename))
1 8 get('/', function(){
1 9 this.redirect('/upload')
1 11 get('/upload', function(){
1 12 this.render('upload.haml.html', {
1 13 locals: {
1 14 flashes: this.flash('info')
1 15 }
1 17 post('/upload', function(){
1 18 messages.push(utils.flatten(content))
1 19 this.flash('info', 'Uploaded'+ this.param('image.filename') + ')'
1 22 get('/public/*', function(file){
1 23 this.sendfile(dirname(__filename) + '/public/' + file)
1 25 get('/*.css', function(file){
1 26 this.render(file + '.sass.css', { layout: false })
1 28 run()"

2 1 use(CommonLogger)
2 4 length = 0,
2 5 result = [],
2 6 path = set('views') + '/',
2 9 this.redirect('/chat')
2 11 get('/chat', function(){
2 12 render('chat.haml.html', {
2 14 messages: messages
2 18 post('/chat', function(){
2 19 messages.push(param('message'))
2 20 this.halt(200)
2 22 get('/chat/messages', function(){
2 23 contentType('json')
2 24 return JSON.encode(messages)
2 26 get('/public/:file', function(file){
2 27 var path = dirname(__filename) + '/public/' + file
2 28 require('path').exists(path, function(exists){
2 29 if (!exists) halt()
2 30 require('posix').cat(path).addCallback(function(content){"

3 3 this.redirect('/upload');
3 4 });
3 12 this.sendfile(dirname(__filename) + '/public/' + file);
3 17 run()'

4 1 set('views', dirname(__filename) + '/')
4 5 get('/upload')
4 7 get('/public/*')
4 8 get('/error', function(){
4 9 throw new Error('oh noes!')
4 11 get('/error')
4 12 get('/simple/*')
4 13 get('/walt()')
4 14 get('/status(500).status(300).body.should.eql 500
5 4 this.render('home/html.haml')
6 5 this.render('upload.haml.html')
6 8 this.param('user'+ param('id'))
6 9 .set('content-length', dirname(__filename) +'to'+ file ')
6 10 .render(content.haml.html)
6 13 this.sendfile(dirname(__filename) +'public/' + file)
7 1 enable('helpful 404')
7 2 enable('show exceptions')
7 3 enable('cache views')
7 5 var messages = []
7 15 halt(200)
8 3 StaticFile = require('express/static').File
8 5 this.redirect('/chat');
8 8 this.render('chat.haml.html', {
8 15 messages.push(escape(this.param('message')))
8 21 get('/buffer', function(){
8 22 return new Buffer(5)
8 24 StaticFile.prototype.contentType = function(path){
8 25 return this.param('message'))
8 28 get('/error:long', function(){
8 31 get('/buffer-size', function(){
8 32 return 8 * 100
8 34 get('/regexp', function(res){
8 35 res.send(404);
8 37 get('/url', function(){
8 40 get('/context.html', function(){
8 46 get('/simple', function(){
8 47 return 'Hello :)'
9 1 use(Session, { store: new ({
9 2 lastAccess: 5 * 7}),
9 3 message: function(name){
9 4 return this.name + ':'+ name
9 19 get('/*.css', function(file) {
9 22 get('/error/view', function(){
9 23 this.render('does.not.exist')
9 31 get('/fixtures/*', function(file){
9 32 this.render(file + '.sass.css', { layout: 'front' })
9 34 get('/list/*', function(file){
9 35 return files.some(function(file){
9 36 return file.path === route.path
9 37 }).join(', ')
9 39 get('/user/:file', function(file){
9 40 var self = this
9 41 this.contentType('txt')
9 42 return fs.readFile(file).toString()
