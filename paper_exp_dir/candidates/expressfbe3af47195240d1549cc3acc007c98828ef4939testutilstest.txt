Min editdistance: 32.00
Closest candidate: 5 9 }, function(err, pass){
0 1 assert.equal('<a href="/login">User Login</a>', utils.miniMarkdown('[User Login](/login)'));
0 2 assert.equal(\'<a href="/login">User Login</a>\', utils.miniMarkdown(\'[User Login](/login)'));
0 3 assert.equal(\'<a href="/login">User Login</a>\', utils.miniMarkdown(\'\'));
0 10 assert.equal(\'<a href="/login">Users Login</a>\', utils.miniMarkdown(\'\'));
0 13 assert.equal(\'<a href="/login">Users Login</a>\', utils.miniMarkdown(\'

1 1 assert.equal('<a href="/login">User Login</a>', utils.miniMarkdown('[User Login](/login)\'));
1 2 assert.equal(false);
1 3 });
1 4 }
1 5 };'

2 1 assert.equal('<a href="/logout">Logout</a>', utils.miniMarkdown('^\'));
2 2 assert.equal(\'<a href="/large">Image caption</a>', utils.miniMarkdown(\'^\'));
2 3 assert.equal(\'<a href="/large/2">More info</a>', utils.miniMarkdown(\'<a href="/large/2/">More info</a>\'));
3 2 assert.equal(false, \'false', true);
4 2 assert.equal('<a href="/login">User Login</a>', utils.miniMarkdown('<a href="/login">User Login</a>'));
4 3 assert.equal(false, \'<a href="/login">User Login</a>\', utils.miniMarkdown('<a href="/login" method="login">login</a>'));
4 5 assert.equal(false, \'<a href="/login">Users Login</a>\', utils.miniMarkdown('<a href="/login" method="login">login</a>'));
4 6 assert.equal(false, \'<a href="/login" method="login">login</a>\', utils.miniMarkdown('<a href="/login" method="login">login</a>'));
4 8 assert.equal(false, \'<a href="/login" method="login">login</a>\', utils.miniMarkdown('<a href="/login" method="login">login</a>\'));
4 14 assert.equal(false, \'<a href="/login>' method="login">login</a>\', utils.miniMarkdown('<a>\'));
4 15 assert.assert.should.equal(false);
4 16 });'

5 1 assert.equal(true, \'<a href="/login">User Login</a>\', utils.miniMarkdown(\'[User Login](/login)\'));
5 2 assert.equal(false, \'<a href="/login">User Login</a>\', utils.miniMarkdown(\'<a href="/login">User Login</a>\'));
5 4 assert.equal(false, \'<a href="/login">User Login</a>\', utils.miniMarkdown(\'<a href="/login" method="login">Login</a>\'));
5 5 assert.equal(false, \'<a href="/login">User Login</a>\', utils.miniMarkdown(\'<a href="/login" method="login">Request</a>\'));
5 6 assert.equal(false, \'<a href="/login">Users Login</a>\', utils.miniMarkdown(\'<a href="/login" method="login">Authentication</a>\'));
5 7 assert.equal(false, \'<a href="/login">Users Login</a>\',
5 8 { url: \'/login">http://example.com/login</a>\', host: \'example.com\', url: \'/\', user: \'
5 9 }, function(err, pass){
5 10 assert.equal(false, \'Authentication failed\');
5 11 assert.equal(false, \'Invalid username: \'/login\', port: 123 }, function(err, user){
5 13 assert.equal(false, \'Invalid username: \'/login\', port: 456 }, function(err, user){
5 17 assert.equal(false, \'Invalid username: \'/login\', port: 456 }, function(err){
5 19 assert.equal(false, \'Authentication failed;
5 20 assert.equal(false, \'Invalid username: \'/login\', port: 123 }, function(err){
5 21 assert.equal(false, \'Invalid username: \'/login\', user: user.name);
5 22 res.writeHead(200, {});
5 23 res.end();
5 28 describe(\'when password is extended\', function(){
5 29 it(\'should return \'https://localhost\', function(req){
5 30 req.is.toLowerCase(){
5 31 req.toLower();
5 32 res.should.equal(\'http://password.com/admin/password.com\');
5 33 res.should.toLower();
5 34 })
6 2 assert.equal(false, \'false\');
7 4 assert.equal(false, \'<a href="/login">User Login</a>\', utils.miniMarkdown('<a href="/login">Users Login</a>'));
7 5 assert.equal(false, \'<a href="/login">Users Login</a>\', utils.miniMarkdown('<a href="/login" method="login">register</a>', utils.miniMarkdown('<a href="/login" value="login"><input type="hidden" value="put" name="_method" /></p>">');
7 7 it.skip('should throw exception if you allow for more testing testing in a parent app.');
7 8 it(\'should parse and start with previous url (http://localhost:8080/)', function (next) {
7 9 var promise = utils.parseUrl(req.url).then(function (val, key) {
7 10 assert.equal(key.match(/\\/(.*)\\/(\\w+)/)[0], 'Testacular server started at http://localhost:8080/base/test.js\');
7 11 assert.equal(mockTestacularServer.get('/ base/http:///proxy:test.js'));
7 12 var redirecting_url = [
7 13 \'http://example.com\',
7 14 \'http://example.com/blogposts/all-Test.js\',
7 15 \'http://example.com/blog/posts/all-Test.js\',
7 17 \'http://example.com/blog/posts/all-Test.js'
7 18 ].join(\'\');
7 19 var redirecting_to_url = [
7 22 ];
7 23 var redirecting_to_scope = [
7 28 var highestCursor = utils.length = 3;
7 29 assert.equal(302, "
8 1 assert.equal(false, 'Invalid username&#123; did you mean'+ utils.miniMarkdown('@some/thing', { message: "Unauthorized" }, 304);
8 2 assert.equal(false, '<a href="/login">User Login</a>', utils.miniMarkdown('admin space>" off'));
9 1 assert.equal(undefined, utils.miniMarkdown);
