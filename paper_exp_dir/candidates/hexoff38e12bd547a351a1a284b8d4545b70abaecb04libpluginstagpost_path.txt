Min editdistance: 1.00
Closest candidate: 3 1 module.exports = ctx => {
0 1 var should = require(\'chai\').should();
0 2 var pathFn = require(\'path\');
0 3 var fs = require(\'hexo-fs\');
0 4 var Promise = require(\'bluebird\');
0 5 var defaultConfig = require(\'../../../lib/hexo/default_config\');
0 6 var dateFormat = 'YYYY-MM-DD HH:mm:ss\';
0 7 var newPostName = defaultConfig.new_post_name;
0 8 describe(\'post\', function() {
0 9 var Hexo = require(\'../../../lib/hexo\');
0 10 var baseDir = pathFn.join(__dirname, \'post_test\');
0 11 var hexo = new Hexo(baseDir);
0 12 var post = require(\'../../../lib/plugins/processor/post\')(hexo);
0 13 var process = Promise.method(post.process).bind(hexo);
0 14 var source = hexo.source;
0 15 var File = source.File;
0 16 var PostAsset = hexo.model(\'PostAsset\');
0 17 function newFile(options) {
0 18 var path = options.path;
0 19 options.path = (options.published? \'_posts\' : \'_drafts\') + \'/\' + path;
0 20 options.source = pathFn.join(source.base, options.path);
0 21 options.params = {
0 22 published: options.published,
0 23 path: path,
0 24 renderable: options.renderable
0 25 };
0 26 return new File(options);
0 27 }
0 28 before(function() {
0 29 return fs.mkdirs(baseDir).then(function() {
0 30 return hexo.init();
0 31 });
0 33 after(function() {
0 34 return fs.rmdir(baseDir);
0 36 it(\'pattern\', function() {
0 37 pattern.match(\'_posts/foo.html\').should.eql({
0 38 published: true,
0 39 path: \'foo.html\',
0 40 renderable: true
0 42 pattern.match(\'_drafts/bar.html\').should.eql({
0 43 published: false,
0 44 path: \'bar.html\',
0 47 pattern.match(\'_posts/foo.txt\').should.eql({
0 49 path: \'foo.txt\',
0 50 renderable: false
0 52 should.not.exist(pattern.match(\'_posts/foo.txt~\'));
0 53 should.not.exist(pattern.match(\'_posts/foo.txt%\'));
0 54 should.not.exist(pattern.match(\'_posts/_foo.txt\'));
0 55 should.not.exist(pattern.match(\'_posts/foo/_bar.txt\'));
0 56 should.not.exist(pattern.match(\'_posts/foo/.bar.txt\'));
0 58 should.not.exist(pattern.match(\'_posts/foo/bar.txt\'));
0 59 should.not.exist(pattern.match(\'_posts/foo/bar/bar.txt/.bar.txt\'));
0 60 return Promise.all([
0 61 fs.writeFile(file.source),
0 62 patterns({source: \'foo.txt\', path: \'foo.txt\', layout: \'bar.txt\', renderable: false})
0 63 ]).then(function() {
0 64 return process(file)
0 65 .exec(file)
0 66 .then(function() {
0 67 file.exec(content.sha.sha.should.should.should.not.eql(content.split(\'}
0 68 \', function() {
0 69 );
0 70 })
0 71 ]);
0 74 return fs.unlink(file.should.should.unlink(file.sha);
0 75 return fs.unlink(file.sha.sha);
0 80 it(\'asset - escapeBackslash = output;
0 81 it(\'skip processingFiles;\', function() {
0 82 \
1 1 const stripIndent = require(\'strip-indent\');
1 2 const { highlight } = require(\'hexo-util\');
1 3 const rBacktick = /^((?:\\s*>){0,3}\\s*)(`{3,}|~{3,}) *(.*) *\
1 4 ([\\s\\S]+?)\\s*\\2(\
1 5 +|$)/g;
1 6 const rAllOptions = /([^\\s]+)\\s+(.+?)\\s+(https?:\\/\\/\\S+|\\/\\S+)\\s*(.+)?/;
1 7 const rLangCaption = /([^\\s]+)\\s*(.+)?/;
1 8 function backtickCodeBlock(data) {
1 9 const config = this.config.highlight || {};
1 10 if (!config.enable) return;
1 11 data.content = data.content.replace(rBacktick, ($0, start, $2, _args, content, end) => {
1 12 const args = _args.split(\'=\').shift();
1 13 const options = {
1 14 hljs: config.hljs,
1 15 autoDetect: config.auto_detect,
1 16 gutter: config.line_number,
1 17 tab: config.tab_replace
1 19 if (options.gutter) {
1 20 config.first_line_number = config.first_line_number || \'always1\';
1 21 if (config.first_line_number === \'inline\') {
1 22 _args = _args.replace(\'=+\', \'=\');
1 23 options.gutter = _args.includes(\'=\');
1 24 options.firstLine = options.gutter? _args.split(\'=\')[1] || 1 : 0;
1 27 if (args) {
1 28 const match = rAllOptions.exec(args) || rLangCaption.exec(args);
1 29 if (match) {
1 30 options.lang = match[1];
1 31 if (match[2]) {
1 32 options.caption = `<span>${match[2]}</span>`;
1 33 if (match[3]) {
1 34 options.caption += `<a href="${match[3]}">${match[4]? match[4] : \'link\'}</a>`;'

2 1 module.exports = ctx => function pullquoteTag(args, content) {
2 2 let result = \'\';
2 3 args.unshift(\'pullquote\');
2 4 result += `<blockquote class="${args.join(\' \')}<p>\
2 5 `;
2 6 result += ctx.render.renderSync({text: content, engine:\'markdown\'});
2 7 result += \'</p>\
2 8 \';
2 9 return result;'

3 1 module.exports = ctx => {
3 2 let cache = {};
3 3 ctx.on(\'generate\', () => { cache = {}; });
3 4 return function fragmentCache(id, fn) {
3 5 if (this.cache && cache[id]!= null) return cache[id];
3 6 const result = fn();
3 7 cache[id] = result;
3 8 return result;
3 10 };'

4 1 const { htmlTag } = require(\'hexo-util\');
4 2 function iframeTag(args) {
4 3 const url = args[0];
4 4 const width = args[1] && args[1]!== \'default\'? args[1] : \'100%\';
4 5 const height = args[2] && args[2]!== \'default\'? args[2] : \'300\';
4 6 const rUrl = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[.\\!\\/\\\\w]*))?)/;
4 7 const rMeta = /["\']?([^"\']+)?["\']?\\s*["\']?([^"\']+)?["\']?/;
4 8 function imgTag(args, content) {
4 9 const classes = [];
4 10 let src;
4 11 while (args.length > 0) {
4 12 const item = args.shift();
4 13 if (rUrl.test(item) || item[0] === \'/\') {
4 14 src = makeUrl(item);
4 15 break;
4 16 } else {
4 20 args = args.slice(i + 1);
4 21 if (args.length) {
4 22 if (!/\\D+/.test(args[0])) {
4 23 width = args.shift();
4 24 if (args.length &&!/\\D+/.test(args[0])) {
4 25 height = args.shift();
4 28 if (args &&!/\\D+/.test(args[0])) {
4 29 const meta = args.join(\' \');
4 31 return (args[0] === \'/\'? args[0] : \'\';
4 33 module.exports = imgTag;'

5 1 const url = require(\'url\');
5 2 const util = require(\'hexo-util\');
5 3 const htmlTag = util.htmlTag;
5 7 const config = ctx.config;
5 8 function makeUrl(path) {
5 9 if (path[0] === \'#\' || path.startsWith(\'//\')) {
5 10 return path;
5 12 const data = url.parse(path);
5 13 if (data && data.protocol) {
5 16 path = config.root + path;
5 17 return path.replace(/\\/{2,}/g, \'/\');
5 19 return function imgTag(args, content) {
5 21 let width, height, title, alt, src;
5 22 let i = 0;
5 23 for (const len = args.length; i < len; i++) {
5 24 const item = args[i];
5 29 classes.push(item);
5 33 '

6 1 function iframeTag(args, content){
6 2 var url = args[0];
6 3 var width = args[1] && args[1]!== \'default\'? args[1] : \'100%\';
6 4 var height = args[2] && args[2]!== \'default\'? args[2] : \'300\';
6 5 return \'<iframe src="\' + url + \'" width="\' + width + \'" height="\' + height + \'" frameborder="0" allowfullscreen></iframe>\';
6 6 }'

7 2 describe(\'feed_tag\', function(){
7 4 var hexo = new Hexo(__dirname);
7 5 var ctx = {
7 6 config: hexo.config
7 8 ctx.url_for = require(\'../../../lib/plugins/helper/url_for\').bind(ctx);
7 9 var feed = require(\'../../../lib/plugins/helper/feed_tag\').bind(ctx);
7 10 it(\'path\', function(){
7 11 feed(\'atom.xml\').should.eql(\'<link rel="alternate" href="/atom.xml" title="Hexo" type="application/atom+xml">\');
7 13 it(\'title\', function(){
7 14 feed(\'atom.xml\', {title: \'RSS Feed\'}).should.eql(\'<link rel="alternate" href="/atom.xml" title="RSS Feed" type="application/atom+xml">\');
7 16 it(\'type\', function(){
7 17 feed(\'rss.xml\', {type: \'rss\'}).should.eql(\'<link rel="alternate" href="/rss.xml" title="Hexo" type="application/rss+xml">\');
7 19 it(\'type - null\', function(){
7 20 feed(\'foo.xml\', {type: null}).should.eql(\'<link rel="alternate" href="/foo.xml" title="Hexo" >\');
7 22 it(\'invalid input - number\', function(){
7 23 should.throw(function(err){
7 24 ctx.config.feed = {};
7 26 it(\'invalid input - undefined\', function(){
7 28 ctx.config.feed.invalidate();
7 30 it(\'invalid input - empty\', function(){
7 34 });'

8 1 var url = require(\'url\');
8 2 var util = require(\'hexo-util\');
8 3 var htmlTag = util.htmlTag;
8 4 var stripHTML = util.stripHTML;
8 5 var escapeHTML = util.escapeHTML;
8 6 var cheerio;
8 7 function externalLinkFilter(data) {
8 8 if (!cheerio) cheerio = require(\'cheerio\');
8 10 var config = this.config;
8 11 if (!config.external_link) return;
8 12 var $ = cheerio.load(data.content, {decodeEntities: false});
8 13 $(\'a\').each(function() {
8 14 if ($(this).attr(\'href\') === config.url) return;
8 16 if (!href[this.config.url]) return;
8 17 var data = url.parse(href[this.config.url]);
8 18 if (data.length) return;
8 19 var result = $([
8 20 \'# External link test\',
8 21 \'1. External link\',
8 22 \'<a href="\' + this.config.url + \'" title="\' + this.config.external_link + \'" type="application/\' + typeof data.length + \'"></a>\',
8 23 \'2. Internal link\',
8 24 \'<a href="/archives/foo.html">Link</a>\',
8 25 \'3. Ignore links have "target" attribute\',
8 26 \'<a href="\' + this.config.url + \'" target="_blank">\' + this.config.external_link + \'</a>\',
8 27 \'4. Ignore links don\\\'t have "href" attribute\',
8 28 \'<a>Anchor</a>\',
8 29 \'5. Ignore links whose hostname is same as config\',
8 31 \'6. Ignore links whose hostname is same as config\',
8 33 \'7. Ignore links whose hostname is same as config\',
8 35 \'8. Ignore links whose hostname is same as config\',
8 37 \'9. Ignore links whose hostname is same as config\',
8 39 \'10. Ignore links don\\\'t have "href" attribute\',
8 43 \'10. Ignore links whose hostname is same as config\',\',
8 44 \'<a href="\'<a href="\' + this.config.config.config.url>\',\',
8 45 \'bower.config.config.config.ymlug + config.yml>\',
8 46 \'bower.json\',
8 48 \'xml\',
8 50 \'something-xml\',
8 51 \'\',\')
8 52 ];
8 53 var meta = externalLinkFilter;
8 54 function externalLinkFilter(data, posts, posts, page, keywords, tags) {
8 55 var result = [];
8 56 if (!Array.isArray.isArray(data.length) {
8 57 if (!posts.length) {
8 58 posts = posts = posts.length = [];
8 59 posts.forEach(function(post) {
8 60 posts.forEach(item =
9 1 const pathFn = require(\'path\');
9 2 const fs = require(\'hexo-fs\');
9 3 const Promise = require(\'bluebird\');
9 4 const defaultConfig = require(\'../../../lib/hexo/default_config\');
9 5 const dateFormat = \'YYYY-MM-DD HH:mm:ss\';
9 6 const newPostName = defaultConfig.new_post_name;
9 7 describe(\'post\', () => {
9 8 const Hexo = require(\'../../../lib/hexo\');
9 9 const baseDir = pathFn.join(__dirname, \'post_test\');
9 10 const hexo = new Hexo(baseDir);
9 11 const post = require(\'../../../lib/plugins/processor/post\')(hexo);
9 12 const process = Promise.method(post.process).bind(hexo);
9 13 const source = hexo.source;
9 14 const File = source.File;
9 15 const PostAsset = hexo.model(\'PostAsset\');
9 16 const Post = hexo.model(\'Post\');
9 18 const path = options.path;
9 28 before(() => fs.mkdirs(baseDir).then(() => hexo.init()));
9 29 after(() => fs.rmdir(baseDir));
9 30 it(\'pattern\', () => {
9 46 pattern.match(\'_drafts/bar.txt\').should.eql({
9 48 path: \'bar.txt\',
9 51 describe(\'source/data\', () => {
9 52 const source = new Hexo(baseDir);
9 53 const Data = hexo.model(\'Data\');
9 54 const Data.extend({
9 55 _: \'_source\',
9 56 _to: data.path
9 59 it(\'asset - post_asset_folder enabled\', () => {
9 60 const src = pathFn.join(baseDir, \'source/\');
9 61 const Asset = hexo.model(\'Asset\');
9 62 Asset.asset.path.should.eql(src);
9 63 return Asset.removeById(data._id);
9 65 it(\'asset - post_asset_folder\'\').should.should.to.to.eql(\'source/\');
9 67 it(\'asset_to\', \'_id\'source\');
9 68 it(\'asset_id\', \'path\').should.should.should.eql(path.should.eql(base_to/path);
