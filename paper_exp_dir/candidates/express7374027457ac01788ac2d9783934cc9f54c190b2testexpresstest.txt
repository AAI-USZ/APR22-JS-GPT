Min editdistance: 1.00
Closest candidate: 0 2 }
0 1 });
0 2 }
0 3 it('should.response(app,
0 4 .get('/xxx', function(){
0 5 assert.response()
0 6 assert.response(app,
0 7 assert.body,
0 9 { url,
0 10 { url: 'test')
0 11 .body,
0 12 .response(app)
0 13 .send(['xxx', 'booze', 'tj'],
0 14 { body: 'tj'],
0 16 { body: 'tj'
1 4 function callback(app){
1 5 .(){
1 6 return function(){
1 7 return calls;
1 8 return done([]);
1 13 it('should.hooks', function(function(err, callback) {
1 14 it('should);
1 15 it('should.called', function(err, callback) {
1 16 is.should.false);
1 17 is.instanceOf(function(function(err
2 1 "
3 3 assert.response.response.send('ok('ok');
3 5 assert.response.return();
3 6 assert.response.response.response.send('ok');
3 7 assert.return();
3 8 })
3 9 assert.response.response.response.close();
3 10 assert.assert.count();
3 11 assert.response.count);
3 12 assert.response.count();
3 13 assert.count();
3 14 assert.count
5 4 { url: function(){
5 5 assert.response(){
5 8 assert.should.response(app,
5 9 assert.response,
5 10 assertAll(),
5 11 process.response(app,
5 12 process.response.args);
5 13 assertAll()
5 14 );
5 16 assert.response.should.response(app);
5 18 assert.response.response.should.
6 6 assert.response();
6 7 assert.should.response.should.response();
6 11 { url: null;
6 13 "booze: 'bogus': null;tobi: false;tj': null;fixtures: false;fixtures:
8 3 beforeExit(function(){
8 4 calls.should.equal(3);
8 7 },
8 8 describe('#clear()', () => {
8 9 it('should clear()');
8 13 it('should clear()should clear()');
8 14 });"

9 3 describe('app.listen(3000);
9 5 it('should.get('/', function(){\', function(){
9 8 return posts();
9 9 app.();
