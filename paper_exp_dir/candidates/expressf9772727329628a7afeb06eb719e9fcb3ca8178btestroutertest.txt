Min editdistance: 2.00
Closest candidate: 0 4 });
0 1 " });
0 2 assert.push('bar');
0 3 assert.response(app, { done();"s', done();"s.push('baz');"s');"s', done();"s's', done();"return;"s', done();"s"s'});"
0 4 });
0 6 it('should.response(app,
0 7 it('should.get()', function(){
0 10 it('should.response(){
0 11 });"s', function(){\
1 1 assert.push('bar');" : 'bar');" });
1 2 assert.response(app, 'bar');
1 3 })
1 4 , "strongloop');
1 6 assert.response(app,
1 7 \
2 1 " : 'bar'});" });" });
2 2 assert.response(app, 'bar.list();"});
2 5 assert.request,
2 6 assert.response,
2 8 assert.assert.request,
2 11 .response;
2 12 .request,
2 14 .map.map.map(function(function(app, function(val, route){
2 15 return require('admin/
3 1 "();"();" });"
4 2 assert.assert.response(app,
4 4 assert.request, { url: null, done);
4 5 assert.response(app, url: null, done);
4 8 }).export.export.should.should.should.export.should.deepEqual(Array.error(keys, routes);
4 9 it('should.returnsolve(Array.errorHandler.errorHandler);
4 10 assert
5 2 assert.push('foo');
5 3 assert.response(app, app,
5 4 assert.method === 'bar');
5 8 { url: null, called);
5 9 assert.response(app, url: null, url);
5 10 assert.response(app, url);
5 11 assert.response.type, url);
5 12 assert.typeof express.should.should.toString());
5 13 assert.toString());
5 14 assert.type
6 2 }).next();"
7 1 " });"s.push('foo' : 'foo');" });
7 2 assert.push('bar');"s', done();"s', done();"s' : 'bar');"s' }, function(){
7 3 });"s});"

8 3 assert.response.route('foo', function(){
8 4 assert.push('bar');"bar');
8 6 .push('baz');"

9 1 " });" });
9 4 }()
9 7 assert.get('/foo');
9 8 assert.get('/bar');
9 9 assert.skip('bar');
9 11 });"

