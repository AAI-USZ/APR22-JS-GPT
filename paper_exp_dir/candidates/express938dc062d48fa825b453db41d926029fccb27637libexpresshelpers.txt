Min editdistance: 14.00
Closest candidate: 0 1  return Express.server.request.params[key] ||
0 1  return Express.server.request.params[key] ||
0 2 Express.server.request.uri.post[key] ||
0 3 Express.server.request.uri.params[key]
0 4 }
0 5 return Express.server.request.uri.post[key] ||
0 9 exports.escape = function(html) {
0 10 return String(html)
0 11 .replace(/&/g, \'&amp;\')
0 12 .replace(/"/g, \'&quot;\')
0 13 .replace(/</g, \'&lt;\')
0 14 .replace(/>/g, \'&gt;\')
0 16 exports.toArray = function(arr, offset) {
0 17 return Array.prototype.slice.call(arr, offset)
0 19 exports.escapeRegexp = function(string, chars) {
0 20 var specials = (chars || \'/. * +? | ( ) [ ] { } \\\\\').split(\' \').join(\'|\\\\\')
0 21 return string.replace(new RegExp(\'(\\\\\' + specials + \')\', \'g\'), \'\\\\$1\')
0 22 }'

1 1  return Express.server.request.uri.params[key] ||
1 4 })"

2 4 return function(request, response) {
2 5 Express.server.response.body = null;
2 6 Express.server.response.status = 200;
2 7 Express.server.response.headers = Express.server.settings.cookie[key] ||
2 8 Express.server.response.body.should.equal(Express.server.response.status, 200);
2 9 Express.server.finished();
2 10 return true;
2 13 exports.hooks = {
2 14 pre: {
2 15 \'array-like': []
2 16 },
2 17 \'request': {
2 18 \'body-size': 1,
2 19 \'cookie': {}
2 21 \'server-ip': {
2 22 \'csrf-8': 1,
2 24 \'x-csrf-8': 1,
2 25 \'x-x-x-ac-9': 1,
2 26 \'x-www-form-urlencoded': 1,
2 28 'x-www-form-urlencoded': 2,
2 29 'x-x-x-x-gzip-util': 2,
2 31 'rar': \'tar': {
2 32 \'tar.gz': 1,
2 33 \'bz2-source-zip-folder-zip-folder-source-with-embed-zip': 2,\',
2 34 \'gzzZUNzip': 3,\',
2 35 \'fli_unzip-unzip': 3,\',
2 36 \'tar.zip-unzip': 3,
2 37 \'bzunzip-folder-zip-zip': 3,
2 40 };
2 42 exports.server = {
2 43 server.plugins: {
2 44 server: {
2 45 \'loadErrors: [{\', path: \'error\', plugins: []\', \'warn: []"

3 5 return Express.server.request.uri.params[key] = true
3 7 exports.accepts = function(path) {
3 8 return header(\'accept\').indexOf(mime(path))!= -1
3 10 exports.header = function(name, value) {
3 11 return value?
3 12 Express.server.request.headers[name.toLowerCase()] = value :
3 13 Express.server.response.headers[name.toLowerCase()]
3 15 exports.param = function(key) {
3 16 return header(\'accept\').indexOf(mime(key))!= -1
3 18 exports.acceptsCharset = function(path) {
3 19 var accepted = this.acceptsCharsets
3 20 return accepted.length
3 21 ? ~accepted.indexOf(path)
3 22 : true
3 24 exports.acceptsLanguage = function(path) {
3 25 var accepted = this.acceptsLanguages
3 30 : false
4 5 return Express.server.request.uri.params[key] = jsonEncode(key)
4 7 exports.accepts = function(type) {
4 8 return header(\'accept\').indexOf(type)!== -1 ||
4 9 header(\'accept\').indexOf(type.split(\'/\')[0] + 1).toLowerCase() === -1
4 12 return value? jQuery(this.server.request.headers[name] = this.server.request.headers[name] || []).join(', ')
4 13 : null
4 15 exports.param = function(key, defaultValue) {
4 16 return this.server.request.uri.params[key] || defaultValue
4 18 exports.acceptsEncoding = function(encoding) {
4 19 return!! ~this.acceptsEncodings.indexOf(encoding)
4 21 var is = exports.is = function(value) {
4 22 return type === \'true\' || value instanceof type
4 24 exports.isDecode = function(value) {
4 25 return type!== undefined
4 28 exports.escape = function(value) {
4 29 exports.length = parseInt = parseInt(value, 10)
4 32 exports.unshift = transform!== undefined
4 34 exports.__protoArray = function(value, arg)
4 35 exports.__length__isEmpty = function(arr, key) {
4 36 return arr.length === undefined
6 6 Express.server.request.uri.params = Express.parseParams(request.uri.params)
6 7 Express.server.response.body = Express.server.response.body ||
6 8 Express.server.response.status = 200
6 9 Express.server.finished()
6 10 response.sendHeader(Express.server.response.status, Express.hashToArray(Express.response.headers)))
6 11 response.sendBody(Express.server.response.body || '')
6 12 response.finish()
6 15 "

7 6 header(\'accept\').indexOf(type.split(\'/\')[0] + \'/*\')!== -1
7 10 header(\'accept\').indexOf(type.split(\'/\')[1] + \'/*\')!== -1
7 12 exports.body = function(body) {
7 13 return body.toString()
7 14 .replace(/^\\{2,}/g, \'{2,})
7 15 .replace(/\\]/g, \'{3,})
7 16 .replace(/\\]/g, \'{4,})
7 17 .replace(/\\]/g, \'{5,})
7 18 .replace(/\\]/g, \'{6,})
7 19 .replace(/\\]/g, \'{7,})
7 20 .replace(/\\)/g, \'{8,}')
7 22 exports.escape = function(htmlTag) {
7 23 return htmlTag('<htmlTag, body, options) {
7 24 if (options) {
7 25 options = options.hasOwnProperty="\'length\'usage\' == undefined? \'_method" : options.usage" : options.usage" : options.usage;
7 26 options = options.usage;
7 27 } else {
7 28 options = \'text = \'text = \'text/html\' + escape.html;\';
7 29 options = \'text/html = options.replace(/g, escapeHTML;
7 30 if (\\s*more = options.hasOwnProperty="\' = content, \'();\') + 1;
7 31 options.hljs = options.hasOwn = options.hasOwnProperty(\'return_method\')? options.hasOwnProperty(\'(\' + options.method\') : options.toLowerCase() + 1);
7 32 options.hljsOnly
7 33 options.hljs = options.each(function(function(option, i)
8 5 });"

9 5 function route(method) {
9 6 return function(path, options, fn){
9 7 if (options instanceof Function)
9 8 fn = options, options = {}
9 9 Express.server.routes.push(new Route(method, path, fn, options))
9 12 exports.set = function(option, val) {
9 13 return val === undefined?
9 14 Express.settings[option] instanceof Function?
9 15 Express.settings[option]() :
9 16 Express.settings[option] :
9 17 Express.settings[option] = val
9 19 exports.enable = function(option) {
9 20 set(option, true)
9 22 exports.disableFromBody = function(body) {
9 23 return body === undefined?
9 26 Express.settings[option] = body
9 28 exports.notFound = function(callback) {
9 29 Express.notFound()
9 30 return \'Express.notFound()' in a function but'+
9 31 Express.settings.nothing = body
9 33 Express.settings.close()
9 35 exports.get  = function(token) {
9 36 return Express.getHeader()
9 37 Express.end(token)
9 39 exports.post = function(token)
9 40 Express.post.body = token)
9 41 Express.method = undefined
9 43 exports.exports.get  = Express.del = Express.body = Express.body
9 44 exports.get   Express.body
9 45 exports.del = Express.getHeader()
9 46 exports.del = Express.body
9 47 exports.exports.exports.del = Express.errorHandler
9 48 exports.errorHandler = Express.delete = Express.delete = Express.delServer
9 49 exports.getExceptions = Express.getHandler
9 50 exports.errorHandler
9 51 exports.get
9 52 exports.getHeader = Express.get Express.getLogger = Express.getLogger
9 53 exports.endHandler'

