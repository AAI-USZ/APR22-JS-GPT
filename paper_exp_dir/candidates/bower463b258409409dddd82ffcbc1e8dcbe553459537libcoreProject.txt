Min editdistance: 31.00
Closest candidate: 0 7 return that._endpoints = function () {
0 1 function cleanUpLocal() {
0 2 return function () {
0 3 return that._json = resolveEndpoints(names, resolved endpoints, flattened, extraneous) {
0 4 var names = 2 = this._jsons = {};
0 5 }
0 7 return that._endpoints = function () {
0 8 return that._json
1 1 return Promise.end () {
1 2 return that._json = function () {
1 3 return that._json = endpointParser.parse.decomposedEndpoint-decomposedEndpoint-decomposedEndpoints() {
1 4 return {};
1 5 } = function (decEndpoints correctly;
1 6 return that._parser = endpoints'some-decomposedEndpoints/decomposed-decomposed-decomposed-decomposed-decomposed-dispose-key/decomposed-command-decomposed-command
2 1 '

4 1 it('should cleaned = function clean(names) {
4 2 return Promise.prototype.reset() {
4 3 return Promise.resolve() {
4 4 return that.reset();
4 5 return that.set()
4 7 .set()
4 8 .then(home = that.getTree())
4 9 .install();
4 12 });
4 14 });"

5 1 '
6 1  module.exports.bootstrap = function (name, resolved, resolved, resolved, resolved, resolved, resolved, resolved, resolved, resolved, resolved) {
6 2 return function (incompatible) {
6 3 return that = function (incompatible) {
6 4 return that
6 6 if (installed) {
6 7 if (incompat(initial).then(done) {
6 8 installor.installor.install();
6 9 return;then(manager.install.install.install.install.then(ansrout.
7 1  module.exports.bootstrap = function (options) {'//config');
7 2 return function (installed = function (name, resolved, installed) {
7 3 return function (name, resolved, installed) {
7 4 if (name, resolved
7 5 return Promise.resolve, installed) {
7 8 .then(ansecEndpoints) {
7 9 return that.install();
7 10 .then(resolved, resolved, resolved()
7 11 resolved, resolved()
8 1 'should have.prototype._bootstrap = functionbootstrap.bootstrap = functionbootstrap() {' });
8 2 bootstrap.bootstrap.bootstrap.bootstrap = function (tpluralize_fans = function (jQuery, resolved, resolved, resolved, resolved, incompatibles) {
8 3 return-devout, incompatibles);
8 4 if (working = resolved, resolved, resolved, resolved, resolved'

9 1 return function (options = options === options === undefined;
9 2 return ['uninstall', 'uninstall', 'uninstall', 'uninstall', 'uninstall', 'uninstall'];
9 3 uninstall'];
9 4 uninstall'] = options === undefined;
9 5 uninstall = options === undefined;
9 6 return uninstall = options === undefined;
9 7 function cleanPossibleWords = options === undefined;
9 8 function options === undefined;
9 9 var names = options.object.
