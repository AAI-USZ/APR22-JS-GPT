Min editdistance: 5.00
Closest candidate: 3 2 route = hexo.route;
0 1 locals.posts.each(function(post){
0 2 var posts = post.posts.sort('date', -1);
0 3 var length = posts.length;
0 4 if (!length) return callback();
0 5 for (var i=0; i<length; i++){
0 6 if (mode == 0 || mode === false){
0 7 continue;
0 8 }
0 10 if (layout === 'false'){
0 11 route.set(post.path, function(fn){
0 12 fn(null, post.content);
0 13 });
0 14 } else {
0 15 post.prev = i === 0? null : arr[i - 1];
0 16 post.next = i === length - 1? null : arr[i + 1];
0 17 render(post.path, [layout, 'post', 'page', 'index'], post);
0 19 };"

1 1 var config = hexo.config;
1 2 if (config.exclude_generator && config.exclude_generator.indexOf('post') > -1) return callback();
1 3 var mode = config.archive,
1 4 archiveDir = config.archive_dir + '/';
1 5 if (!mode){
1 7 return callback();
1 9 mode = 2;
1 12 if (mode == 2){
1 13 pagment_dir = posts.archive || false;
1 14 posts.archive = true;
1 16 var result = render('archive', posts);
1 17 if (!result) result = render('index', posts);
1 18 file.write(result, data);
1 19 callback();
2 1 var config = hexo.config,
2 2 mode = +config.archive,
2 4 if (!mode) return callback();
2 5 var posts = locals.posts.sort('date', -1);
2 6 if (!posts.length) return callback();
2 8 paginator(archiveDir, posts, 'archive', render);
2 10 render(archiveDir, posts, 'archive', render);
3 2 route = hexo.route;
3 4 var arr = locals.posts.sort('date', -1).toArray(),
3 5 length = arr.length;
3 6 arr.forEach(function(post, i){
3 7 var layout = post.layout,
3 8 path = post.path;
3 9 if (!layout || layout === 'false'){
3 10 route.set(path, function(fn){
3 16 render(path, [layout, 'post', 'index'], post);
4 12 locals.archive = true;
4 16 var posts = locals.posts.sort('date', -1).populate('categories').populate('tags'),
4 17 path = posts.path;
4 19 if (mode == 1){
4 20 paginator(path, posts, 'archive', render);
4 22 render(path, ['archive', 'index'], posts);
4 24 };
4 25 module.exports.category = function(locals){
4 26 return locals.categories;
5 3 var mode = config.exclude_generator.substr(0, config.exclude_generator.indexOf('page') - 1);
5 11 locals.pages.each(function(item){
5 12 if (!item.prev && item[0] === 'latest'){
5 13 var layout = item[0];
5 14 render(layout, item, function(err, result){
5 15 if (err) throw err;
5 16 if (result.layout && result.layout!== 'page') result.layout = 'index';
5 17 var target = config.archive_dir + item[0];
5 18 if (layout === 'false') result.archive = result.archive;
5 19 if (result.layout && result.layout!== 'photo') result.layout = 'photo';
5 20 if (result.prev && result.prev.length < 0) result.prev = prev;
5 21 var result = render(layout, item);
5 22 if (!result.prev && result.next) result.next = next;
5 23 var newest = mout.array.find({
5 24 name: item,
5 25 year: item.date.format('YYYY'),
5 26 month: item.date.format('MM'),
5 27 day: item.date.format('DD'),
5 28 i_month: item.date.format('M'),
5 29 i_day: item.date.format('D')
5 31 for (i = oldest.year(); i <= newest.year(); i++){
5 32 result.year = i;
5 34 result.year = new Date() + i + 1;
5 35 for (i = i <= newest.year(); i++){
5 38 result.month = new Date() + i + 1;
5 40 result.month = i;
5 42 var length = 100;
5 43 for (i = 0; i < length; i++){
5 44 var item = this[i];
5 45 if (item.length === 0){
5 46 result.length = 0;
5 48 result.i = length;
5 51 result.raw = function(){
5 52 var J = db.model('J');
5 53 this.each(function(data){
5 54 if (data.length){
5 55 process.nextTick(function(){
5 56 J.last(data[0]);
5 59 db.model('Page');
6 1 if (hexo.config.exclude_generator && locals.exclude_generator.indexOf('post') > -1) return callback();
7 12 var generate = function(path, posts){
7 14 pagment_ posts.push(posts.slice(0, 1));
7 16 render(path, posts, [mode, content]);
7 19 var posts = locals.posts.sort('date', -1).populate('categories').populate('tags');
7 21 posts.forEach(function(post){
7 22 var layout = post.layout;
7 23 var newpostName = config.new_post_name;
7 25 pagment_posts.push(post.layout + ':category');
7 27 var result = render(path, posts);
7 28 if (!result) result = render('archive', posts);
9 4 var content = render(layout, content, options);
9 5 content = content
9 6 .replace(/{2,}/g, '-')
9 7 .replace(/([\\u4e00-\\u9fa5\\u3040-\\u30FF])([a-z0-9@#&;=_\\[\\$\\%\\^\\*\\-\\+\\,\\.\\/(\\\\)\\?\\:\\\'\\"\\[\\]\\(\\)])/ig, '$1 $2')
9 8 .replace(/([a-z0-9#!~&;=_\\]\\,\\.\\:\\?\\$\\%\\^\\*\\-\\+\\)\\/])([\\u4e00-\\u9fa5\\u3040-\\u30FF])/ig, '$1 $2');
9 9 if (!content.includes('No pages')) content = [content];
9 10 content.forEach(function(item){
9 11 var Page = source.split('/');
9 12 if (page.length === 1){
9 13 var result = render('page', item);
9 15 var result = render('index', item);
9 17 result.should.eql(content);
9 20 };'

