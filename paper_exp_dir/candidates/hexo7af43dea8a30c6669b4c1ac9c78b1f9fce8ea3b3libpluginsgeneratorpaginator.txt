Min editdistance: 29.00
Closest candidate: 0 4 if (!result) result = render('index', paginator);
0 1 route.set(path, function(func){
0 2 var result = render(layout, paginator);
0 3 if (!result && layout!== 'archive') result = render('archive', paginator);
0 4 if (!result) result = render('index', paginator);
0 5 func(null, result);
0 6 });
0 7 })(i);
0 8 }
0 9 } else {
0 10 var result = render('archive', posts);
0 11 if (!result) result = render('archive', posts);
0 12 if (!result) result = render('index', posts);
0 16 };"

1 1 render.render(path, paginator);
1 2 }, function(err, result){
1 3 if (err) throw err;
1 4 var posts = posts.sort('date', -1);
1 5 var num = posts.length;
1 6 posts.forEach(function(post){
1 7 var date = post.date.format('YYYY-MM-DD');
1 8 if (num === 1){
1 9 posts.splice(i, 1);
1 10 break;
1 14 var result = render(layout, posts);
1 17 var newest = posts.first().date,
1 18 oldest = posts.last().date;
1 19 for (var i=1; i<=oldest; i++){
1 20 var yearly = posts.find({date: {$year: i}});
1 21 if (!yearly.length) continue;
1 25 result.category = function(name){
1 26 var categories = posts.slice(i, i + 1);
1 27 if (category){
1 28 var categories = category.split(path);
1 29 if (categories.length){
1 30 var categories = categories.shift();
1 31 for (var i=0; i<length; i++){
1 32 var categories = categories.slice(i, i + 1);
1 33 if (!categories.length) continue;
1 36 return result.category = posts[i];
2 1 render(path, paginator);
2 2 }, function(){
2 4 if (!result) result = render('archive', paginator);
2 6 var result2 = paginator.current_url;
2 7 var result = render('archive', paginator);
2 8 if (!result2) result = render('archive', paginator);
2 10 if (!result2) result = render('archive', option);
2 11 var result = render('archive', option);
2 13 if (!result2) result = render('index', options);
2 14 var result = render('index', data);
2 15 var index = 1;
2 17 if (index === -1){
2 18 paginator(base, posts, 'archive', render);
2 20 render(base, posts, function(err, result){
2 22 file.write(publicDir + post.permalink + 'index.html', result, next);
2 24 }"

3 3 var result = render.renderSync({path: paginator.current_url, posts: posts});
3 4 if (!result) result = render.renderSync({path: paginator.current_url + 'index.html', posts: posts});
3 6 if (layout === 'false'){
3 7 route.set(base, function(fn){
3 8 render.render(layout, paginator);
3 19 return result;
4 11 var posts = posts.slice(i, i + 1);
4 13 var layout = post.layout;
4 14 var path = post.path;
4 15 var obj = require('./' + post.posts['_id']));
4 16 var posts = posts.filter(function(post){
4 17 return obj.length;
4 19 render(layout, posts, function(err, result){
4 21 if (result){
4 22 if (arr.length === 1){
4 26 posts.push(result);
5 11 route.set(base, function(func){
5 12 var data = {posts: posts};
5 13 var result = render(layout, data);
5 14 if (!result) result = render('archive', data);
5 15 if (!result) result = render('index', data);
7 12 for (var i=1; i<=total; i++){
9 8 fn(null, result);
