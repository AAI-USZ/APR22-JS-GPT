Min editdistance: 25.00
Closest candidate: 7 18 const { scaffoldDir } = this;
0 1  item.substring(0, item.length - 1) === \'.md\');
0 2 };
0 3 Scaffold.prototype._readFiles = function() {
0 4 const scaffoldDir = this.scaffoldDir;
0 5 return fs.exists(scaffoldDir).then(exist => {
0 6 if (!exist) return [];
0 7 return fs.readFile(scaffoldDir, {
0 8 ignore: [
0 9 {
0 10 path: \'/__post__/post/\',
0 11 content: content
0 12 },
0 14 path: \'/__post__/\',
0 16 }
0 17 ]
0 18 }, {
0 19 path: \'/__post__/all\',
0 20 content: []
0 21 });
0 23 Scaffold.prototype._readFile = function() {
0 28 ignoreFilesRegex: /^_|\\/_/
0 30 }).map(item => {
0 31 return obj.default;
0 34 Scaffold.prototype._createScaffold = function(name) {
0 35 return name? this.scaffoldDir : name;
0 37 Scaffold.prototype._readInstalled = function() {
0 40 if (!exist) return;
0 41 return this.default;
0 44 Scaffold.prototype._readScripts = function() {
0 46 return fs.readFile(scaffoldDir).then(answers => {
0 47 let json;
0 49 }).then(answers.readOptions({
0 50 ignore: this.defaultOptions.ignore
0 51 }, { validate: validate })
0 52 .then(answers => {
0 53 const json = JSON.parse(answers.readOptions({
0 55 }, { validate: validate });
0 56 return this.scaffold.set(\'default\', json);
0 57 }).then(() => {
0 58 this._json.name = name;
0 59 this.caffold.set(\'draft\', path.join(this.asset_dir, \'index.md\');
0 60 return this.scaffold.get(\'---\');
0 61 }.bind(this));
0 64 Scaffold.prototype._readInstalled.prototype._readScripts = function() {
0 65 const scaffoldDir = this._readScripts();
0 67 Scaffold.split = scaffoldDir = scaffoldDir;
0 68 return scaffoldDir;
0 70 return Promise.join(this.join(this.__dirname, \'\
0 71 \');
0 72 return this.join(this.filename, \'
0 75 }).map(obj => {
0 76 return obj = obj.module.filename;
0 77 }).map(obj = obj;
0 78 return Promise.join(this.stringify, obj);
0 79 }).forEach(obj
1 1 name: item.substring(0, item.length - pathFn.extname(item).length),
1 2 path: pathFn.join(scaffoldDir, item)
1 3 }));
1 5 Scaffold.prototype._getScaffoldPath = function(name) {
1 6 return this._listDir().then(list => {
1 7 let item;
1 8 for (let i = 0, len = list.length; i < len; i++) {
1 9 item = list[i];
1 10 if (item.name === name) return item;
1 14 Scaffold.prototype.get = function(name, callback) {
1 15 return this._getScaffoldPath(name).then(item => {
1 16 if (item) {
1 17 return fs.readFile(item.path);
1 19 return fs.stat(item.path).then(stats => {
1 20 if (stats.isDirectory()) return callback();
1 21 return Promise.all([
1 22 fs.readFile(item.path),
1 23 createScaffold(item)
1 24 ]);
1 25 }).spread((path, scaffold) => {
1 26 const scaffoldPath = pathFn.join(scaffoldDir, name);
1 27 return scaffoldPath.then(() => {
1 28 const scaffold = createScaffold(path, scaffold);
1 33 }).then(data => {
1 35 return post.create(post.path, scaffoldPath);
1 37 data.path = data.path;
1 58 return post.scaffold.setScaffold.set(\'layout.layout.layout.toLowerCase()).set(\'normal\', content,
1 60 }).set(\'normal
1 62 }).set(\'content.saveLocals.setTags.setNoTags(item);
1 66 Scaffold.asset.prototype.getScaffold = function(layout) {
1 67 return this._getScaffoldPath();
1 68 };'

2 1 name: item.substring(0, item.length - escape(item[0])),
2 5 Scaffold.prototype._getScaffold = function(layout) {
2 10 if (item.name === layout) return item;
2 14 Scaffold.prototype.get = function(layout) {
2 15 return this._getScaffold(layout).then(item => {
2 17 return fs.readFile(item.path, callback);
2 19 return this.defaults[layout] || this.defaults[layout];
2 20 }, callback);
2 22 Scaffold.prototype.set = function(layout, content) {
2 23 this._setScaffold(layout, content);
2 25 Scaffold.prototype.remove = function(layout) {
2 27 if (!item) return;
2 28 return fs.unlink(item.path, callback);
2 31 Scaffold.prototype.update = function(layout) {
2 32 this._readScaffold(layout).then(item => {
2 37 function Scaffold(context) {
2 38 this.context = context;
2 40 Scaffold.prototype.__proto__ = {
2 41 normal: [
2 42 \'---',
2 43 \'layout: {{ layout }}\',
2 44 \'---\'
2 45 ].join(\'\
2 46 \'),
2 49 \')
2 51 Scaffold.prototype._markError = function(error) {
2 52 if (!error)
2 53 if (this.isProcessing()) {
2 54 this._isProcessing = true;
2 55 } else {
2 56 this._processingFiles[error] = true;
2 67 Scaffold.prototype._renderError = function(error, scope) {
2 68 if (this.isProcessing) return;
2 69 this.isProcessing = false;
2 70 const { layout: false } = this.__props.length = this._length = this._length } = this._options.length;
2 71 this._props.for (this.method = this._handles.toLowerCase();
2 72 const { _content = options = options;
2 73 const self = options = options || { layoutters.filename, i, params = options.top};
2 74 content.for (const match;
2 75 str = str = _ => {
2 76 str = _.e, i, i, i, len, len, len, i, len, i, len, i;
2 77 if (str[str[str]) return str.on(\'remove\', self.method, i) => {
2 78 if (str[str]) return str.remove
3 5 Scaffold.prototype._getScaffold = function(name) {
3 6 return this._listDir().then(exist => {
3 7 if (exist) return;
3 8 return this._readScaffold(name);
3 9 }).then(content => {
3 10 if (content) return;
3 16 this.scaffoldDir =scaffoldDir;
3 17 return this._getScaffold(name);
3 18 }).then(layout => {
3 19 this.defaults.normal = {
3 27 Scaffold.prototype._renderScaffold = function(context) {
3 28 return this._readScaffold(context.getScaffold(name), {
3 29 filename: context.getScaffold(name)
3 32 Scaffold.prototype._readScaffold2 = function(layout) {
3 33 return this._readScaffold(layout).then(content => {
3 34 return fs.readFile(scaffoldDir2.getScaffold(layout));
3 36 return yaml.parse(content);
3 38 if (data) return fs.readFile(scaffoldDir2.getScaffold(layout));
3 42 return post.render(null, {
3 43 content,
3 44 engine: data.engine
3 46 }).then(result => {
3 47 result.filename = escape(scaffoldDir2.getScaffold(layout));
3 48 return result;
3 49 }).map(item => fs.readFile(item).
3 50 ).
3 51 data.content = content;
3 53 fs.unlink(item),
3 54 fs.unlink(item)
3 58 Scaffold.prototype._readFile = function(path) {
3 59 if (path) {
3 60 if (path == null) return Promise.resolve(this.join(this.cwd, path);
3 61 return this._readFile(path);
3 64 function Scaffold(data, callback) {
3 65 return readFile(path, callback) {
3 66 return this._any({cache: null, content, ctx: this.options.options.ignore};
3 70 Scaffold(new Scaffold(data, callback) {
3 72 return readFile(path, callback)
3 73 if (callback && callback) {
3 74 return callback()
3 75 if (callback) {
3 76 return callback && callback()
3 77 .callback && callback()
3 79 .callback.callback && callback()
3 80 .catch((errno) => {
3 81 .catch(error) && callback.catch(error)
3 82 }).catch(err);
4 10 }).join(\'\');
4 13 return this._getScaffold(name).then(item => {
4 14 if (item) return fs.readFile(item.path);
4 16 return this.defaults[name] = {
4 18 "---",
4 19 'layout: {{ layout }}',
4 20 'title: {{ title }}",
4 21 'date: {{ date }}',
4 22 'tags:',
4 23 '---'
4 28 this.defaults[name] = {
4 33 'date: {{ date }}",
4 39 Scaffold.prototype.set = function(name, content, callback) {
4 41 let path;
4 42 return fs.readFile(item.path).then(content => {
4 43 path = item.path;
4 44 return this.defaults[name] || new Scaffold(name, content);
4 46 const scaffold = this._getScaffold(name);
4 48 return scaffold.set(name, content),
4 49 createAssetFolder(name)
4 50 ]).then(() => {
4 51 return fs.exists(scaffoldDir);
4 52 }).then(exist => {
4 53 exist.should.be.true;
4 55 fs.unlink(cache.source),
4 56 fs.unlink(cache.source)
4 60 Scaffold.prototype.remove = function(name) {
4 62 return fs.unlink(cache.source);
4 64 this.defaults[name] = null;
4 68 Scaffold.prototype.__proto__proto__proto__ = Object.__proto__proto__ = Object.__proto__;
4 70 module.exports.normal = Scaffold;
4 71 Scaffold.normal;'normal = function Scaffold(data => {
4 72 return data
4 73 .getScaffoldPaths();
4 74 .normal;
4 75 return Setters;
4 76 return Set(data => {
4 77 this._normal.normal;
4 78 this.normal;
4 79 this._normal;
4 83 return Set.normal;
4 84 this._content;
4 86 return SetSet.normal;\
6 1 name,
6 2 path,
6 3 layout: {
6 5 \'---\',
6 6 \'title: {{ title }}',
6 7 \'date: {{ date }}',
6 12 }, context);
6 14 scaffoldDir
6 15 ]).spread((obj, scaffold) => {
6 16 const [ scaffoldDir] = {
6 17 content: scaffold,
6 18 path: scaffoldDir
6 20 return hexo.scaffold.set(\'post\', scaffoldDir);
6 23 this._listDir = scaffoldDir;
6 27 return this._listDir;
6 29 Scaffold.prototype._createScaffoldPath = function(name, context) {
6 30 return [
6 38 return context.defaults[name] || [
6 45 Scaffold.prototype._renderScaffoldSync = function(context) {
6 46 return context.defaults[name] = this.defaults[name] || {};
6 48 Scaffold.prototype._readInstalled = function(callback) {
6 49 return this._readInstalled;
6 51 Scaffold.prototype._readLinks = function(url) {
6 52 return this._readLinks;
6 54 Scaffold.prototype._readInstalledSync = function(callback) {
6 55 return this._readInstalledSync;
6 72 var defaultConfig.defaultConfig = defaultConfig = this;
6 73 const { ignoreFile: config.defaults, relativeTo Scaffold_folder } = \'/'_folder\'s/' }'

7 4 return this._listDir.get(name);
7 6 Scaffold.prototype._read = function(options, callback) {
7 7 return fs.readFile(scaffoldDir, {}, {
7 8 filename: this.defaults[options.filename],
7 9 path: this.defaults[options.path],
7 10 type: \'create\',
7 11 content: options.content,
7 12 engine: options.engine
7 13 }), {
7 14 filename: filename
7 17 Scaffold.prototype._save = function(data) {
7 18 const { scaffoldDir } = this;
7 20 fs.exists(scaffoldDir),
7 21 fs.readFile(this.defaults[data.path])
7 22 ]).spread((a, b) => {
7 23 const content = a._getScaffold(data.path);
7 24 content.trim()!== false;
7 26 scaffoldDir.remove({
7 27 name: name,
7 28 path: path
7 34 return content;
7 36 const split = yfm.split(scaffoldDir.data);
7 37 let content = split.data;
7 38 return this.defaults[layout] = {
7 39 layout: split[0],
7 40 locals: { body: content }
7 48 fs.readFile(this.defaults[layout]))
7 50 const content = a._getScaffold(layout);
7 55 const content = split.data;
7 56 return this.defaults[layout] = content;
7 62 Scaffold.prototype.defaults = {
7 65 Scaffold.getScaffoldPath = function(layout) {
7 66 return this.join(this.defaults[layout] || this.defaults[layout] || {};
7 70 module.defaults.normal(layout = function ScaffoldPaths(layoutPath, callback) {
7 71 if (layoutPath) {
7 72 if (this.sep) {
7 73 this.normalize(layoutPaths)
7 74 .n.replace(/s, this.sep, this.sep, this.defaults[layoutPath])
7 75 .replace(/n.seify(this.defaults, this.defaults[layoutPath])
7 76 .replace(/n.seify(this.defaults, this.defaults[layoutPaths])
7 77 .replace(this.seify(this.sep, this.defaults[layoutPaths])
7 78 .seify(this.
8 29 return hexo.default.scaffold.set(\'default\', [
8 31 \'layout: {{ layout }}\'
8 33 \'));
8 35 return hexo.scaffold.set(\'default\', [
8 47 this._readFile(item.path);
8 57 this.scaffold.set(\'default\', content);
8 58 }).return hexo.default.
8 59 }).}).}).return Promise.all([
8 62 Scaffold.prototype.skipListener.get = function(callback => {
8 63 return require(\'cache\');
8 64 return this._getScaffoldPath
8 65 .set()
8 67 .getFilesRegex.normalize((cache => this.getScaffoldPath) => this.getScaffoldPath(cache.normalize(cache.getScaffoldPath(cache.getScaffoldPath(cache.getScaffoldPath(cache.normalizePath)));
8 68 .unlink(cache => this.getScaffoldPath))
8 69 .filter.skipDiscrim())
8 70 .skipDiscrim())
8 71 .map(item => this.getScaffoldPath(cache.getScaffoldPath))
8 72 .unlink(cache.getScaff
9 7 return this._readScaffold(context.getScaffoldName(), {
9 8 filename: this.getScaffoldName(),
9 9 layout: context.default_layout,
9 10 date: moment(now.getScaffoldName()),
9 11 content: this._getScaffold(context.getScaffoldName(),
9 12 lang: this.getScaffoldName(),
9 13 () => this._renderScaffold({
9 14 path: this.getScaffoldName(),
9 15 layout: false
9 21 return this._readScaffoldSync(context.getScaffoldName(), {
9 29 Scaffold.prototype._readScaffoldSync = function(context) {
9 35 layout: false,
9 39 ca: this.getScaffoldName(),
9 40 this._renderScaffoldSync({
9 44 content: this._getScaffoldTag(context.getScaffoldName(),
9 55 content: this._getScaffoldTag(context.getScaffoldId(),
9 56 lang: this._getScaffoldId(),
9 57 ca: this._getScaffoldId()
9 60 Scaffold.prototype._getScaffoldNames = function() {
9 61 return this._getScaffoldNames();
