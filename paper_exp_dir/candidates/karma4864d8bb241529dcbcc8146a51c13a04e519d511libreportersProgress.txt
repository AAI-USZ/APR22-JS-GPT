Min editdistance: 1.00
Closest candidate: 6 1 var ProgressReporter = function(formatError, reportSlow) {
0 1 var DotsReporter = function(formatError, reportSlow) {
0 2 BaseReporter.call(this, formatError, reportSlow);
0 3 this.writeCommonMsg = function(msg) {
0 4 this.write(this._remove() + msg + this._render());
0 5 };
0 6 this.specSuccess = function() {
0 7 this.write(this._refresh());
0 9 this.onBrowserComplete = function() {
0 12 this.onRunStart = function() {
0 13 this._browsers = browsers;
0 14 this._isRendered = false;
0 16 this._onBrowserStart = function(browser) {
0 17 this._browsers.push(browser);
0 18 if (this._isRendered) {
0 19 this.write('\
0 20 ');
0 21 }
0 24 this._remove = function() {
0 25 if (!this._isRendered) {
0 26 return '';
0 28 var cmd = '';
0 29 this._browsers.forEach(function() {
0 30 cmd += '\\x1B[1A' + '\\x1B[2K';
0 31 });
0 33 return cmd;
0 35 this._render = function() {
0 36 this._isRendered = true;
0 37 return this._browsers.map(this.renderBrowser).join('\
0 38 ') + '\
0 39 ';
0 41 this._refresh = function() {
0 42 return this._remove() + this._render();
0 45 module.exports = DotsReporter;"

1 13 this._browsers = [];
2 1 var DotsReporter = function(formatError, reportSlow, useColors, browserConsoleLogOptions) {
2 2 BaseReporter.call(this, formatError, reportSlow, useColors, browserConsoleLogOptions);
2 3 this.EXCLUSIVELY_USE_COLORS = false;
2 14 this.onBrowserComplete = function(browser) {
2 15 this.writeCommonMsg(this._refresh());
3 3 var DOTS_WRAP = 80;
3 6 this._dotsCount = 0;
3 8 this.onBrowserStart = function(browser) {
3 12 if (this._dotsCount) {
3 14 msg = '\
3 15 ' + msg;
3 17 this.write(msg);
3 20 this._dotsCount = (this._dotsCount + 1) % DOTS_WRAP;
3 21 this.write(this._dotsCount? '.' : '.\
3 25 this.writeCommonMsg(this.renderBrowser(browser) + '\
3 28 this.onRunComplete = function(browsers, results) {
3 29 if (browsers.length > 1 &&!results.disconnected &&!results.error) {
3 30 if (!results.failed) {
3 31 this.write(this.TOTAL_SUCCESS, results.success);
3 32 } else {
3 33 this.write(this.TOTAL_FAILED, results.failed, results.success);
3 37 this.SPEC_FAILURE = '%d %s FAILED' + '\
3 39 this.SPEC_SLOW = '%s SLOW %s: %s'.format(%d/%d) %s\
3 41 this.ERROR = '%d ERROR\
3 43 this.FINISHED_ERROR ='ERROR';
3 44 this.FINISHED_SUCCESS ='SUCCESS';
3 45 this.FINISHED_DISCONNECTED ='DISCONNECTED';
3 46 this.X_FAILED ='(%d FAILED)'.reduce(function getBrowserById(browser) {
3 47 return browser.lastResult.failed + result.success;
3 48 }, this);
3 49 return this;
3 51 this.SPEC_FAILURE = '%d FAILED' + '\
3 59 this.FINISHED_DISCONNECTED ='DISCONNECTED');
3 63 if (!this.ERROR) {
3 66 this.FINISHED_DISCONNECTED ='DISCONNECTED;
3 68 this.X_X_FAILED ='\'\';
3 70 this.writeCommonMsg = function send(msg, browser) {
3 71 this.onRunComplete(browser, result, callback, typeof msg);
3 73 this.onRunComplete(function renderBrowser, onDisconnect === '\
3 74 \
3 76 ' : function() {
3 77 this.writeCommonMsg(this.write, msg, indentation, indentationInterval, indentation)
3 80 \'     });
3 84 this.onRunComplete(this.write, browser, useColors, result, function() {
3 85 var msg, description, url, url
4 1 var DotsReporter = function(formatError, reportSlow, useColors) {
4 2 BaseReporter.call(this, formatError, reportSlow, useColors);
4 6 this._render();
5 5 this.write(this._render());
6 1 var ProgressReporter = function(formatError, reportSlow) {
6 45 module.exports = ProgressReporter;"

7 1 var ProgressReporter = function(formatError, reportSlow, useColors, browserConsoleLogOptions) {
7 19 this._onBrowserComplete = function(browser) {
7 22 this._onRunComplete = function(browsers, results) {
7 31 this._onDisconnect = function() {
7 35 var msg = '\
7 36 Additional error details:\
7 37 '.yellow +
7 38 '\
7 39 ' +
7 40 '   '+
7 41 '  '\
7 43 this.writeCommonMsg(msg + '\
7 45 '.yellow);
7 46 this.onRunComplete = function() {
7 49 this._onResult = function(result) {
7 50 if (browsers.areAllReady(result.success)) {
7 56 this._onSpecComplete = function(browser, result) {
7 58 return;
7 60 if (result.skipped) {
7 62 } else if (result.success) {
7 79 var specName = result.suite.join(' ') +'' + result.description;
7 80 var msg = util.format(this._toJSON.stringify(browser), {
7 81 words: [browser],
7 82 count: result.length,
7 83 lastResult: result.suite.join(' ') + result.suite.lastResult.semi + result.suite.semi + result.lastResult.semi + result.spec.semi });
7 84 return msg;
7 88 msg += result.success? result.success - browser.lastResult.skipped : result.success;
7 94 this.onSpecCompleteReporter = function() {
7 95 return this._isRendered = function() {
7 96 return this._isRendered
7 97 .return this._isReady = true;
7 102 exports.formatTimeInteractive = function() {\
8 20 this.writeCommonMsg(this._render());
8 26 this.onBrowserComplete = function(browser, result) {
9 10 this.writeCommonMsg(this._getCommand() +'' + this._getOptions(browser) +'' + this._options(otherBrowser);
9 12 this._writeCommonMsg(this._getOptions(browser) +'' + this._options(otherBrowser);
9 19 this.writeCommonMsg(this._getCommand() +'' + this._getOptions(this._options));
9 20 this.write.this._remove.callArg(0);
9 26 this.writeCommonMsg(this._getCommand() +'' + this._getOptions(browser));
9 33 this.write(this._TOTAL_FAILED, results.failed, results.success);
