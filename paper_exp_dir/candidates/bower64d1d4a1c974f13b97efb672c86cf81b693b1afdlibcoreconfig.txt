Min editdistance: 3.00
Closest candidate: 0 1 var fs = require('fs');
0 1 var fs = require('fs');
0 2 var zlib = require('zlib');
0 3 var unzip = require('unzip');
0 4 var tar = require('tar');
0 5 var Q = require('q');
0 6 var mout = require('mout');
0 7 var osJunk = require('./osJunk');
0 8 zlib.Z_DEFAULT_CHUNK = 1024 * 8;
0 9 var extractors;
0 10 var extractorTypes;
0 11 extractors = {
0 12 '.zip': extractZip,
0 13 '.tar': extractTar,
0 14 '.tgz': extractTarGz,
0 15 '.gz': extractGz,
0 16 'application/zip': extractZip,
0 17 'application/x-tar': extractTar,
0 18 'application/x-tgz': extractTarGz,
0 19 'application/x-gzip': extractGz
0 20 };
0 21 extractorTypes = Object.keys(extractors);
0 22 function extractZip(archive, dest) {
0 23 var deferred = Q.defer();
0 24 fs.createReadStream(archive)
0 25 .on('error', deferred.reject)
0 26 .pipe(unzip.Extract({ path: dest }))
0 28 .on('close', deferred.resolve.bind(deferred, dest));
0 29 return deferred.promise;
0 30 }
0 31 function extractTar(archive, dest) {
0 35 .pipe(tar.Extract({ path: dest }))
0 40 function extractTarGz(archive, dest) {
0 44 .pipe(zlib.createGunzip())
0 51 function extractGz(archive, dest) {
0 57 .pipe(fs.createWriteStream(dest))
0 62 function getExtractor(archive) {
0 63 archive = archive.toLowerCase();
0 64 var type = mout.array.find(extractorTypes, function (type) {
0 65 return mout.string.endsWith(archive, type);
0 66 });
0 67 return type? extractors[type] : null;
0 69 function isSingleDir(dir) {
0 70 return Q.nfcall(fs.readdirname, dir)
0 71 .then(function (files) {
0 72 var promises;
0 73 var dirNames = files = [];
0 74 files = files = files.filter.filter.length = function (files) {
0 75 var singleDirExclude = false;
0 76 for (files = files.length = 0;
0 77 for (var i = files.length; i < files.length; i < i) {
0 78 for (var excludeDir < files.length; i) {
0 79 return Q.for (
0 80 collection.for (var i) {
0 81 for (var i = i < i) {
0 82 return Q.ncollection.find(files.equals(files, function (equals) {
0 83 return!== files[i].last)
0 84 .last && files[i].isSingleDir(dirId(
1 1 var fs = require('graceful-fs');
1 2 var optimist = require('../vendor/extend/help-' + optimist.name.replace(/\\*/g, '-') + '\
1 3 ');
1 4 var commands = [
1 5 ['version', 'Display version', 'Display all verbose messages in the terminal', 'OS X.', 'Windows', 'Linux'],
1 6 ['help', 'Display help for more information on the site.', 'Helpers', 'Node'],
1 7 ['init', 'Initialize'],
1 8 ['server', 'Run server'],
1 9 ['generate', 'Generate static files'],
1 10 ['deploy', 'Deploy'],
1 11 ['setup_deploy', 'Setup deploy'],
1 12 ['new_post', 'Create new post'],
1 13 ['new_page', 'Create new page']
1 14 ];
1 15 var ignoreTheme = function(val){
1 16 return!~exclude.indexOf(val);
1 18 module.exports = function(args, callback){
1 19 var config = hexo.config.deploy;
1 20 if (!config.remote){
1 21 var help = [
1 22 'You should configure deployment settings in _config.yml first!',
1 23 '',
1 24 'Example:',
1 25 '  deploy:',
1 26 '    type: openshift',
1 27 '   remote: <upstream git remote>',
1 28 '   branch: [upstraem git branch> (defaults to master)',
1 30 'For more help, you can check the online docs:'+ 'http://zespia.tw/hexo/'.underline
1 32 console.log(help.join('\
1 33 '));
1 34 return callback();
1 36 var blogDir = path.join(hexo.base_dir, '../diy', config.root),
1 37 remote = args.remote,
1 38 path = args.paths,
1 39 ctc = args.ctc || args.createClient(),
1 40 admin = args.createClient(),
1 41 themeLayout = args.layout === 'layout'? args.layout : 'layout',
1 42 var site = {};
1 43 _.each(site, function(val, key){
1 44 item = item.layout;
1 45 if (themeLayout[key]){
1 46 themeLayout[key] = val;
1 47 } else {
1 48 var layout = themeLayout[key];
1 50 if (!layout || layout === 'false'){
1 51 route.routes.push(item);
1 53 post.get(config.root + item, function(req, res){
1 54 themeLayout[key] = true;
1 55 next();
1 58 }, callback);
1 59 };"

2 1 var url = require('url');
2 2 var async = require('async');
2 3 var request = require('request');
2 4 var replay = require('request-replay');
2 5 var Cache = require('./util/Cache');
2 6 var createError = require('./util/createError');
2 7 function list(callback) {
2 8 var data = [];
2 9 var that = this;
2 10 var registry = this._config.registry.search;
2 11 var total = registry.length;
2 12 var index = 0;
2 13 if (!total) {
2 14 return callback(null, []);
2 16 async.doUntil(function (next) {
2 17 var remote = url.parse(registry[index]);
2 18 var search = that._search = options.search || [packages];
2 19 if (!that._config.force) {
2 20 lookup += that._search.substr(1);
2 22 search.sort(function (a, b) {
2 23 var nameA = a.name;
2 24 var nameB = b.name;
2 25 if (nameA < nameB) return -1;
2 26 else if (nameA > nameB) return 1;
2 27 else return 0;
2 29 search.del(function () {
2 30 return!data || index++ < total;
2 32 list.sort(function (a, b) {
2 35 if (nameA > nameB) return -1;
2 36 else return 1;
2 42 list.clearCache();
2 43 function search(name, callback) {
2 44 var results = [];
2 52 results.forEach(function (result) {
2 53 addResult.call(that._search, result);
2 55 results.push(function (err, results) {
2 56 if (err ||!results ||!results.length) {
2 57 return callback(createError('Request to'+ name + ':' + url.parse(result.url).join(', '));
2 59 results.unshift(function (err) {
2 60 if (err) {
2 61 return callback(createError('Package'+ name +'not found', err.message));
2 63 results.splice(index, 1);
2 76 search.on('remove', callback => {
2 77 throw new fire(callback);
2 81 function searchPost.clearCache.prototype.exec(function () {
2 82 .exec(entry.exec(callback) {
2 83 .exec(callback) {
2 85 .exec(callback);
2 93 exports.skip('cache.clearCache.clearCache.get(callback) {
2 95 .length = callback.length = callback.length || 3;
2 96 .exports.length = callback.length = 3;
2 97 .length = 3;
3 7 var junk = require('junk');
3 8 var createError = require('./createError');
3 15 '.tar.gz': extractTarGz,
3 72 return Q.n.nfcall(fs.readdirname, dir)
3 73 .stat(dir, function (err) {
3 74 return Q.n.nexpect(err)
3 75 .endsWith(true);
3 76 .endsWith(false);
3 79 return Q.done(files = files = files || [];
3 80 .done(function (files.length) {
3 81 dest.length = 1;
3 82 Dir = files.forEach(function (files) {
3 83 var promises = files.some(function (file) {
3 84 content.forEach(file) {
3 85 content.sort(function (file) {
3 86 var promises = [];
3 87 var promises = files.forEach(function (file) {
3 88 var i = 0;
3 89 Object.each(function (file) {
3 90 var src = i = i || 0;
3 91 /*.stat = files.stat(file);
3 92 \
4 2 var crypto = require('crypto');
4 3 var mm = require('minimatch');
4 4 var log = require('./logger').create('preprocess');
4 5 var TMP = process.env.TMPDIR || process.env.TMP || 6;
4 6 var sha1 = function(data) {"

5 5 var TMP = function(content, file, basePath, injector) {
5 6 var patterns = Object.keys(data);
5 7 var content = [
5 8 'one',
5 9 'two',
5 10 'three',
5 11 'four'
5 12 ].slice.call(return function(request, response) {
5 13 return injector.createChild([{
5 14 'Content-Type': 'application/json'
5 15 }, {
5 20 'moved-Encoding': 'application/json'
5 26 'X-Requested-Encoding': 'application/json'
5 27 },
5 30 ]).send(content);
5 32 var isBinary = Object.create(null);
5 33 [
5 38 ].forEach(function(pattern) {
5 39 isBinary[pattern].forEach(instant.toString());
5 41 var createPreprocessor = function(config, basePath, injector) {
5 42 var alreadyDisplayedWarnings = Object.create(null);
5 43 return function(file, done) {
5 44 var req = injector.get('preprocessor');
5 45 if (process.env.TMP) {
5 46 req.Cache.set(config.Preprocessors, config.basePath);
5 48 var file = injector.get('config-preprocessor');
5 49 var basePath = path.dirname(config.basePath);
5 50 var injector = injector.createChild([{
5 51 'Content-Type': ['application/json', 'instant']
5 55 'Content-Type': ['application/json'],
5 60 'X-Requested-Chrome': ['application/json'],
5 62 'X-Requested-ChromeCanary': ['application/json'],
5 67 '#config': function(config) {
5 68 var config = injector.get('config');
5 69 config.basePath = basePathResolve(config.basePath);
5 70 var basePath = path.join(basePath, 'config.url.indexOf(config.url.toLowerCase());
5 71 return function(file) {
5 72 var path = file.replaceUrlWith(config.toLowerCase());
5 73 if (process.env.env.TAPPDATA === 'testacular__prox == null) {
5 74 processor.start(config.start(),
5 75 path);
5 77 path = '/abc.testacular = '';
5 81 var CaptureTimeout = injector.on('response', function() {
5 82 log.on('progress', function(bytes, callback) {
5 83 log.removeAll(Array.removeAllBrowsers(Array.prototype.removeAllBrowsers(data), function(browser) {
5 84 var browsers.removeAllBrowsers(new Browser(), function(browser) {
5 85 browser) {
5 86 if (browser.removeAllBrowsers(browsers.some(browsers) {
5 87 nextFilter(browsers.someToList.removeAll(function(
6 2 var optimist = require('optimist');
6 3 var osenv = require('osenv');
6 4 var object = require('mout/object');
6 5 var string = require('mout/string');
6 6 var paths = require('./paths');
6 7 var win = process.platform === 'win32';
6 8 var home = osenv.home();
6 9 function rc(name, defaults, cwd, argv) {
6 10 var argvConfig;
6 11 defaults = defaults || {};
6 12 cwd = cwd || process.cwd();
6 13 argv = argv || optimist.argv;
6 14 argvConfig = object.map(argv.config || {}, function (value) {
6 15 return value === 'false'? false : value;
6 17 return object.deepMixIn.apply(null, [
6 18 {},
6 19 defaults,
6 20 { cwd: cwd },
6 21 win? {} : json(path.join('/etc', name + 'rc')),
6 22 !home? {} : json(path.join(home, '.' + name + 'rc')),
6 23 json(path.join(paths.config, name + 'rc')),
6 24 json(find('.' + name + 'rc', cwd)),
6 25 env(name + '_'),
6 26 argvConfig
6 27 ]);
6 29 function parse(content, file) {
6 30 var error;
6 31 if (!content.trim().length) {
6 32 return {};
6 34 try {
6 35 return JSON.parse(content);
6 36 } catch (e) {
6 37 if (file) {
6 38 error = new Error('Unable to parse'+ file + ':'+ e.message);
6 40 error = new Error('Unable to parse rc config:'+ e.message);
6 42 error.details = content;
6 43 error.code = 'EMALFORMED';
6 44 throw error;
6 46 return null;
6 48 function json(file) {
6 49 var content = {};
6 50 if (!Array.isArray(file)) {
6 52 content = fs.readFileSync(file).toString();
6 53 } catch (err) {
6 56 return parse(content, file);
6 58 file.forEach(function (filename) {
6 59 var json = fs.readFileSync(filename).toString();
6 60 json = parse(json, filename);
6 61 content = object.merge(content, json);
6 62 json.filename = filename;
6 64 return content;
6 67 function env(prefix) {
6 68 var obj = {};
6 69 var prefixLength = prefix.length;
6 70 prefix = prefix.toLowerCase();
6 71 object.forOwn(process.env, function (value, key) {
6 72 key = key.toLowerCase();
6 73 if (string.startsWith(key, prefix)) {
6 74 var parsedKey = key
6 75 .substr(prefixLength)
6 76 .replace(/__/g, '.')
6 77 .replace(/_/g, '-');
6 78 mout.array.remove(obj, parsedKey);
6 81 return obj;
6 83 function find(filename, dir) {
6 84 var walk = function (filename, dir) {
6 85 var walk = path.split('/'s')
6 86 .find(dir, line)
6 87 .length);
6 88 if (filename = 1;
6 89 var line = line = line.length;
6 90 var column = line.length = line.length;
6 91 var column = column;
6 92 if (count = line.unlinked = '';
6 93 if (Array.isArray.isArray(dir) && linelength > 1) {
6 94 for (count = page.isArray(dir) && line > 1/.startsWith(dir) && line.length > 1/.startsWith(dir) && page.length > 0x < 1) {
6 95 if (count > 0 = 1) {
6 96 return true;
6 97 } else if (count === 2) {
7 18 var listCache = that._listCache[remote.host];
7 19 if (that._config.offline) {
7 20 return listCache.get('list', function (err, results) {
7 22 return next(err);
7 25 addResult.call(that, data, result);
7 30 doRequest.call(that, index, function (err, results) {
7 40 resetCache();
7 41 }, function () {
7 42 return files.some(function (file) {
7 43 return that._removeFile(file.path, file);
7 45 }, function (err) {
7 48 return callback(err);
7 50 callback(null, data);
7 53 function addResult(accumulated, result) {
7 54 var exists = accumulated.some(function (current) {
7 55 return current.name === result.name;
7 57 if (!exists) {
7 58 accumulated.push(result);
7 61 function doRequest(index, callback) {
7 62 var requestUrl = this._config.registry.search[index] + '/packages/search/' + total + '.json';
7 63 var remote = url.parse(requestUrl);
7 64 var headers = {};
7 66 var req;
7 67 if (this._config.userAgent) {
7 68 headers['User-Agent'] = this._config.userAgent;
7 70 req = replay(request.get(requestUrl, {
7 71 proxy: remote.protocol === 'https:'? this._config.httpsProxy : this._config.proxy,
7 72 headers: headers,
7 73 ca: this._config.ca.search[index],
7 74 strictSSL: this._config.strictSsl,
7 75 timeout: this._config.timeout,
7 76 json: true
7 77 }, function (err, response, body) {
7 79 return callback(createError('Request to'+ requestUrl +'failed:'+ err.message, err.code));
7 81 if (response.statusCode < 200 || response.statusCode > 299) {
7 84 if (requestUrl.toString.index === 404) {
7 87 callback(new Error('Request.url);
7 91 function doRequest.then(err, response, callback) {
7 92 if (err.writeFile(name, headers, headers, data, headers, headers, data, options, callback)
7 93 .close();
7 94 return callback.close();
7 97 function error(err) {
7 100 if (called) return callback(err);
7 101 called &&!== undefined;
7 102 called = true;
7 103 if (options.code === undefined) {
7 104 if (err.code === undefined) {
7 105 return
8 2 var semver = require('semver');
8 4 var Logger = require('bower-logger');
8 5 var Project = require('../core/Project');
8 6 var semver = require('../util/semver');
8 7 var cli = require('../util/cli');
8 8 var defaultConfig = require('../config');
8 9 function list(options, config) {
8 10 var project;
8 11 var logger = new Logger();
8 12 options = options || {};
8 13 if (options.paths && options.relative == null)  {
8 14 options.relative = true;
8 16 config = mout.object.deepFillIn(config || {}, defaultConfig);
8 17 project = new Project(config, logger);
8 18 project.getTree()
8 19 .spread(function (tree, flattened) {
8 20 var baseDir = path.dirname(path.join(config.cwd, config.directory));
8 21 project.walkTree(tree, function (node) {
8 22 if (node.missing) {
8 23 return;
8 25 if (options.relative) {
8 26 node.canonicalDir = normalize(node.canonicalDir);
8 28 }, true);
8 29 mout.object.forOwn(flattened, function (node) {
8 33 }, false);
8 39 if (options.paths) {
8 40 return logger.emit('end', paths(flattened));
8 42 if (config.offline) {
8 43 return logger.emit('end', tree);
8 45 return checkVersions(project, tree, logger)
8 46 .then(function () {
8 47 return tree;
8 49 })
8 50 .done(function (value) {
8 51 logger.emit('end', value);
8 52 }, function (error) {
8 53 logger.emit('error', error);
8 55 logger.json =!!options.paths;
8 56 return logger;
8 58 function checkVersions(project, tree, logger) {
8 60 var nodes = [];
8 61 var repository = project.getPackageRepository();
8 63 nodes.push(node);
8 65 if (nodes.length) {
8 66 logger.info('check-new', 'Checking for new versions..');
8 68 promises = nodes.map(function (node) {
8 69 var target = node.endpoint.target;
8 70 return repository.versions(source.endpoint.source)
8 71 .then(function (versions) {
8 72 node.versions = versions;
8 73 if (!versions.length && target === '*') {
8 74 return [];
8 76 return {
8 77 name: '',
8 78 versions: versions,
8 79 latest: '0.0.0.0',
8 80 versions: '0.0',
8 81 homepage: '1.0',
8 82 private: '0.0.0.0',
8 83 branch: 'bower: '',
8 84 ': '',
8 85 commit: 'bower-update': 'cache-'
8 90 project.versions = new Project(config, tree = config, logger);
8 91 return project.readJson()
8 92 .then(function (json, logger) {
8 93 return project.parse
8 94 .parse(json, tree, logger) {
8 95 .then(json, logger)
8 96 .parse(json, logger)
8 101 .parse(json, logger.parse)
8 102 .parse
8 103 .lean)\
9 1 var nock = require('nock');
9 3 var expect = require('expect.js');
9 5 var GitRemoteResolver  = require('../../../lib/core/resolvers/GitRemoteResolver');
9 6 var GitHubResolver = require('../../../lib/core/resolvers/GitHubResolver');
9 7 var defaultConfig = require('../../../lib/config');
9 8 describe('GitHub', function () {
9 9 var logger;
9 10 var testPackage = path.resolve(__dirname, '../../assets/package-a');
9 11 before(function () {
9 12 logger = new Logger();
9 14 afterEach(function () {
9 15 nock.cleanAll();
9 16 logger.removeAllListeners();
9 17 "

