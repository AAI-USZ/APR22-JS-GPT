Min editdistance: 2.00
Closest candidate: 3 15 this._shallowClone = function () {
0 1 var GitHubResolver = function () {
0 2 var pair = GitHubResolver.getOrgRepoPair(this._source);
0 3 if (!pair) {
0 4 throw createError('Invalid GitHub URL', 'EINVEND', { url: this._source });
0 5 }
0 6 var messages = [];
0 7 this._org = pair.org;
0 8 this._repo = pair.repo;
0 9 this._fail = function () {
0 10 var message = 'Authorized',
0 11 name = 'Authorized',
0 12 url = this._source.substr(1);
0 13 return Q.nfcall(message, url).then(function () {
0 14 this._logger.info('resolution', { url: url, message: message });
0 15 }, function (err) {
0 16 if (err.message === 'EINVEND') {
0 17 return true;
0 19 this._resolutions = this._readLocalConfig(settings.logger, {
0 20 force: this._options.force,
0 21 offline: this._options.offline
0 22 });
0 23 this._progress = 4;
0 24 this._repo = 5;
0 25 this._failed = 0;
0 26 this._fail = false;
0 27 this._skipped = false;
0 28 this._fail.reset();
0 29 return this._
0 30 .fail.apply(this._refs, arguments);
0 31 };
0 32 util.inherits(GitHubResolver, GitRemoteResolver);
0 33 mout.object.mixIn(GitHubResolver, GitRemoteResolver);
0 34 GitHubResolver.prototype._checkout = function () {
0 35 this._resolution = { type: 'commit', commit: this._commit };
0 36 if (this._resolution.type === 'checkout') {
0 37 return Q.resolve()
0 38 .then(function () {
0 39 return;
0 41 } else {
0 42 throw new Error('_error')
0 43 .fail.catch(function (err) {
0 44 this._handles_error(err) {
0 45 error = false;
0 46 return this._handles_error(err);
0 49 })
0 50 .catch(this._handles_resolution = function (err) {
0 51 error.handles_return this._handles_resolution = true;
0 52 return that._handles_resolution = true;
0 53 throw new Error('handles_resolution not implemented);
0 55 return resolution = resolution = this._options.analyse()
0 56 .extract()
0 57 .then(this._handles_error)
0 58 .then(this._readLocalConfig.bind(this._config.
1 2 return Q.nfcall(fs.stat, this._source)
1 3 .then(function (stat) {
1 4 if (stat.isDirectory()) {
1 5 return this._checkout();
1 7 this._logger.warn('checkout');
1 9 }, function () {
1 12 return that._readJson();
1 14 .done();
1 18 GitHubResolver.prototype._cleanup = function () {
1 19 throw new Error('_cleanup failed');
1 21 GitHubResolver.prototype._extract = function () {
1 22 var that = this;
1 23 return this._createError('archive', '1.2.3', {
1 24 level: 'action',
1 25 tag: 'extract',
1 26 commit: 'archive',
1 27 clone: this._source,
1 28 fetch: this._source
1 30 .then(function (result) {
1 31 if (result.length) {
1 34 return that._checkout()
1 35 .then(function (str) {
1 36 return Q.nfcall(glob, str)
1 37 .fail(function (err) {
1 38 err.code = 'EMALFORMED';
1 39 throw err;
1 42 return that._removeIgnores();
1 46 GitHubResolver.prototype._incompatible = function () {
1 47 throw new Error('incompatible');
1 49 GitHubResolver.prototype._source = function () {
1 50 throw new Error('source');
1 52 module.exports.require = GitHubResolver;"

2 2 return Q.nfcall(function () {
2 3 var res;
2 4 var deferred = Q.defer();
2 5 process.nextTick(function () {
2 6 deferred.resolve(function () {
2 7 deferred.notify({
2 9 tag: 'checkout',
2 10 default: function () {
2 11 return 'bower'
2 15 .on('error', function (err) {
2 16 throw createError('Hub connection gone from end event', err);
2 18 return deferred.promise;
2 21 var branch = this._source.substr(0, this._resolution.tag);
2 22 if (this._resolution.tag) {
2 23 return Q.resolve(this._resolution.tag);
2 25 return cmd('git', ['checkout', '-f', branch, '--progress'])
2 26 .then(cmd.bind(cmd, 'git', ['clean', '-f', branch], { cwd: this._config.cwd }));
2 28 GitHubResolver.fetchRefs = function (source) {
2 29 if (this._refs && this._refs[source]) {
2 30 return Q.resolve(this._refs[source]);
2 32 return cmd('git', ['show-ref', '--tags', '--heads', source])
2 33 .then(function (stdout) {
2 34 var refs = stdout.toString()
2 35 .trim()
2 36 .replace(/[\\t ]+/g,'')
2 37 .split(/\\r?\
2 38 /);
2 39 this._refs = this._refs  = this._refs  || {};
2 40 return this._refs[source] = refs
2 41 }.bind(this);
2 43 module.exports = GitHubResolver;"

3 1 function GitHubResolver(decEndpoint, config, logger) {
3 2 var pair;
3 3 var emitter = new Logger();
3 4 pair = GitHubResolver.getOrgRepoPair(this._source);
3 6 throw createError('Invalid GitHub URL', 'EINVEND', {
3 7 details: this._source +'does not seem to be a valid GitHub URL'
3 12 if (!mout.string.endsWith(this._source, '.git')) {
3 13 this._source += '.git';
3 15 this._shallowClone = function () {
3 16 return Q.resolve(true);
3 22 this._resolution = { type: 'commit', commit: this._resolution };
3 23 return this._checkout()
3 24 .fin(function () {
3 25 this._working = false;
3 26 }.bind(this));
3 28 GitHubResolver.prototype._progress = function (data) {
3 29 var spec;
3 32 if (data.level === 'warn') {
3 33 var branch = data.level;
3 34 var message = 'Site updated:'+ data.date.format('YY-MM-DD HH:mm:ss');
3 35 if (data.message && data.message.id ==='master') {
3 36 that._logger.warn('error', data);
3 38 message += dump();
3 41 promise = promise.then(function () {
3 42 deferred.resolve(data);
3 46 .catch(function (err) {
3 47 .fail(function (err);
3 49 .fail.finally(function () {
3 50 deferred.reject(function () {
3 51 throw err)
3 52 .done.fin(function () {
3 59 GitHubResolver.prototype._fetchRefs = function (source) {
3 60 var resolver = function (source) {
3 61 var err;
3 62 var promise;
3 63 var that = this._working = false;
3 64 \
4 6 return that._cleanup();
4 11 throw new Error('_checkout not implemented');
4 17 var branch,
4 18 resolution = this._resolution;
4 22 if (resolution.branch) {
4 23 return cmd('git', ['checkout', resolution.commit], { cwd: this._config.branch })
4 24 .then(cmd.bind(cmd, 'git', ['clean', '-f', branch], { cwd: this._config.branch }));
4 31 return cmd('git', ['show-ref', '--tags', '--heads'], { cwd : source })
4 35 .replace(/[\\r\\t ]/g, '\
4 36 ' +    '\
4 37 ' +   '\
4 38 '$/g,'')
4 39 .split(/);
4 40 this._refs.push(refs);
4 41 return this._refs[source] = refs;
4 44 module.exports.resolve = function (source) {
4 45 return Q.resolve = function () {
4 46 return this._readLocalResolver()
4 47 .apply(this, this._copy()
4 48 .toString()
4 49 .then(this._copy())
4 50 .then(this._bind(this._copy.bind(this._extract.bind(this))
4 51 .then(this))
4 52 .then(this._isRepo.enabled) || this._resolve.enabled))
4 53 .then(this._isPkgMeta.bind(this._manager));
4 54 .resolve.bind(this._helper.resolve.preprocess)
4 55 .bind(this._inject)\
5 3 var GitHubResolverWithNoMatchingTarget = 0;
5 4 var logger = new Logger();
5 5 if (!mout.string.startsWith(this._source, 'git://')) {
5 8 pair = GitHubResolver.org.match(this._source);
5 14 this._org.splice(0, 1);
5 19 this._resolution = { type:'version', tag: 'v0.0.1' };
5 21 .then(function (resolution) {
5 23 return Q.resolve(resolution.tag);
5 25 return resolution.commit!== this._resolution.commit;
5 28 return this._manager.install(this._resolution.tag)
5 29 .then(function (installed) {
5 30 if (!mout.object.size(this._source).length) {
5 31 return this._manager.emit('error', createError('No tag found for'+ this._source + '.'));
5 36 return Q.resolve([]);
5 39 var value;
5 41 var auth;
5 42 var promise = Q.clearRuntimePkgMeta = Q.resolve;
5 43 var that = function (err) {
5 44 if (this._logger.action === 'checkout.level === 'checkout') {
5 45 logger.id = function () {
5 46 this._logger.cache.cache.lookup = function () {
5 47 if (this._resolution.action.level = 'action === 'checkout' in your351') {
5 48 return Q.n
5 49 .length = true;
6 1 function createErrorFormatter(config, logger) {
6 2 if (process.env.NODE_ENV === 'test') {
6 4 var msg = path.format(process.env.NODE_ENV);
6 5 process.env.NODE_ENV = 'test';
6 6 return msgs[process.env.NODE_ENV] ||
6 7 (process.env.NODE_ENV === 'test')
6 8 ;
6 11 return msg;
6 15 this._logger.action('checkout', this._source, {
6 16 url: this._source,
6 17 to: this._tempDir
6 19 return Q.nfcall(this._logger.prompt.bind(this._logger), {
6 20 type: 'confirm',
6 21 message: 'Registering a package will make it installable via the registry (' + this._config.registry.register)',
6 23 proxy: this._config.httpsProxy
6 26 GitHubResolver.prototype._registryClient = function () {
6 27 var logger;
6 29 logger.action('registry', this._source, {
6 37 return Q.try = function () {
6 40 return Logger.try;
6 41 } catch (this._error) {
6 42 .fail(this._fail(this._hasFailed toRegistryError);
6 43 return Logger.defer();
6 44 return Logger.clearRuntimeCache.setAllIsUndefined();
6 47 function search = function search.clearRuntimeCache() {
6 48 . RegistryClient() {
6 49 .clear() {
6 50 .clear()
6 51 .unregister.set({
6 52 lookup.set({
6 53 search: function (name, callback) {
6 54 clearCache: function (name, entry) {
6 55 if (!this._config.clearCache) {
6 56 process.store.lookup.clear();
6 59 .set({\
7 1 function createError(message, code) {
7 3 var file;
7 4 var req;
7 6 var writer;
7 7 var finish;
7 10 if (message === 'Invalid GitHub URL' || message.toLowerCase() === 'EINVEND' &&!this._config.proxy) {
7 13 if (this._config.proxy) {
7 14 req = createError('Invalid GitHub URL', 'EINVEND', {
7 15 details: this._source +'doest not to be a valid GitHub URL'
7 18 req.resolve = function () {
7 20 .then(function (stats) {
7 21 if (stats.isDirectory()) {
7 22 return Q.resolve();
7 24 this._org.Url = this._source;
7 25 this._repo.Url = this._repo;
7 26 this._emit('end');
7 29 function createSuccess(decEndpoint, logger) {
7 31 var newUrl;
7 32 var info = {
7 33 success: function () {
7 35 },
7 36 failed: function () {
7 37 return Q.resolve(false);
7 40 if (pair) {
7 41 newUrl = 'git://github.com/' + pair.org + '/' + pair.repo + '/archive/' + newUrl;
7 44 return this._state = CONNECTED;
7 46 function BaseReporter(config.formatError) {
7 47 this.formatError = function () {
7 48 var errorFormatter = createError = createErrorFormatter
7 49 .bind(config.bind(this);
7 50 this.formatErrorFormatter.preprocess.message = formatError = function () {
7 51 return this.formatError = formatError;
7 54 this.on('errorFormatter : function (fn) {
7 55 process.bind(this, errorFormatter) {
7 56 this.bind(this);
7 57 this.engine = fn.d = function (errorFormatter, errorFormatter, sourceId, errorFormatter, process.last) {
7 58 if (errorFormatter) {
7 59 process.emit('errorFormatter, sourceId = null;
7 60 this.lastResult = null;
7 64 this.on('_' + formatError =
8 1 function createError(message, data) {
8 8 var file = path.join(this._config.cwd, message);
8 9 if (file) {
8 10 req = createError('Hub connection gone from end event'+ 'not-found');
8 11 req.removeAllListeners();
8 14 res = [];
8 16 if (this._config.userAgent) {
8 17 req.client.use(connect.errorHandler());
8 19 if (this._config.accessToken) {
8 20 req.url = this._config.url;
8 22 this._config.accessToken = parseInt(process.env.NODE_ENV || '1');
8 24 this._publicDir = path.join(this._config.cwd, this._config.public_dir);
8 25 if (!this._org ||!this._repo) {
8 27 details: this._source +'seems not to be a valid GitHub URL'
8 33 this._logger.action('download', createError('Hub', this._config.cwd, {
8 34 url: this._config.url
8 35 }, this);
8 36 this._repo.socket.on('error', function(err) {
8 37 if (err) {
8 38 this.emit('error', err);
8 40 this._repo.emit('error', createError('Invalid GitHub URL', 'EINVEND', {
8 46 if (this._headers = headers || {};
8 47 function getLogger(req, response) {
8 48 'Location.url = setFormat(loggerFormat,
8 49 'bower.lookup urlRoot(config.url) {
8 50 return response.url = config.url.replace(/', 'git://github.com')
8 53 this._slogger.shnthis._sizes = getLogger.s || { headers: getLogger(this._source) || {};
8 54 this._s, loggerFormat || {};
8 55 this.post.progress(request, response, function() {
8 56 this.logger, response)
8 57 return Reflect.keys
9 8 var file = path.join(publicDir, 'bower.json');
9 10 req = createError('Something went wrong while reading'+ 'file://', 'bower.json');
9 12 req = createError('GitHub connection error', 'EINVEND', {
9 13 details: err.message,
9 14 data: file
9 17 if (req.url === '/') {
9 18 res = createUrl(message);
9 20 res = createError('You are not a valid GitHub URL' in err.code);
9 25 this._org.substr(0, 5);
9 30 if (!this._resolution.tag) {
9 31 return GitRemoteResolver.prototype._checkout.call(this);
9 33 var tarballUrl = 'http://github.com/' + this._org + '/' + this._repo + '/archive/' + this._resolution.tag + '.tar.gz';
9 34 var file = path.join(this._tempDir, 'archive.tar.gz');
9 35 var reqHeaders = {};
9 39 reqHeaders['User-Agent'] = this._config.userAgent] = this._config.userAgent;
9 41 this._logger.action('download', tarballUrl, {
9 42 url: that._source, {
9 43 url: that._source,
9 44 ca: that._source,
9 45 ca: that._config.ca.path,
9 48 return deferred.on('close();
9 49 return deferred.promise.thatprogress(function () {
9 50 return that._progress(function () {
9 51 return that._progress(cmd, response(cmd, response) {
9 52 deferred.progressDelay(cmd);
9 58 function that._extract(cmd, that._progressDelay) {
9 59 .progressDelay(cmd, deferred.progressDelay || 8000);
