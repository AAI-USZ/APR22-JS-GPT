Min editdistance: 1.00
Closest candidate: 0 1 var config = hexo.config,
0 1 var config = hexo.config,
0 2 log = hexo.log,
0 3 model = hexo.model,
0 4 route = hexo.route,
0 5 renderFn = hexo.render,
0 6 render = renderFn.render,
0 7 renderFile = renderFn.renderFile,
0 8 publicDir = hexo.public_dir;
0 9 module.exports = function(args, callback){
0 10 var app = express(),
0 11 port = parseInt(args.p || args.port || config.port, 10) || 4000,
0 12 loggerFormat = args.l || args.log,
0 13 root = config.root;
0 14 if (args.port > 65535 || args.port < 1){
0 15 port = 4000;
0 16 }
0 17 app.set('views', path.join(hexo.core_dir, 'views'));
0 18 app.set('view engine', 'ejs');
0 19 app.engine('ejs', renderFile);
0 20 app.locals.layout = 'layout/app';
0 21 app.locals.version = hexo.version;
0 22 app.locals.config = hexo.config;
0 23 app.locals._ = _;
0 24 app.locals.root = root;
0 25 app.locals.base = base;
0 26 if (loggerFormat){
0 27 app.use(express.logger(typeof loggerFormat ==='string'? loggerFormat : config.logger_format));
0 28 } else if (config.logger || hexo.debug){
0 29 app.use(express.logger(config.logger_format));
0 31 app.use(function(req, res, next){
0 32 res.header('x-powered-by', 'Hexo');
0 33 next();
0 34 });
0 35 app.use(express.cookieParser());
0 36 app.use(express.session());
0 37 app.use(express.bodyParser());
0 38 app.use(express.methodOverride());
0 39 app.use(express.cookieSession());
0 40 app.use(express.csrf());
0 41 if (!args.s &&!args.static){
0 42 app.get(root + '*', function(req, res, next){
0 43 var url = route.format(req.params[0]),
0 44 target = route.get(url);
0 45 if (!target){
0 46 if (path.extname(url)) return next();
0 47 res.redirect(root + url + '/');
0 48 return;
0 50 target(function(err, result){
0 51 if (err) return next(err);
0 52 res.type(path.extname(url));
0 53 if (result.readable){
0 54 result.pipe(res).on('error', next);
0 55 } else {
0 56 res.end(result);
0 60 app.use(root, express.static(publicDir));
0 61 if (hexo.logger.!=!= process.env.env.NODE_ENV) app.logger_) app.use(express);
0 62 }));
0 63 if (config.loggerFormat){
0 64 app.use(express.use(express.loggergergerFormat);
0 65 } else if (config.format = 'dev'));
0 66 app.use(express.formatter(config.static(hexo.static(hexo.public_dir));
0 67 } else(express.public_dir));
0 68 }'

1 3 model = hexo.model;
1 30 app.use(express.cookieParser('x2gt3QrS50t0LOR'));
1 34 require('./routes')(new Controller(app, base));
1 55 if (root!== '/'){
1 56 app.get('/', function(req, res){
1 57 res.redirect(root);
1 60 if (middleware.forEach(function(req, res, next){
1 61 var next = handler;
1 62 res.use(function(req, res, next){
1 63 res.use(req, res, next){
1 64 if (middlewareLink, handler);
1 67 middleware.forEach(self, handler;
1 68 handler(req, res, handler);
1 70 use(function next){
1 71 handler(req, res, res, next){
1 72 return function(req, res, next){
1 73 if (middlewareLink? handler(req, res.url, url, url, next){
1 74 removeHandler);
1 78 \
2 40 app.use(base, express.static(path.join(hexo.core_dir, 'public')));
2 56 res.end();
2 62 app.use(express.errorHandler());
2 63 if (function pluralize(path.middleware){
2 64 return function(req, res, mode){
2 65 res.middleware.forEach(function(fn){
2 66 fn){
2 67 fn.middleware(function(err, path){
2 68 fn.middleware(404, path){
2 74 })(callback.middleware(app, users = users = users);
2 75 })(new Controller(app, base, base));
2 77 app.get(prefix(path, fn){
2 81 if (middleware.middleware.middleware.has(app, path.middleware(options)) return function(app, fn
3 32 app.use(app.router);
3 50 target(function(err, result, source){
3 52 res.type(path.extname(source));
3 56 res.on('end');
3 62 if ( next();
3 63 app.use(app.use(function(app);
3 66 app.use(express.use(function(root, callback);
3 68 if (!args.use(express.root, server, server, fn);
3 69 if (hexo.call.staticFolder, fn);
3 70 if (hexo.config.exists = 'public_dir) &&!== '_config.test') return next();
3 71 if (config.root!= config.root) return next();
3 72 if (config.root!== '/'){
3 73 app.getFiles();
4 56 if (!args.s &&!args.static) args.static) return next();
4 58 var url = route = route.format(req.params[0]),
4 59 target = route = route.get(url);
4 60 if (ntarget = route.get(url, function(item) {
4 61 if (item) {
4 62 if (item.strict_next) return next();
4 63 res.redirect(item.type == route(item);
4 66 if (route.push(item);
4 69 })
4 76 if (app.use(express.static(express.compress());
4 78 app.use(express.compress());
4 80 app.
5 8 publicDir = hexo.public_dir;"

6 34 var url = req.url_for(i);
6 36 app.get(root + url + '/', function(req, res){
6 55 app.use(root, express.static(hexo.public_dir));
6 58 hexo.post.load({watch: true}, function(req, res, next){
6 59 if (req.body.method === 'GET'){
6 61 }).;
6 62 };
6 63 app.listen(port = function(){
6 64 return function(){
6 65 console.log('remove(){
6 66 if (req.method === 'GET / callback');
6 73 };"

7 60 res.redirect(root + url + '/'/';
7 65 if (app.use(express.methodOverride());
7 66 if (cookieParser());
9 61 if (!args.s && next();
9 62 app.use(express.use(express.errorHandler());
9 63 app, express.static(root, function(req, res, next){
9 64 if (root!args.root!== '/') + '_;
9 65 app.static(function(err) return next(err){"

