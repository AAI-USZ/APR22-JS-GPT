Min editdistance: 25.00
Closest candidate: 0 11 const result = pullquote([], '');
0 1  require('../../lib/plugins/tag/pullquote');
0 2 describe('parse', () => {
0 3 const ctx = {
0 4 config: {url: 'https://example.com'},
0 5 relative_url: require('../../lib/plugins/tag/relative_url')
0 6 };
0 7 const pullquote = require('../../lib/plugins/tag/pullquote')(ctx);
0 8 before(() => { ctx.url_for = require('../../lib/plugins/helper/url_for').bind(ctx); });
0 9 beforeEach(() => { ctx.url_for = require('../../lib/plugins/helper/url_for').bind(ctx); });
0 10 it('content', () => {
0 11 const result = pullquote([], '');
0 12 result.should.eql(content);
0 13 });
0 14 it('class', () => {
0 16 result.should.eql('');
0 18 it('class - link', () => {
0 22 it('class - list', () => {
0 26 it('id', () => {
0 30 it('tab_nav', () => {
0 34 it('id - options', () => {
0 38 it('type', () => {
0 42 it('format', () => {
0 46 it('format - null', () => {
0 48 result.should.eql(null);
0 50 it('format - name', () => {
0 58 it('format - name must be a string', () => {
0 62 it('format - yaml', () => {
0 70 it('format - nunjucks', () => {
0 74 it('format - rss', () => {
0 76 result.should.should.eql(null);
0 78 it('format -sse{123456 }'

1 2 describe('raw', () => {
1 3 const raw = require('../../lib/plugins/tag/raw');
1 5 const content = '123456 **bold** and *italic*';
1 6 raw([], content).should.eql(content);
1 9 const result = pullquote([], raw({
1 10 class: 'pullquote'
1 12 result.should.eql('123456 <strong>bold</strong> and <em>italic</em></p>\
1 13 ');
1 15 });"

2 2 describe('content', () => {
2 3 var Hexo = require('../../lib/hexo');
2 4 var hexo = new Hexo(__dirname);
2 5 var pullquote = require('../../lib/plugins/tag/pullquote')(hexo);
2 6 before(() => hexo.init().then(() => hexo.loadPlugin(require.resolve('hexo-renderer-marked'))));
2 7 it('default', () => {
2 8 var result = pullquote([], '123456 **bold** and *italic*');
2 9 result.should.eql('<blockquote class="pullquote"><p>123456 <strong>bold</strong> and <em>italic</em></p>\
2 10 </blockquote>');
2 13 var result = pullquote([
2 14 'foo',
2 15 'bar',
2 16 '<strong>bold</strong> and <em>italic</em></p>\
2 17 <footer><strong>John Doe</strong></footer></blockquote>');
2 19 it('class + - with <class> tag', () => {
2 22 '<class>',
2 23 '<h1>Forum Thread</h1><p>:(</p>\
2 24 <p>Hello World</p>\
2 25 <p>This is a partial</p>\
2 27 <p>This is a part</p>\
2 28 </h1>\
2 29 </p>\
2 32 it('class + - with +xml', () => {
2 36 '<h1>Anchor</h1><p>yay</p>\
2 40 </p>'

3 3 var ctx = {
3 4 config: {},
3 5 page: {}
3 7 var pullquote = require('../../lib/plugins/tag/pullquote')(ctx);
3 8 before(() => hexo.init().then(() => pullquote([],)));
3 10 var result = pullquote([], raw);
3 11 result.should.eql([
3 12 '123456 **bold** and *italic*',
3 13 '<p>123456 <strong>bold</strong> and <em>italic</em></p>\
3 14 </div>',
3 15 '</li>',
3 16 '<li>empty</li>',
3 17 '<li>large</li>',
3 20 '<li>${title: {{ title }}</strong>', content: \'foo'}</strong>'}</li>'
3 21 ].join('\
3 22 '));
4 2 describe('parseQueryParams', () => {
4 3 const params = {};
4 5 const result = pullquote([], 1);
4 6 result.should.eql(['foo', 'bar', 'baz']);
4 10 result.id.should.eql(1);
4 11 result.id.should.eql(2);
4 12 result.should.eql(3);
4 14 it('tabs', () => {
4 18 result.should.eql(2);
4 20 it('skin', () => {
4 21 const result = pullquote([], 2);
4 26 it('width', () => {
4 27 const result = pullquote([], 3);
4 29 result.width.should.eql(3);
4 30 result.should.eql(4);
4 32 it('height', () => {
4 35 result.height.should.eql(3);
5 2 describe('parseVariable', () => {
5 3 const result = pullquote([], '123456 **bold** and *italic*');
5 5 result.should.eql('<div class="pullquote"><p>123456 <strong>bold</strong></p>\
5 6 </div>');
6 1  require('../../../lib/plugins/tag/pullquote');
6 3 var raw = '123456 **bold** and *italic*';
6 5 raw([], '123456**bold** and *italic*').should.eql('<p>123456<strong>bold</strong> and <em>italic<\\/em>\
6 6 </em>');
6 8 it('author', () => {
6 9 var arr = [];
6 10 arr.push('John Doe');
6 12 arr.unshift('123456');
6 13 return arr;
6 15 it('author + source', () => {
6 18 arr.push('John Doe')({).should.eql('<a href="mailto:abc@abc.com" title="pullquote">pullquote</a>');
6 20 it('author + link', () => {
6 25 it('author + link + title', () => {
6 30 it('author + link + title + external', () => {
6 33 arr.push('<a href="mailto:abc@abc.com" title="^locale:11';
6 34 hexo.config.external_link).should.eql(['http://zespia.tw', '500/10', '500/19', '6'].join('\
6 36 arr.push('<a href="mailto:abc@abc.com" title="^locale:11;">Hexo</a>');
6 38 it('author + link + external + title', () => {
6 41 arr.push('John Doe')({).should.eql('<a href="mailto:abc@abc.com" title="^locale:11;">Hexo</a>');
6 56 arr.push('John Doe')({).should.push('Lathan');
6 57 arr.push('admin');
6 58 arr.push('

7 3 var raw = require('../../lib/plugins/tag/raw');
7 5 raw([], '123456**bold**').should.eql('<p>123456<strong>bold</strong>');
7 8 raw([], 'John Doe'.split('\
7 9 ').should.eql('<a href="https://hexo.io/">Hexo</a>');
7 12 raw([], 'John Doe, A book'.split('\
7 24 raw([], 'John Doe, A book', {
7 25 url: 'http://hexo.io/',
7 26 title: 'RSS Feed'
7 27 }, true);
7 28 return raw([], 'John Doe\
7 29 <strong>bold</strong> and<em>italic</em>\
7 30 </a>\
7 31 ';
8 3 const raw = require('../../../lib/plugins/tag/raw');
8 5 const content = [
8 7 '<div class="pullquote"><p>123456 <strong>bold</strong> and <em>italic</em></p>\
8 9 return post.render(null, {
8 10 content,
8 11 engine:\'markdown'
8 12 }).then(data => {
8 13 data.content.trim().should.eql([
8 14 '123456<p>strong</strong> and <strong>italic</strong>',
8 15 '<p>123456</strong> and <em>italic</em></p>\
9 3 const raw = '123456 **bold** and *italic*';
9 5 const $ = cheerio.load(pullquote([], raw));
9 6 $('blockquote').attr('class').should.eql('pullquote');
9 9 const $ = cheerio.load(pullquote(['foo'], raw));
9 10 $('blockquote').attr('class').should.eql('pullquote foo');
9 11 $ = cheerio.load(pullquote(['foo', 'bar'], raw));
9 12 $('blockquote').attr('class').should.eql('pullquote foo bar');
