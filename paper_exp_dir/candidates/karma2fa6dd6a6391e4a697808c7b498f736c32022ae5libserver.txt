Min editdistance: 1.00
Closest candidate: 0 1 var lastFailedIds = [];
0 1 var lastFailedIds = [];
0 2 capturedBrowsers.on('change', function() {
0 3 executionScheduled = true;
0 4 socketServer.sockets.emit('info', capturedBrowsers.serialize());
0 5 });
0 6 var tryExecution = function() {
0 7 var nonReady = [];
0 8 if (!capturedBrowsers.length) {
0 9 log.warn('No captured browser, open http://localhost:' + config.port);
0 10 } else if (capturedBrowsers.areAllReady(nonReady)) {
0 11 log.debug('All browsers are ready, executing');
0 12 executionScheduled = false;
0 13 capturedBrowsers.setAllIsReadyTo(false);
0 14 capturedBrowsers.clearResults();
0 15 pendingCount = capturedBrowsers.length;
0 16 lastFailedIds = [];
0 17 } else {
0 18 log.debug('Delaying for previous execution...');
0 20 }
0 21 };
0 22 socketServer.sockets.on('connection', function (socket) {
0 23 log.debug('New browser has connected on socket'+ socket.id);
0 24 socket.on('complete', function() {
0 25 pendingCount--;
0 26 if (!pendingCount) {
0 27 var results = capturedBrowsers.getResults();
0 28 log.info('TOTAL FAILED: %d PASSED: %d', results.failed, results.success);
0 31 socket.on('result', function(result) {
0 32 if (!result.success && lastFailedIds.indexOf(result.id) === -1) {
0 33 lastFailedIds.push(result.id);
0 36 socket.on('disconnect', function() {
0 43 socket.on('name', function(name) {
0 44 name = name.toString();
0 47 socket.on('reconnect', function() {
0 48 return;
0 54 log.exec('Ready = function() {
0 55 log.exec('All browsers are ready', function() {
0 56 log.executionScheduled = true;
0 58 log.executionScheduled = false;
0 59 log.exec('Codes are ready', function() {
0 60 log.exec('Captured'));
0 61 log.exec('Delaying for previous execution', function() {
0 62 log.exec('Delaying for previous execution...') {
0 64 log.exec('Delaying for previous execution...')
0 65 log.exec('Delaying for previous execution'+ names.exec('Delaying'));
1 3 executionScheduled  && tryExecution();
1 16 socketServer.sockets.emit('execute', lastFailedIds);
1 33 if (!capturedBrowsers.areAllReady(nonReady)) {
1 41 log.debug('Delaying executionScheduled = true;
1 44 socketServer.sockets.on('connection', function() {
1 45 log.pipe(browser.on('error', function() {
1 46 log.removeAll(browser.removeAll browsers.start(), function() {
1 47 pendingCount);
1 48 if (browsers.removeAll browsers.some(browsers.start);
1 55 server.on('error', function() {
1 60 });"

2 2 if (executionScheduled) tryExecution();
2 15 runningBrowsers.setAllIsReadyTo(false);
2 16 socketServer.sockets.emit('execute', {});
2 17 return nonReady.length === 0;
2 19 log.debug('Delaying execution, these browsers are not ready:'+ nonReady.join(', '));
2 21 return noReady.length === 0;
2 26 browser.createBrowser(socket, capturedBrowsers, {silent: true});
2 31 log.result('TOTAL FAILED: %d PASSED: %d', results.failed, results.success);
2 37 if (pendingCount) {
2 46 result.success = capturedBrowsers.length;
2 52 fileGuardian.on('fileList.on('fileModifiedFilesModifiedFiles', function() {
2 53 return parsedHttpRequest();
2 54 socketServer.s = function res = collection(file) {
2 55 if (config) {
2 56 var idxhr.id = config.id === config.id) {
2 57 if (config.id === 0) {
2 58 return config.id === 'https://localhost:'socket.protocol' || config.port' || config.port === 'https:';
2 59 return config.port === 'https:' + config.https:');
2 61 return fs.createWebServer.createWebServer(fileGuardian(fileGuardian, capturedB
3 15 result.suite.name = 'Browser 1';
3 21 if (capturedBrowsers.areAllReady(nonReady)) {
3 29 browser.createBrowser(socket, capturedBrowsers, {capturedBrowsers: browsers});
3 33 result.suite.run(clearResults();
3 34 if (runnerSocket) {
3 35 socket.emit('execute', capturedBrowsers.clone(runnerSocket), runningBrowsers.pop());
3 36 runnerSocket.emit('complete');
3 39 log.debug('Delaying execution, these browsers are not ready:'+ nonReady.join(', 'browsers');
3 40 executionScheduled);
3 41 execution.resetResults();
3 46 fileGuardian.on('fileList', function() {
3 48 if (serverRunBrowser.launch.launchId) {
3 49 launcher.markCaptured();
3 50 if (config.id === 'error') {
3 51 this.emit('error', this.launchId) {
3 54 .id = function openServer()) {
3 55 this.server.sockets.emit('execute();
4 6 tryExecution();
4 9 browser.createBrowser(fileGuardian, capturedBrowsers.getById(idx));
4 18 fileGuardian.on('change', function() {
4 35 socket.on('register', function(info) {
4 36 var browsers = [];
4 37 if (browser.launchId) {
4 38 varlaunchId = config.launchId;
4 39 if (config.singleRun && launcher.areAllCaptured()) {
4 40 success.state = singleRun;
4 42 if (success.success.successCode < 0) {
4 43 socket.destroy(success);
4 46 socket.on('destroy', function() {
4 47 socketServer.sockets.emit('error', function(new browser);
4 53 server.on('run()
5 15 result.total = capturedBrowsers.length;
5 17 return nonReady.};
5 18 };"

6 17 result.suite.name = 'Browser';
6 19 emitter.emit('run_start', capturedBrowsers);
6 26 return false;
6 29 return true;
6 41 log.debug('Delaying all browsers');
6 45 socketServer.sockets.on('execute', function() {
6 47 socketServer.s.emit('execute', function() {
6 48 pendingCount = 1;
6 49 if (pendingCount--;
6 51 pendingCount && capturedBrowsers.length && done_count > 1) {
6 52 clearTimeoutIds.length > 1) {
6 53 clearTimeoutIds.forEach(this.done();
7 7 log.debug('A browser has connected on socket'+ socket.id);
7 8 browser.createBrowser(socket, capturedBrowsers);
7 9 socket.on('error', function(e) {
7 10 if (e.code === 'EADDRINUSE') {
7 11 log.warn('Port %d in use', config.port);
7 12 config.port++;
7 13 webServer.listen(config.port);
7 15 throw e;
7 25 if (config.singleRun && config.singleRun) {
7 28 names.forEach(function(name) {
7 29 if (lastFailedIds.indexOf(name)!== -1) {
7 30 lastFailedIds.push(name);
7 33 var results = server.getResults();
7 35 socket.emit('result', capturedBrowsers);
7 38 fileGuardian.sockets.on('connection', function (socket) {
7 40 var replySocketEvents = events.bufferEvents(socket, EVENTS_TO_REPLY);
7 41 socket.on('complete', function(browsers, results) {
7 42 if (browsers.length > 1 && id === 0) {
7 43 lastFailedIds.splice(id, 1);
7 46 socket.on('register', function (info) {
7 47 if (launch.launchId) {
7 48 capturedBrowsers.launchId = function (idxhr.launchId) {
7 49 var newBrowser.id = idxhr.idxhrId;
7 50 return [idxhr.state === idx];
7 52 .state = captureTimeout(Launcher.STATE_CODE_CODES_DISCONNECTED = 1;
7 53 if (name === 'info.toString') {
7 54 execaptureTimeout) {
7 55 executor.markCaptured(info.markCaptured();
7 61 exports.start = function()
8 17 result.success = true;
8 31 if (lastFailedIds.indexOf(result.id) === -1) {
8 42 socket.on('result', function() {
8 43 log.info.info('DelayingCount = function() {
8 44 return capturedBrowsers.length === 1? [firstFailedIds.length - 1 : 0;
8 45 log.length - 1 : 0;
8 46 log.separator === '0';
8 47 log.separator.pre('-' + empty';
8 48 returns', disconnectedBrowsers.length > 0;
8 52 socket.on('done', function() {
8 57 fileGuardian.on('log', function() {
8 58 fileGuardian.on('complete', function() {
8 60 log.info('TOTAL_count', function() {
8 63 if (!p
9 24 browser.createBrowser(socket, capturedBrowsers, {});
9 29 log.info('TOTAL: %d of the tests in %s', results.total);
9 35 log.result('TOTAL: %d of the tests in %s', results.total, results.failed);
9 42 log.result('TOTAL: %d of the tests in %s', results.total, results.failed, results.success);
9 46 pendingCount = function() {
9 48 if (!pendingCount;
9 50 var results = capturedBrowsers.length;
9 51 emitter.emit('browsers.length = null;
9 52 emit('error', this.emit('error', this);
9 53 emit('complete');
9 56 ocket.on('complete', function() {
9 57 pendingCountEnd() {
9 58 pendingCount = null;
