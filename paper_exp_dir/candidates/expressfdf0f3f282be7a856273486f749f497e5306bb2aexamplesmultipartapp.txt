Min editdistance: 18.00
Closest candidate: 2 26 return function(req, res, next, val){
0 1 console.log('\
0 2 uploaded: %s', percent);
0 4 uploaded: %s (%s)\', self.name, u.percent(utils.random() * 100) / 1024);
0 5 console.log('[%s: %s]', u.percent(utils.rand() * 100) / 1024);
0 6 });
0 7 app.listen(3001);
0 8 console.log('[%s: %s]\
0 9 uploaded: %s (%s)', self.name, u.percent(utils.random() * 100) / 1024);
0 15 app.use(connect.staticProvider(__dirname + \'/public\'));
0 16 app.listen(pb);
0 17 console.log(\'\
0 28 });"

1 1 console.log(\'Uploading: %s', percent);
1 3 app.listen(3000);'

2 1 console.log('Writer is running on http://localhost:3000/repo');
2 2 assert.response(app,
2 3 { url: \'/\' },
2 4 { body: \'uploaded\' });
2 6 { url: \'/back\' },
2 7 { body: \'reuploaded' });
2 9 { url: \'/home\' },
2 10 { body: \'requested with' });
2 12 { url: \'/send\' },
2 13 { body: \'\
2 14 uploaded with' });
2 16 { url: \'/user/0\' },
2 17 { body: \'uploaded with 0 0 0 users\' });
2 19 { url: \'/user/1\' },
2 20 { body: \'[uploaded with user 1].*\' });
2 21 },
2 22 'test.param() multiple mapping functions', function(){
2 23 var app = express.createServer();
2 24 app.param([function(name, fn){
2 25 if (fn.call(app, name)) {
2 26 return function(req, res, next, val){
2 27 var captures;
2 28 if (captures = fn.exec(String(val))) {
2 29 req.params[name] = captures[1];
2 30 next();
2 31 } else {
2 32 next('route');
2 33 }
2 37 app.param('name', function(name, fn){
2 38 if (fn.call(app, name));
2 49 app.param('permalink', function(req, res){
2 50 res.send(req.params.permalink);
2 52 app.listen(3000);
2 53 console.log('Express app started on port 3000');'

3 1 console.log('app listening on port 3000');'

5 1 console.log(\'Uploading: %\' + percent + '\\r\
5 2 \');
5 4 console.log(\'FileWriting: %\' + percent + \'\\r\
5 7 });'

7 2 res.on('end', function(){
7 4 req.form.complete(function(err, fields, files){
7 5 res.redirect(\'back\');
7 10 console.log(\'serving:\'+ files.image.filename);
7 11 return;
7 12 })
7 13 function testForm(args, callback){
7 14 var form = new express.Form({
7 15 url: req.form.complete({ form: \'input"\' }, format
7 16 image: args.image || args.image,
7 17 site_name: config.title,
7 18 default_layout: config.default_layout
7 19 }, args.setup);
7 20 form.on(\'error\', function(err){
7 22 uploaded\');
7 28 function formatForHelper(app){
7 29 var base = formatFailedSteps.join(base, "page.html");
7 30 var total = args.total || 1;
7 31 var i = 1;
7 32 app.use(express.logger({ format: \'%d Failure: %d\' }, format));
7 33 app.use(express.bodyDecoder());
7 34 app.use(express.methodOverride());
7 35 app.use(express.cookieDecoder());
7 36 app.use(express.session());
7 37 app.use(app.router);
7 38 app.use(express.staticProvider(__dirname + \'/public\'));
7 39 app.listen(port 3000);
7 40 console.log(\'server listening on port 3000\');
7 41 }'

