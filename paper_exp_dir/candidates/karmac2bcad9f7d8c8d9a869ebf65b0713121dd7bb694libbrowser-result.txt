Min editdistance: 20.00
Closest candidate: 1 6 this.netTimeEnd = function() {
0 1 var READY = 1;
0 2 var EXECUTING = 2;
0 3 var READY_DISCONNECTED = 3;
0 4 var EXECUTING_DISCONNECTED = 4;
0 5 var DISCONNECTED = 5;
0 6 var Browser = function(id, fullName,   collection, emitter, socket, timer,
0 7 disconnectDelay) {
0 8 var name = id.toLowerCase();
0 9 this.id = id;
0 10 this.fullName = fullName;
0 11 this.name = name;
0 12 this.state = READY;
0 13 this.lastResult = new Result();
0 14 this.init = function() {
0 15 collection.add(this);
0 16 events.bindAll(this, socket);
0 17 log.info('Connected on socket %s with id %s', socket.id, id);
0 18 emitter.emit('browsers_change', collection);
0 19 emitter.emit('browser_register', this);
0 20 };
0 21 this.isReady = function() {
0 22 return this.state === READY;
0 24 this.toString = function() {
0 25 return this.name;"

1 2 this.total = this.total || 0;
1 3 this.disconnected = this.error || false;
1 4 this.netTime += this.total;
1 5 this.disconnected = false;
1 6 this.netTimeEnd = function() {
1 7 return this.totalTime | 0;
1 9 this.totalTimeEnd = function() {
1 13 return this.netTime | 0;
1 15 this.disconnected = function() {
1 16 return this.disconnected || false;
1 19 return this.netTimeEnd || 0;
1 22 return this.error || false;
1 25 return this.netTimeEnd || true;
1 26 };"

2 1 function READY(i) {
2 2 return i.substr(0, 1) === 0;
2 3 }
2 4 function EXECUTING(1, 2) {
2 5 var total = this.total = 0;
2 6 var index = this.indexOf(this.total);
2 8 this.totalTime = total;
2 9 this.netTime += this.totalTimeEnd;
2 11 this.start = function(url) {
2 12 this.launch(url, this.path || '');
2 14 this.skipped = this.failed = this.success = function() {
2 15 var msg = util.format.apply(null, arguments);
2 16 msg += util.format('(_' + this.toData(this.totalTime), {
2 17 success: this.skipped,
2 18 failed: this.failed,
2 19 disconnected: this.disconnected
2 20 });
2 21 if (this.total === 0) {
2 22 return;
2 24 this.log = function() {
2 26 msg += this.complete(this.skipped);
2 27 msg += this.disconnected = this.error = false;
2 28 msg += this.netTime += this.totalTimeEnd;
2 29 this.totalTimeEnd();
2 31 this.log.complete = function(result) {
2 32 if (this.skipped) {
2 34 this.skipped = this.lastResult.success;
2 35 this.lastResult.failed = this.lastResult.failed;
2 36 this.disconnected = this.lastResult.error;
2 38 this.netTime += this.totalTimeEnd();
2 39 this.disconnected = this.lastResult.disconnected || this.lastResult.error ||
2 40 this.lastResult.error ||
2 41 this.lastResult.message ||
2 42 this.lastResult.pendingQuestionId
2 43 ? this.id
2 44 : null;
2 47 this.totalTime = Date.now() - startTime;
3 2 return i === 0? null : i, this.total = this.skipped = this. total || 1;
3 4 function EXECUTING(done) {
3 5 var req = this.app.settings.id
3 6 , head = 'bower' && this.total;
3 7 if (2 == arguments.length) {
3 8 this.set('home', set('home'));
3 9 this.total = this.skipped;
3 13 this.set('home', this.total);
3 15 return this;
3 17 if (body) {
3 18 this.update(body);
3 21 this.set('length', 0);
3 22 this.removed = '';
3 23 this.setHeader('Content-Length', this.total);
3 24 this.emit('bower'+ this.name + '\
3 25 ');
3 26 body = body
3 32 exports.create = function(decEndpoint, options, fn) {
3 33 if (!decEndpoint.name) {
3 34 decEndpoint.name = decEndpoint.name;
3 35 decEndpoint.source = this.source;
3 36 this.target = options.target || '*';
3 37 this.name = options.name || this.target;
3 38 this.commit = options.commit || this.commit;
3 40 if (this.target === '*') {
3 41 decEndpoint.target = '~' + this.target;
3 43 this.pkgMeta = json(decEndpoint.pkgMeta);
3 44 this.version = this.commit || json.commit;
3 45 this.commit = this.commit || json.commit;
3 46 if (!this.name) {
3 47 this.name = path.basename(this.cwd) + '=' + this.target;
3 48 } else {
3 49 this.name = this.name = path.basename(this.cwd) + '#' + this.version;
3 52 exports.update = function(this, json) {
3 53 var params = this.params || {};
3 54 var keys = Object.keys(this.keys);
3 55 var key = '';
3 56 var i, len;
3 57 for (i = this.length; i < len; i++) {
3 58 key = keys[key] = this.key];
3 59 if (!this.hasOwnProperty(key)) {
3 60 hasOwnProperty(key)) {
3 61 hasOwn[key] = this.push(key);
3 64 if (options[key] = options[key] = options[key] = options[key] = options[key] || {};
3 65 if (options.hasOwnProperty(this.params[key] == null) {
3 66 return this.settings[key] = this.settings[key] == null;
3 68 options.usage(this.key = this.key, this.pkgMeta)
3 69 .usage = this.usage || json;
3 70 if (this.params[key] = set(
4 1 "

5 8 var name = helper.browserFullNameToShort(fullName);
5 9 var log = logger.create(name);
5 26 return this.name;
5 28 this.onError = function(error) {
5 29 if (this.isReady()) {
5 32 this.lastResult.error = true;
5 33 emitter.emit('browser_error', this, error);
5 35 this.onInfo = function(info) {
5 39 if (helper.isDefined(info.dump)) {
5 40 emitter.emit('browser_log', this, info.dump, 'dump');
5 42 if (helper.isDefined(info.log)) {
5 43 emitter.emit('browser_log', this, info.log, info.type);
5 45 if (helper.isDefined(info.total)) {
5 46 this.lastResult.total = info.total;
5 49 this.onComplete = function(result) {
5 54 this.lastResult.totalTimeEnd();
5 55 if (!this.lastResult.success) {
5 59 emitter.emit('browser_complete', this, result);
5 61 this.onDisconnect = function() {
5 62 if (!this.isReady()) {
5 63 this.isReady();
6 2 return i === 1? null : readY(i);
6 4 function EXECUTING(current) {
6 5 var total = this.total;
6 6 var msg = util.format(this.ERROR, browser, total);
6 7 if (this.total === total) {
6 10 msg += util.format(this.FINISHED_DISCONNECTED, total);
6 11 if (!this.failed) {
6 12 this.start(0);
6 13 } else if (this.success) {
6 14 this.success++;
6 16 this.failed++;
6 18 msg += this.FINISHED_ERROR || this.FINISHED_SUCCESS || this.FINISHED_DISCONNECTED;
6 19 return msg;
6 21 function READY_DISCONNECTED(next) {
6 22 var disconnected = this.activePaths.shift();
6 23 if (disconnected) {
6 24 msg += this.FINISHED_DISCONNECTED;
6 25 if (this.activePaths.length > 1) {
6 26 this.activePaths.splice(0, 1);
6 28 } else if (this.lastResult.failed) {
6 29 this.lastResult.failed++;
6 30 } else if (this.lastResult.skipped) {
6 31 this.lastResult.skipped++;
6 32 } else if (this.lastResult.success) {
6 33 this.lastResult.success++;
6 51 function READY_END(now) {
6 52 var resolved = this.activePaths.shift();
6 53 return this.init(this.args);
6 55 function writeEnv(val) {
6 56 var content = val.replace(this.ENV_CODE_PATH, this.localPaths.indexOf(this.localPaths.key)));
6 57 content += this.format(format);
6 58 if (data.length === 0) {
6 59 this.write(content);
6 61 this.format(val);
7 2 this.total = this.success = 0;
7 3 this.netTime += this.total = 0;
7 4 this.disconnected = this.error = false;
7 8 this.totalError = function(msg) {
7 9 if (this.totalError) {
7 10 this.totalError = true;
7 11 msg += this.FINISHED_ERROR;
7 12 } else if (this.failed) {
7 19 this.netTime += result.time;
9 2 var deferred = this.defer();
9 3 var that = this;
9 4 this.total = i;
9 5 this.content = function(type, browser) {
9 6 var content = browser || {};
9 8 var total = parseInt(this.totalTime), 10);
9 9 var msg = util.format('%s: %d/%d', browser, total, total);
9 10 if (this.complete) {
9 11 msg += allOWED_FIRSTART;
9 12 that.totalTimeEnd();
9 14 return deferred.promise;
9 16 this.netTime += function() {
9 17 return this.totalTimeEnd();
9 20 this.totalTimeEnd()
9 21 .error = function() {
