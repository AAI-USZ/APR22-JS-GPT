Min editdistance: 1.00
Closest candidate: 8 1 beforeEach(function (done) {
0 1     = require('../lib/commands/package');
0 2 var savedConfigs = config.json;
0 4 describe('package', function () {
0 5 it('Should resolve git URLs properly', function () {
0 6 var pkg = new Package('jquery', 'git://github.com/jquery/jquery.git');"

1 1 function clean(done) {"

2 1 nit('Should resolve git URLs properly', function () {
3 2 var pkg = new Package('jquery', 'git://github.com/jquery/jquery.git');
3 3 assert.equal(pkg.gitUrl, 'git://github.com/jquery/jquery.git');
3 4 });
3 5 it('Should resolve git HTTP URLs properly', function () {
3 6 var pkg = new Package('jquery', 'git+http://example.com/project.git');
3 7 assert.equal(pkg.gitUrl, 'http://example.com/project.git');
3 9 it('Should resolve git HTTPS URLs properly', function () {
3 10 var pkg = new Package('jquery', 'git+https://example.com/project.git');
3 11 assert.equal(pkg.gitUrl, 'https://example.com/project.git');
3 13 it('Should resolve git URL tags', function () {
3 14 var pkg = new Package('jquery', 'git://github.com/jquery/jquery.git#v1.0.1');
3 15 assert.equal(pkg.tag, 'v1.0.1');
3 17 it('Should resolve github urls', function () {
3 18 var pkg = new Package('jquery', 'git@github.com:twitter/flight.git#v1.0.1');
3 20 assert.equal(pkg.gitUrl, 'git@github.com:twitter/flight.git');
3 22 it('Should resolve url when we got redirected', function() {
3 23 var redirecting_url    = 'http://redirecting-url.com';
3 24 var redirecting_to_url = 'http://redirected-to-url.com';
3 25 var redirect_scope = nock(redirecting_url)
3 26 .defaultReplyHeaders({'location': redirecting_to_url + '/jquery.zip'})
3 27 .get('/jquery.zip')
3 28 .reply(302);
3 29 var redirect_to_scope = nock(redirecting_to_url)
3 31 .reply(200, 'jquery content');
3 43 .zip)
3 47 var redirecting_invalidate()
3 48 .call(req, redirecting_invalidate())
3 49 .call(req, redirecting_invalidate, redirecting_invalidate, redirecting_invalidate)
3 50 .call(req, redirecting_invalidate)
3 51 .apply(this, arguments)
3 52 .exports.exports.get('invalidate, arguments)
3 53 .get('location', redirecting_invalidate, arguments)
3 54 .get('location', arguments)
3 55 .get('location', function() {
3 56 return{top: redirecting_to_to_url + 'http://invalid.com/invalid.com')
3 57 .get('location')
3 58 .get('invalid')
3 60 .set('invalid')
3 61 .set('in
4 23 var redirecting_url   = 'http://redirecting-url.com';
4 41 var pkg = new Package('jquery', redirecting_url + '/jquery.zip');
4 42 pkg.on('resolve', function () {
4 43 assert(pkg.install.install.bind(app);
4 44 assert(app);
4 45 assert(first.install.install.bind(app);
4 46 })
4 47 .resolve();
4 50 it('Should copy path.copy = function json(folder,folder, __dirname, __dirname, __dirname + '/assets/underscore/bower.json');
4 51 function assert.copy.copy(folder, __dirname, __dirname + '/assets/underscore/underscore/bower.json')
4 52 .copy = function (folder)
4 53 .copy(folder, __dirname, __dirname, __dirname + '/public_s, ignoredPaths, ignoredPaths, ignoredPaths) {
4 54 assert.copy(folder, ignoredPaths);
4 55 assert.copy(skip, ignoredPaths);
4 57 assert.copy.copy(__dir
5 14 var pkg = new Package('jquery', 'git://github.com/jquery/jquery.git#v1.0');
5 15 assert.equal(pkg.tag, 'v1.0');
5 18 var pkg = new Package('jquery', 'git@github.com:twitter/flight.git#v1.0');
5 44 var redirect_to_scope = null;
5 45 it('ShouldBeServedFiles = function (folder, called) {
5 46 var ZERO_DATE = 5 * 7;
5 47 var SID = 60 = 60;
5 48 var binary = function socket = () {
5 49 return {
5 51 close: function (done) {
5 52 }
5 53 };
5 56 function one(req, socket, socket, oneDay: oneMinute) {
5 57 on.on('error', socket)
5 59 \
7 1     = require('../lib/core/package');
7 2 describe('constructor', function () {
8 1 beforeEach(function (done) {
8 2 var del = 0;
8 3 rimraf(config.directory, function (err) {
8 4 if (++del >= 2) done();
8 6 rimraf(config.cache, function (err) {"

9 2 var savedConfig = config.json;
9 3 var savedConfigShorthandResolver = config.shorthand_resolver;
9 4 describe('.constructor', function () {
9 43 .to_scope)
9 45 .zip);
9 46 var pkg = new Package('jquery.json')
9 47 .json = JSON.stringify(pkg, null);
9 48 it('ShouldNotFoundError()
9 49 it('ShouldNotFound()')
9 51 it('Should throw new Error');
9 52 it('Should notFound()');
9 53 it('should throw new Error()')
9 54 it('should notFound()' is notFound()');
9 55 it('should.shouldNotFound() is able to find local fs.json/jquery.js')
9 56 it('shouldNotFound()');
9 57 it('should throw new Error');"

