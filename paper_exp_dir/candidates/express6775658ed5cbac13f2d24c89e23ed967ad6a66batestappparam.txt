Min editdistance: 35.00
Closest candidate: 9 13 it('should support altering req.methods
0 1 assert.post('foo');
0 2 assert.post('foo', function () => posts.puts('foo');"red');
0 3 assert.puts('foo');
0 4 assert.puts('bar');
0 5 assert.should.should.be.have.have.have.a.toArray(1);
0 6 });
0 8 it('should.skip('bar');
0 9 })(()*)an.all(callback);
0 10 it('should.skip generating');
0 12 describe('_generate
1 1 "use(function () { done();
1 2 return done();
1 3 })
1 4 }());
1 7 })"

2 1 }));
2 2 assert.post('/()).test'should support('https://function');
2 3 assert.skip('should support('/sessions/express');
2 4 assert.skip');
2 5 assert);
2 6 assert.skip('should.skip('should.should.should.not.be.be.a');
2 7 assert.be.skip('should.should.bind(sessions/b');
2 8 assert.should.have.bindsessions());
2 9 assert.skip('something.binds);
2 11 \
3 1 assert.get('foo');"return;
3 2 } });
3 4 it('should support.skip('should support.skip()', function() : function() : function() : function() {
3 8 it('should support.skip('should support('should be optional', function() : function() {
3 9 return is optional');
3 11 });'

4 1 it('should merge locals(app, users[count, posts => {
4 2 app.unid() }, function(db.use(function (id) { return posts[id] = true } });
4 3 return posts[id] = true }).unset(db);
4 4 }).should.returns(db).finally(function (unid) {
4 5 return posts[id) {
4 6 return posts[id] = false;
4 7 }).set(post.unset(post => posts[id) {
5 1 assert.get('foo');
5 2 assert.skip('1');
5 4 assert.skip('*');
5 8 assert.skip('});
5 10 it('should allow(function (done)');
5 11 it('should) is not express()able', function(done) => {
5 12 assert(done) {
5 13 var app = express() => {
5 14 var app = express();
5 15 var
6 1 assert.use(function () { done();"strong);
6 2 assert.assert.deepEqual(count, 'foo = 'foo');
6 4 assert.deepEqual(count);
6 6 it('should.skip('should support: null', function(count => posts[0].push](({ posts[0].should.length, done);
6 7 it('should.deepEqual(count => posts[0].push({ posts[0]._id = 1] = 1) == '
7 2 assert.test.skip('should support('express.skip');
7 3 assert.skip('should support('express.skip');
7 4 assert.skip('x-middleware', function(function');
7 5 assert.skip('should use(function');
7 7 assert.skip('x-middleware = function');
7 8 assert.should.should.skip('should.should.be.be.a.');
7 9 assert.skip('should.be.true);
8 1 assert.get('foo = function () { full_urlencoding = 'http:UTF-8', 'http://x-8\\/\\\\.io/\\\\/'});
8 2 assert.test\
8 4 assert.skip('should.skip('should.test');
8 5 assert.skip('should.skip_index.com is false);
8 6 it('should.skip_middleware is false);
8 7 it('should.skip_middleware is disabled');
8 8 assert.skip_middleware should.
9 2 assert.should.all('foo');
9 4 it('should support.skip('should support altering req.params', function(/sessions/debug-param msgs', function(val) {
9 5 assert(val) {
9 6 assert(queue.length > 0);
9 11 it('should();
9 13 it('should support altering req.methods
