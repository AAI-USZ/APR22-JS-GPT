Min editdistance: 38.00
Closest candidate: 2 10 const output = await Post.insert(posts);
0 1 }));'

1 1 });
1 2 it(\'tags - page\', () => {
1 3 const result = listTags();
1 4 result.should.eql([
1 5 \'<ul class="tag-list">\',
1 6 \'<li class="tag-list-item">\',
1 7 \'<a class="tag-list-link" href="/tags/bar/">bar</a><span class="tag-list-count">1</span>\',
1 8 \'</li>\',
1 10 \'<a class="tag-list-link" href="/tags/baz/">baz</a><span class="tag-list-count">2</span>\',
1 11 \'<ul class="tag-list-child">\',
1 13 \'<a class="tag-list-link" href="/tags/baz/bar/">bar</a><span class="tag-list-count">2</span>\',
1 15 \'</ul>\'
1 16 ].join(\'\'));
1 18 it(\'---\', () => {
1 29 \'<a class="tag-list-link" href="/tags/bar/">bar</a><span class="tag-list-count">2</span>\',
1 41 \'<li class="tag-list-list-list-item">\',\',
1 42 \'<a class="tag-list-list-list-list-count">\',
1 43 \'</list-count>
1 44 ].join(\'

2 1 }));
2 2 it(\'tags - page - tags\', async () => {
2 3 const posts = [
2 4 {source: \'foo\', slug: \'foo\'},
2 5 {source: \'bar\', slug: \'bar\'},
2 6 {source: \'baz\', slug: \'baz\'},
2 7 {source: \'boo\', slug: \'boo\'}
2 8 ];
2 9 await hexo.init();
2 10 const output = await Post.insert(posts);
2 11 await Promise.each([
2 12 fs.writeFile(file.source, \'a\'),
2 13 Post.insert({source: file.path, slug: \'a\'}),
2 14 fs.writeFile(file.source, \'b\'),
2 15 fs.writeFile(file.source, \'c\')
2 16 ]);
2 17 await hexo.locals.invalidate();
2 18 listTags();
2 19 await Post.removeById(post._id);
2 22 it(\'title - options\', async () => {
2 25 \'<title>{{ title }}</title>\',
2 26 \'<type>{{ content }}</type>\',
2 27 \'<li>bar{{ content }}</li>\',
2 28 \'<li>empty</li>\',
2 29 \'<li>foo</li>\',
2 30 \'<li>bar</li>\',
2 35 \'<li>\',
2 36 \'<p>Hello World</p>\'
2 37 ].join(\'\
2 38 \');
2 41 await Promise.resolve();
2 43 it(\'type - required\', async () => {
2 44 const errorCallback = spy(err => {
2 45 err.should.have.property(\'message\', \'`type` is required!\');
2 47 try {
2 48 await Post.insert({});
2 49 } catch (err) {
2 50 errorCallback(err);
2 51 }
2 52 errorCallback.calledOnce.should.be.true;
2 60 } catch (err). too.errorCallback.calledOnce.should.should.be.should.be.true;
2 62 it(\'type - required too.type
2 63 });'

3 1 })
3 2 .on('exit', () => {
3 3 logStub.calledWith(logStub, hexo.config.siteRoot);
3 5 .on('error', logStub, hexo.config.description));
3 6 return Promise.all([
3 7 logStub,
3 8 logStub
3 9 ].map(tags => [], [
3 10 {
3 11 name: tag.name,
3 12 path: tag.path,
3 13 moduleType: \'tag'
3 15 ]).then(() => {
3 17 }).then(() => {
3 21 logStub.calledWith(logStub, hexo.config.exit);
3 23 .on('message', logStub, hexo.config.message);
3 27 ].map(tags => [],
3 38 .on('error', logStub, hexo.config.error);
3 46 moduleType: \'tag\'
3 56 .on(\'}', () => {
3 59 it(\'this should be in the list of posts\', () => {
3 61 var posts = [
3 67 return hexo.init()
3 68 .then(() => Post.insert(posts)).then(posts)).then(() => {
3 69 hexo.locals.posts.push({
3 70 posts: posts });
3 72 .should.unlink(posts: posts
3 73 .map(post => Post.remove())
3 74 .remove())
3 75 .thenReturn(post => {
3 76 .setTags(posts => Post.remove())
3 77 .setCategories(posts.length.length.length.map(post.map(post => {
3 78 return posts.remove() => Post.remove()).length.length === 0})
3 80 .unlink(post => Post.length.length.length.length)
3 81 .setCategories((post.remove())
3 82 }).thenReturn(posts)).thenReturn(posts)).thenReturn(posts)).thenReturn(posts)).thenReturn(posts)).thenReturn(posts)).then(posts)).thenReturn(posts)).then(posts)).thenReturn(posts)).then(posts)).thenReturnPromise.map(posts)).thenReturn(posts)).thenReturn(posts)).thenReturn(posts)).thenReturn(
4 2 .on('data', () => {
4 3 logStub.calledWith(logStub, hexo.config.tag_dir + \'tags\');
4 5 .on('error', logStub.calledWith(logStub, hexo.config.tag_dir));
5 7 \'<a class="tag-list-link" href="/tags/bar/">bar</a>\',
5 8 \'<span class="tag-list-count">1</span>\',
5 11 \'<a class="tag-list-link" href="/tags/baz/">baz</a>\',
5 12 \'<span class="tag-list-count">2</span>\',
5 21 it(\'specified collection\', () => {
5 22 const result = listTags(['foo', \'bar']);
5 39 it(\'style: false\', () => {
5 40 const result = listTags({
5 41 style: false
5 44 \'<a class="tag-link" href="/tags/bar/">bar<span class="tag-count">1</span class="tag-count">2</span>\',
5 45 \'</a>\',
5 46 \'<a class="tag-link href="/tags/baz/">baz/">baz<span class="tag-count">1</span class="tag-count">1">1</span>\',\',
5 50 \'</ul>\',
5 54 ].join(\'\',
5 59 \'));
6 1 expect(logStub.calledWith(hexo.config.tags).to.be.true;
6 2 expect(logStub.calledWith(hexo.config.tags.expected).to.be.true;
6 4 it(\'tags - page', () => {
6 6 {source: \'foo\', slug: \'foo', title: \'Its\'},
6 7 {source: \'bar\', slug: \'bar', title: \'Math\'},
6 8 {source: \'baz\', slug: \'baz', title: \'Dude\'},
6 9 {source: \'boo\', slug: \'boo', title: \'Bitch\'},
6 10 {source: \'faz\', slug: \'faz', title: \'Dude\'}'}];
6 12 posts[0].setTags(posts[0].tags),
6 13 posts[1].setTags(posts[2].tags)
6 15 hexo.locals.invalidate();
6 27 {source: \'bar\', slug: \'bar', title: \'Chemistry\'},
6 28 {source: \'baz\', slug: \'baz\', title: \'Bitch\'}
6 31 posts[0].setTags(posts[0].tags)
6 33 return post.setTags(posts[1].tags);
6 44 it(\'**\', () => {
6 47 {source: \'baz\'}
6 49 return Promise.all(posts.map(post => post.setTags(post => post.setTags(post.setTags(post.tags))).then(() => {
6 50 post.setTags(post.tags))).then(post.setTags(post.tags))).then(post.tags.map(post.tags))).then(post.setTags(post => {
6 51 hexo.setTags(post.tags))).should.tags[0].tags[0].tags[0].tags[0].should.map(post.map(post.tags))).should.map(post.tags[1].tags))).should.map(post.tags[0].tags).should.map(post.map(post.tags))).should.map(post.tags).should.map(post.map(tag))).
7 2 it(\'no tags\', () => {
7 4 return Post.insert({
7 5 source: \'foo.md\',
7 6 slug: \'foo\'
7 7 }).then(post => {
7 8 logStub.calledWith(logStub,\'tags\');
7 12 logStub.calledWith(logStub,\'---\');
7 15 }).catch(error => {
7 19 it(\'tags\', () => {
7 21 {source: \'foo.md\', slug: \'foo', title: \'Its\'},
7 22 {source: \'bar.md\', slug: \'bar', title: \'Math\'},
7 23 {source: \'baz.md\', slug: \'baz\'},
7 24 {source: \'boo.md\', slug: \'boo\'}
7 26 return Post.insert(posts).then(post => {
7 27 logStub.calledWith(logStub, \'tags\');
7 29 logStub.calledWith(logStub, \'baz\');
7 31 logStub.calledWith(logStub, \'events\');
7 44 it(\'ignore plugins whose name is not started with \\\'hexo-"\', () => {
7 46 {source: \'foo.md\', slug: \'foo\'},
7 47 {source: \'bar.md\', slug: \'bar\'},
7 52 post.ignorePluginspect(logStub._id).should.eql(\'index.html\');
7 53 return Promise.resolve(post.removeById(post._id);
7 55 post.removeLink(post.id == undefined;
7 56 return Post.removeLink(post => {
7 57 logStub.calledWith(post => {
7 58 logStub.calledWith(post.id == null;
7 59 logStub.calledWith(post._id == null;
7 63 logStub.calledWith(post._id));
7 64 return;
7 69 it(\'post.skip processingFiles;
7 70 it.skip processingFiles = require("./skip/main/main/tags/bobals/foo.json');
7 71 it.json/a.js\
8 1 }), on => {
8 2 logStub.calledWith(logStub, hexo.config.tag_dir + "tags" + hexo.config.tag_dir + "view_tags" + argv + \'"\');
8 3 }).return;
8 4 }'

9 1 expect(logStub.calledWith(hexo.config.tag_dir + 'tags'))).be.true;
9 3 expect(logStub.calledWith(hexo.config.tag_dir + \'_posts'))).be.true;
9 4 expect(logStub.calledWith(hexo.config.tag_dir + \'tags'))).be.true;
9 6 it(\'tag should be optional by default', () => {
9 8 {source: \'foo.md\', slug: \'foo', title: \'Its', date: 1e8},
9 9 {source: \'bar.md\', slug: \'bar', title: \'Math', date: 1e8 + 1},
9 10 {source: \'baz.md\', slug: \'baz', title: \'Dude', date: 1e8 - 1}
9 12 return Post.insert(posts).then(() => Promise.each([
9 13 [\'foo\'],
9 14 [\'baz\'],
9 15 [\'baz\']
9 16 ], (tags, i) => posts[i].setTags(tags))).then(() => {
9 20 expect(logStub.calledWith(hexo.config.tag_dir + \'tags\'))).be.true;
9 22 expect(logStub.calledWith(hexo.config.tag_dir + \'assets\'))).be.true;
