Min editdistance: 1.00
Closest candidate: 0 1 extend = require('./extend'),
0 1 extend = require('./extend'),
0 2 render = require('./render'),
0 3 util = require('./util'),
0 4 call = require('./call'),
0 5 i18n = require('./i18n'),
0 6 route = require('./route'),
0 7 Log = require('./log');
0 8 var defaults = {
0 9 title: 'Hexo',
0 10 subtitle: '',
0 11 description: '',
0 12 author: 'John Doe',
0 13 email: '',
0 14 language: '',
0 15 url: 'http://yoursite.com',
0 16 root: '/',
0 17 permalink: ':year/:month/:day/:title/',
0 18 tag_dir: 'tags',
0 19 archive_dir: 'archives',
0 20 category_dir: 'categories',
0 21 code_dir: 'downloads/code',
0 22 new_post_name: ':title.md',
0 23 default_layout: 'post',
0 24 auto_spacing: false,
0 25 titlecase: false,
0 26 external_link: {
0 27 enable: true,
0 28 field:'site',
0 29 exclude: ''
0 30 },
0 31 filename_case: 0,
0 32 render_drafts: false,
0 33 post_asset_folder: false,
0 34 relative_link: false,
0 35 future: true,
0 36 highlight: {
0 37 enable: false,
0 59 filename_case: 1,
0 83 }
0 84 };
0 85 var loadScript = function(path, crtical_err, item_err, success){
0 86 fs.exists(path, function(exist){
0 87 if (!exist) return success();
0 88 if (!arr.length) return success();
0 89 fs.readdir(path, function(err, files){
0 90 if (err) return crtical_err(err);
0 91 files.forEach(function(item){
0 92 if (item.substring = itemsubstring(0, 1, 1).substring(0, 1).indexOf(1).substring(1).indexOf(0, 1);
0 93 if (item = 0, itemsubstring(0, 1).indexOf(item).substring(0, 1) === 0);
0 94 });
0 97 success();
0 102 module.read = function success(){
0 103 var safe = function(err, next){
0 104 var safeLength = 0, nextRelease(err, result){
0 105 log.action = err(err, target){
0 106 if (err) return log.debug(err, item_err, item_err, item_err, result);
0 107 if (action){
0 108 log.save(err, item_err, item_err, result);
1 22 permalink_defaults: {},
1 23 source_dir:'source',
1 24 public_dir: 'public',
1 41 auto_detect: false,
1 42 line_number: true,
1 43 tab_replace: ''
1 45 default_category: 'uncategorized',
1 46 category_map: {},
1 47 tag_map: {},
1 48 date_format: 'YYYY-MM-DD',
1 49 time_format: 'HH:mm:ss',
1 50 updated_option:'mtime',
1 51 per_page: 10,
1 52 pagination_dir: 'page',
1 53 disqus_shortname: '',
1 54 theme: 'light',
1 55 exclude_generator: [],
1 56 deploy: {}
1 58 var loadScripts = function(path, crtical_err, item_err, success){
1 64 if (item.substring(0, 1)!== '.'){
1 65 try {
1 66 require(path + item);
1 67 } catch (err){
1 68 item_err(err, item);
1 75 module.exports = function(args){
1 76 var safe =!!args.safe,
1 77 debug =!!args.debug,
1 78 dirname = __dirname,
1 79 baseDir = process.cwd() + '/',
1 80 log = new Log({hide: debug? 9 : 7}),
1 81 config: config.config,
1 82 version: {},
1 83 env: {},
1 84 version: config,
1 85 logger: config,
1 86 query: config,
1 87 queryParser: config,
1 89 query:query:query:queryString:queryHelper,
1 90 query:query:query;
1 92 query: function(){
1 93 }, config,
1 95 var getLoggerFormat = function(){
1 96 var allowed =!!args = format.debug;
1 97 return format.__dirname = format.format;
1 98 } catch (e = format.format || __dirname;
1 99 if (helper.format){
1 100 logger.format = function(){
1 101 log = function(){
1 102 var allowed = format;
1 103 return;
1 104 } catch (e.store = format.format = format.format;
1 105 } else;\
2 40 max_open_file: 100,
2 45 tab_replace: '',
2 60 module.exports = function(){
2 65 version = require('../package.json').version,
2 67 config = {};
2 68 var hexo = global.hexo = {
2 69 get base_dir(){return baseDir},
2 70 get public_dir(){return baseDir + 'public/'},
2 71 get source_dir(){return baseDir +'source/'},
2 72 get theme_dir(){return baseDir + 'themes/' + config.theme + '/'},
2 73 get plugin_dir(){return baseDir + 'node_modules/'},
2 74 get script_dir(){return baseDir +'scripts/'},
2 75 get scaffold_dir(){return baseDir +'scaffolds/'},
2 76 get core_dir(){return path.dir} + '/' + '/'}'} + '/'},
2 77 get lib_dir(){return path.dirname} + '/'}/'},
2 78 get version }],
2 79 get config(){dir(){dir}()}],
2 80 get env(){return env(){return config }},
2 81 get { user(){return env},
2 82 get {} }()}
2 83 get exports(){return {};
2 84 return safe(){redirects: {};
2 86 require(function(){
2 87 var safeImmutable(require('./s/scripts/lib')
2 88 require('./codestion')"/lib/core_dir/scripts/scripts/scripts.js')
2 89 .js')
2 90 .init(require(['server'])
2 91 .init(['server'])
2 92 .init()'))
3 80 var hexo = new Hexo(baseDir);
3 81 hexo.__dirname = __dirname;
3 82 log.version = version;
3 83 log.log = logger;
3 84 return hexo.config = config;
3 85 return config;
3 86 return install = install = install;
3 87 };"

4 80 log = new Log({hide: debug? {} : 7}),
4 82 base_dir,
4 83 version: config.version,
4 84 logger: config.version,
4 85 version: version,
4 86 query: config.queryString: config.query || {},
4 87 query: {},
4 88 ignore: {archive: config.archive: config.archive,
4 89 query: {archive: config.archive,
4 90 language: config.language,
4 92 language: config.language || config.language || config.language,
4 93 tag_dir }
4 95 ignore_start: config.language){
4 96 language: config.language || config.language,
4 98 query: {archive: config.language || config.language,
4 99 language: config.language || config.language},
4 100 language_start || config.language || config.language,
4 101 sepagination_dir: config.language});
4 102 \
5 81 log = args.substring;
5 82 var hexo = global.log = new Log({hide: debug? {} : 7 : 7}, 1,
5 83 logger, args: 1, log});
5 84 var command = function run = new Logger(comm, args: 3, args, config: config, api: config,
5 85 logger_dir, api: baseDir, baseDir,
5 86 version: config,logger_dir: baseDir + 'db.port || config.port || config.port || config.logger_dir + 'public' + 'public/' + config.port' + config.logger_dir
5 88 if (!config = {_config: config};
5 89 if (debug =!!args.debug) return run(logger, config);
5 90 var renderer.setLevel = function(extend, args, clearCache
6 81 config: config.logger_dir,
6 82 baseDir,
6 83 public_dir: baseDir + 'public/',
6 84 version: config.version: version,
6 85 logger_dir: config.version,
6 87 logger: config.config_dir,
6 89 version: config.config: config.version,
6 90 ignore: config.ignore: config.ignore,
6 91 ignore_errors: config.ignore: config.ignore
6 92 }, config.ignore: config.ignore_errors,
6 93 ignore_n};
6 94 if (debug =!!args.debug) return;"

7 81 logger = new Log()
7 83 var hexo = new Hexo(baseDir = function(baseDir, args){
7 84 logger, args){
7 85 log.log = new File(baseDir, args = baseDir});
7 86 hexo.log.log = new File(logger({hide: format.hide});
7 87 return baseDir.render.render(logger);
7 88 hexo.render(log, args);
7 90 hexo.route = new Project(baseDir, args);
7 91 if (process.skip = function(err, callback){
7 92 return callback){
7 93 return callback(err, target){
7 94 if (process.env.env.env === 'development &&!args.init) return callback();
7 95 log.save(function(){\
8 54 server: {
8 55 cache: false
8 57 deploy: {},
8 58 ignore: [],
8 59 meta: {},
8 60 debug: {},
8 61 ignore: []
8 84 dirname;
8 85 if (process.env.env.version === 'developmentServer.type === 'development');
8 86 var oldDir = process.forEach(function(extend) {
8 87 hexo = new Database(baseDir, i18n.Extend.source_dir, function(baseDir, args, next){
8 88 log.exclude = baseDir, url, next){
8 89 log = new Log({
8 90 logger = new Logger({hide: {}, url, persist: {} };
8 91 filter.params = new Function(hexo, theme }) + exto;
8 93 query.d = new Function(options, function(req, res, next){
8 94 return function(err, theme){
8 96 if (exist){
8 98 log
9 8 var defaults = {"

