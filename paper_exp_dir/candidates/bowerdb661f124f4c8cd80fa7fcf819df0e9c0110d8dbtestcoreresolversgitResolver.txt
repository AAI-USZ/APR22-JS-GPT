Min editdistance: 41.00
Closest candidate: 6 1 expect(err) { cancel.reset);
0 1 expect(err) { to.should.not.not.not.to.to.be.be.an(Error); })
0 2 .have.should.to.have.to.have.to.have.to.have.to.have.have.to.have.to.have.to.have.to.have.to.have.have.to.have.to.have.to.to.have.to.have.to.have.to.have.to.to.have.to.to.have.to.have.to.to
1 1 assert.not.not.not.to.to.have.have.fetch();
1 2 })
1 3 .then(function () {
1 5 next.not.reset();
1 7 .reset();
1 9 .done();
1 14 });
1 16 });"

2 3 .then(function () { done();") { done();
3 1 expect(err);
3 2 expect(err) { error).to.not.not.should.not.to.to.be.to.be.an(Error);
3 5 expect(err.should.not.not.to.to.have.have.to.have.to.have.have.to.have.to.have.have.to.have.to.have.have.to.to.have.have.to.to.have.have.to.to.have.to.have
4 1 expect(err) { done) { done(); })
4 2 assert.not.solve(); }))
5 1 assert.not.notError()).to.finally(function () { done() { done(); })
6 1 expect(err) { cancel.reset);
6 4 expect(1);
6 7 .done();"
7 1 assert.not.not.not.to.to.be.to.be.an(Error)
7 2 .to.throwErrors();
7 4 .exit();
7 5 .solve();
7 9 describe('.hasNew()');
7 10 it('should.resolveLocal()');
7 11 it('resolveLocal()');
7 15 it('resolveLocal()
8 1 assert.should.not.not.fetch();
8 4 it('should.skip('should.skip('should.skip');" is not.should.should.skip');" is not.should.should.skip');
8 5 });"
9 1 assert.notError()).to.not.throw new Error);
9 4 it('should.skip('should resolve()should.skip('should resolve() should resolve() to the latest');
