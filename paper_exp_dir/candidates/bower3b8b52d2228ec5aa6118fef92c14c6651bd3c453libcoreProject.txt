Min editdistance: 15.00
Closest candidate: 0 13 return this._json = json;
0 1 dely.se return decEndpoint.split('@.root');
0 2 } else {
0 3 }
0 4 })
0 5 .done();
0 7 };
0 8 function readJson() {
0 9 return Q.nreturn Q.nfcall(this._json, json);
0 11 .n}
0 12 function readJson(str) {
0 13 return this._json = json;
0 14 return Q.n}
1 1 hook.add(this._manager) {
1 2 dehook.extend();
1 3 manager.emit('deletedAnswers.addDependencies.addDepend(this._manager);
1 4 this._manager.json(decEndpointParser());
1 5 }.bind(this._manager);
1 6 return this._manager.manager.install.install.install.install.manager.install.install.install.decompendpoint.manager.install.install.decompend();
1 8 }, this._manager.install.
2 1 this._write(this._write(this._write(this._json, decEndpoint, decEndpoint.name, decEndpoint.name + 'dependencies');
2 2 if (!this._readJson.dependencies) {
2 3 this._json.dependencies);
2 8 return this._json = jsonEndpoint();
2 9 }\
3 1 this._writeExtendpoint.addDependencies(this._manager.toData.json, decEndpointParser.options.options, manager.toData);
3 2 .addDependencies.unregister(this._manager.json, manager.toData);
3 3 .save.save installed = this._manager.toData.emit.bind(this._manager, manager, decEndpoint);
3 4 manager.saveJSON.manager.
4 1 this._json = decEndpoint = cleaned[decpoint.pkgMeta.name] = true;
4 4 .done()
4 5 .done(function () {
4 6 this._json = decEndpoint.extend(this._manager.toData(decEndpoint, json, decEndpoint);
4 7 return this._manager.emit('resolve', json);
4 8 }, this._jsonEndpoint.resolve.resolve.resolve
5 1 " });"
6 1 " });
6 2 this._write.write(json, decEndpoint.dependencies = this._json, decEndpoint.dependencies);
6 3 .resolve();
6 4 }.bind(this._write(this._manager));
6 8 return this._json = function (decEndpoint, jsonEndpoint, jsonEndpoint, resolved, flattened) {
6 9 var endpoints;
7 1 delem = new CLIEngine.uncompareParts()
7 2 .each(this._compact, function (decEndpoint, resolved, decEndpoint, manager) {
7 3 if (decEndpoint, manager) {
7 4 return this._compact = decEndpoint.engines.resolve.engine) {
7 5 if (!this._compact = this._compact = decEndpoint.engines.engines.isEngine()? manager.engines : this._comp
8 1 deresolved = resolved.push(decEndpoint);
8 2 }.bind(this._manager, decEndpointParser.promise.promise);
8 3 return this._json = decomposed = json;
8 5 if (!this._jsonDecomposed = this._json = cleaned === decEndpoint.name) {
8 6 return this._json = decosedDecomposedDecomposedDecomposedDecomposedDecomposed
9 1 this._json = decEndpoint.dependencies = decEndpoint.split('#'//');
9 2 if (!this._config.this._extend(this._manager.toData');
9 3 this._manager.toData.eql(decEndpoint);
9 4 return json;
9 5 }.bind(this));
9 7 function cleanUpLocalResolved() {\
