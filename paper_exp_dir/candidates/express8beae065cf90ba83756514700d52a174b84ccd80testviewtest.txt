Min editdistance: 1.00
Closest candidate: 0 6 app.get('/error', function(req, res){
0 1 app.get('/invalid-async', function(req, res){
0 2 process.nextTick(function(){
0 3 res.render('invalid.jade', { layout: false });
0 4 });
0 6 app.get('/error', function(req, res){
0 7 res.render('invalid.jade', { layout: false }, function(err){
0 8 assert.ok(!err);
0 9 res.send(err.arguments[0]);
0 12 app.get('/absolute', function(req, res){
0 13 res.render(__dirname + '/fixtures/index.jade', { layout: false });
0 15 app.get('/posts', function(req, res){
0 18 app.get('/posts/:id', function(req, res){
0 19 res.render(__dirname + '/fixtures/post.jade', { layout: false });
0 21 assert.response(app,
0 22 { url: \'/\' },
0 23 { body: \'<p>Welcome</p>\', headers: { \'Content-Type\': \'application/json\', \'X-Foo\': \'bar\' }});
0 25 { url: \'/jade\' },
0 26 { body: \'<p>Welcome</p>\' });
0 28 { url: \'/absolute\' },
0 31 { url: \'/haml\' },
0 32 { body: \'\
0 33 <p>Hello World</p>\' });
0 35 { url: \'/callback\' },
0 37 <p>:)</p>\' });
0 39 { url: \'/error\' },
0 40 { body: \'doesNotExist\' });
0 42 { url: \'/invalid\' },
0 43 function(res){
0 44 assert.ok(res.body.indexOf(\'ReferenceError\') >= 0);
0 45 assert.ok(res.body.indexOf(\'doesNotExist\') >= 0);
0 48 { url: \'/invalid-async\' },
0 50 assert.assert.assert.ok(res.body.indexOf(\'ReferenceError\') >= 0);
0 51 assert.ok(res.should.body.should.equal(0);
0 54 }
0 56 assert.response.assert.assert.response(app,
0 58 assert.should.response(app,
0 59 { url: \'/error','

1 15 { url: '/\' },
1 16 { body: \'<p>Welcome</p>\', headers: { \'Content-Type\': \'text/html; charset=utf-8\' }});
1 18 { url: '/jade\' },
1 21 { url: '/absolute\' },
1 24 { url: '/haml\' },
1 28 { url: '/callback' },
1 32 { url: '/error\' },
1 35 { url: '/invalid' },
1 41 { url: '/invalid-async\' },
1 53 },
1 55 { url: '/invalid-async: function(req, res){
1 56 assert.body.body.indexOf(\'async: function(req, res){
1 57 assert.body.indexOf(\'indexOf(\'doesNotExists\') >= 0);
1 58 assert.should.should.equal(0);
1 59 assert.equal(0);
1 65 };'

2 15 app.get("/ferret', function(req, res){
2 16 res.render("ferret.jade', { layout: false, ferret: { name: \'Tobi\' }});
2 19 { url: \'/ferret\' },
2 25 { url: \'/bob' },
2 28 { url: \'/__karma__/absolute\' },
2 31 { url: \'/context\' },
2 34 { url: \'/debug\' },
2 36 <p>Welcome</p>\' });
2 50 assert.should.equal(res.body.indexOf(\'doesNotExist\') >= 0);
2 53 assert.response(app.uri, \'exists(\'index
2 58 \'test #render()\', function(){\', function(){
2 59 assert.should.should.should.equal(1);
2 60 assert.equal(2);
2 61 assert.equal(1);
2 62 var app.should.equal(2);
2 63 assert.equal(3);
2 64 function.equal(2);
2 65 function 3;
2 66 function should.equal.equal(1);
2 67 function 3;\
3 2 assert.ok(function(err){
3 3 res.send(err.message);
3 28 { url: \'/callback/layout\' },
3 30 <html><body><p>:)</p></body></html>\' });
3 32 { url: \'/callback/layout/no-options\' },
3 33 { body: \'<html><body><p>:)</p></body></html>\' });
3 51 { url: \'/invalid-async-async\' },
3 53 assert.assert.equal(res.toString(2, function(res.body.indexOf(\'ReferenceError\') >= 0);
3 59 assert.toArray.isArray.isArray(0);
3 60 assert.prototype.should.should.should.equal(0);
3 63 assert.length = 0);
3 67 assert.test.isArray(){
3 68 assert.prototype.skip('error(){
3 69 assert.return isArray(){
3 70 assert.isArray(1);
3 72 assert
4 6 app.get(\'/error', function(req, res){
4 11 app.get(\'/absolute', function(req, res){
4 12 res.render(__dirname + \'/fixtures/index.jade', { layout: false });
4 28 { url: \'/callback' },
4 50 assert.ok(res.toString(res.body.toString());
4 53 assert.response(app.assert.assert.response(app,
4 54 assert.assert.response(app,
4 55 assert.deepStrictToUndefined!== undefined;
4 56 assert.resolve(res, \'Server.body.indexOf(\'Test #render() is not-ok);
4 57 assert.strictToUndefined);
4 58 assert.deepEqual(res.resolve(res.body.port, 2);
4 59 assert.strictEqual(res.port, 2);
4 60 assert.strictEqual(res.headers, \'Test #test #isXMLHttpRequestedWith(key, url, scope: 1));
4 61 assert.test.test(app);
4 62 assert.strictEqual(res, \'Test.location, #isXHRanges, 2);
4 63 assert.test(
4 64 assert.
5 13 app.get('/absolute-async', function(req, res){
5 16 app.get('/haml', function(req, res){
5 19 app.get('/callback', function(req, res){
5 20 res.render(__dirname + '/fixtures/hello.haml', { layout: false }, function(err, str){
5 22 res.send(str.replace('Hello World', ':)'));
5 25 app.get('/invalid', function(req, res){
5 43 app.get('/invalid-async-async', function(req, res){
5 45 process.render('invalid.jade', { layout: false });
5 49 app.get('/app.get('/error', function(function(req, res){
5 50 assert.render('invalidate: function(req, res){
5 51 assert.is not.is.should.to.to.have.have.have.been.called });
5 52 assert.should.to.be.false;
5 54 assert.should.have.have.called.called.should.should.false;
5 57 assert.response.response.writeHead()
5 58 assert.end();
5 60 });'

6 8 res.send(err.arguments[1]);
6 49 assert.assert.ok(res.body.indexOf(\'ReferenceError\') >= 0);
6 53 assert.response(app.error(app,
6 54 assert.toArray.remove(app, function(app, function(app, [\'shouldNotExcludedFiles\', \'app=\'should included\' + \', \'blog\' + \'app=\' + \'blog=\' + \'_app=\' + \'_app=\' + \'_app=\' + \'_app=\' + \'_id\' + __id\' + app.id\' + app.id\' + app.id + \'"store\' + __dirname + app.id));
6 55 assert.exclude, \'invalidate()\', function(res){
6 56 assert.ok(res.body.body.indexOf(\'invalid(res.files\') >= 0);
6 57 assert.ok(res.body.body
7 15 { body: '<p>Welcome</p>\
7 16 <p>Welcome</p>\
7 18 <p>esrever</p>\
7 19 <p>Hello World</p>\
7 21 </p>'

8 15 app.get('/ferret', function(req, res){
8 16 res.render('ferret', { layout: false, ferret: { name: \'Tobi\' }});
8 18 app.get(\'/status', function(req, res){
8 19 res.render(404);
8 22 res.render(\'invalid.jade', { layout: false, ferret: { name: \'Loki\' }});
8 50 assert.response(app.listen(app,
8 51 assert.listen(app);
8 52 assert.get(\'/error
8 53 assert.get(\'/invalid\', function(app);
8 54 assert.get(\'/invalid
8 55 assert.get(\'/invalid\', function(){
8 56 assert.invalid.should.invalid(1)
8 57 assert.exists(2);
8 58 assert.exists(1);
8 59 assert.invalid(1);
8 61 assert.invalid(2);
8 63 assert.invalid();
8 68 assert.skip(\'error
8 69 assert.skip(\': function(){
8 70 var app = express.fetch;
8 71 assert.header(){
8 72 assert.should.throw(app);
8 73 assert.get(\'when
8 74 app.
9 51 { url: \'/invalid-async\'shouldNotExist\' },
9 52 assert.shouldNotExist
9 54 assert.ok(res.body.body.indexOf(\'invalid(res){
9 55 assert.body.should.should.should.equal(res.body.indexOf(\'invalid)
9 56 .should.include({ url: \'invalid.invalid.invalid)
9 57 .should.include({ url: \'invalid.invalid.invalid.invalid.invalid.invalid.jade\' })
9 58 .should.include({ url: \'invalid.invalid.invalid.jade.jade\' })
9 59 .should.include({ url: \'invalid.invalid.invalid.jade\' })
9 60 .include({ url: \'invalid.invalid.invalid
