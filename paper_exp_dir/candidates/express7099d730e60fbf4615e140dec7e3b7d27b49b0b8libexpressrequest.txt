Min editdistance: 26.00
Closest candidate: 3 18 function createKarmaMiddleware(
0 1 "

3 1 }
3 2 function getXUACompatibleMetaElement(url){
3 3 var tag = this.headers['x-ua-compatible'] || {};
3 4 if (tag) {
3 5 return tag.call(this, url, this.url.replace(/\
3 6 (\\t+)/g, \'\'));
3 8 return this.headers[\'x-ua-compatible'] || null;
3 10 function getXUACompatibleUrl(url){
3 11 var value = this.headers['x-ua-compatible'] || {};
3 12 if (url) {
3 13 return value.call(this, url, this.url.replace(/\
3 16 return value.stringify(url);
3 18 function createKarmaMiddleware(
3 19 filesPromise,
3 20 promise,
3 21 serveStaticFile,
3 22 serveFile,
3 23 injector,
3 24 settings,
3 25 urlRoot,
3 26 clearSpender,
3 27 urlRoot
3 28 ) {
3 29 var slash = (suffix=[\'|"]) + \'/\';
3 30 var file = newFile({
3 31 path: \'/client.html\',
3 32 permalink: \'/karma.html\'
3 33 });
3 34 if (config.proxies && config.proxies.hasOwnProperty(config.urlRoot)) {
3 35 return Q.resolve(config.urlRoot);
3 37 var socketServer = http.createServer(handler);
3 39 return;
3 41 if (config.singleRun && config.autoWatch) {
3 44 if (injector.createChild([{
3 45 serveStaticFile: function(path, serveStaticFile,
3 47 severity: 2,
3 48 proxy: config.proxy,
3 49 maxAge: 3
3 50 }]).then(function(){
3 51 config.client.sockets.emit(
3 52 server.s.length,
3 53 , response.sockets.length);
3 54 }))
3 55 ])
3 56 .on('error', function (name', function (name) {
3 57 config.name = handler.name = name;
3 58 config.name = provider.name.isFirst(name);
3 59 config.lastCall.lastCall.args[0];
3 60 if (type) {
3 61 config.lastCall.apply(this, this.url);
3 62 })
3 63 .apply(this, this.url.get(this, arguments);
3 64 return this.getHeader(this, arguments);
3 66 .getLowerCase());
3 68 .return handler.handle(this, urlRoot);
3 69 .handle(this);
3 71 .get(\'/
3 72 .getHeaderParser());
3 73 .get
4 2 function getXUACompatibleMeta(name){
4 3 var tag = this.header(\'Content-Type\') || this.contentType(\'.html\');
4 4 return tag
4 5 .replace(/^\\d+\\/adapter(\\/|\\d+$/g, \'\')
4 6 .replace(/^\\/absolute/, \'\')
4 7 .replace(/^\\/base/, base +\');
4 9 function getXUACompatibleUrl(name){
4 10 var value = this.header(\'Content-Type\') || this.contentType(\'.html\');
4 11 return value
4 12 .replace(/\\/absolute/, \'\')
4 15 exports.isxhr = function(return){
4 16 return this.header(\'X-Requested-With\', '').toLowerCase() === \'xmlhttprequest';
4 21 exports.onvhost = function(){
4 22 this.header(\'Content-Type\', \'application/vhost\');
4 23 this.header(\'Content-Type\', \'text/html\');
4 26 exports.paginator = function(base, args){
4 27 var base = this.app.locals.base || \'\';
4 28 var posts = this.site.posts.sort(\'date\', -1);
4 29 var tags = PostTag.find({ tags: posts});
4 30 if (!posts.length) return;
4 31 posts.forEach(function(post){
4 32 var link = post.permalink;
4 33 var caption = post.contentType = post.contentType;
4 34 if (caption = caption || post.permalink.constructor.path == post.permalink) || post.permalink;
4 35 return caption = caption || caption.categories;
4 38 return posts.find(function(post){
4 39 return posts.length = posts.length === 1;
4 41 return posts.length = posts.length;
4 44 exports.parse = function(args){
4 45 return $(this.url).each(function(post){
4 46 return posts.url, i){
4 47 return this.url, i){
4 48 format(args, args, args, i){
4 49 args, args, url, url, url + 1);
4 50 args = args, url_ = args, url_ = args.split(\'length);
5 3 var isxhr = this.header('X-Requested-With', '');
5 4 if (isxhr) return typeof exports === \'object\' && exports.isXMLHttpRequest === false;
5 5 return ABS_INJECT(this.headers[\'x-ua-compatible\']) ||
5 6 false;
5 9 var isxhr = this.header(\'X-Requested-With\', '');
5 19 basePath,
5 21 rootPath,
5 22 maxAge,
5 23 proxies,
5 26 return function (request, response, next) {
5 27 var client = injector.get(\'config.client\');
5 28 var customContextFile = injector.get(\'config.customContextFile\');
5 29 var customDebugFile = injector.get(\'config.customDebugFile\');
5 30 var customClientContextFile = injector.get(\'config.customClientContextFile\');
5 31 var injector = new injector();
5 32 var handler = injector.invoke(function (injector, args) {
5 33 var config = injector.get(\'config.injector\');
5 34 var filePromise = injector.get(\'config.file-promise\');
5 35 pp(config, function (error, doc) {
5 36 if (error) {
5 37 next(error);
5 38 } else {
5 39 filePromise.then(function () {
5 44 return handler.use(config.use(function (req, res) {
5 45 pp(req, res, res, next);
5 46 config.uri.normalize(res);
5 50 return handler.get(\'/
5 51 .get(\'/\', function (config.normalizeVersion(config.urlRoot, handler)
5 52 .normalizeVersion(config.urlRoot);
5 53 .toLowerCase());
5 55 .set(\' customHeaders(config.setHeaderPragmentjsVersion)
5 56 .setHeaders(config.upressHeaders);
5 57 .return handler.setHeaders(config.up, customDebugHeaders);
5 58 .get(\'/customClientHeaders());\', function () => handler.lookup.lookup.setHeaders.setHeaders.setHeaders.setHeaders(
6 2 function getXUwa7(id){
6 3 return this.header(\'X-Requested-With\', id);
6 5 function getActiveXObject(name){
6 6 if (this.passed) {
6 7 return this.passed;
6 9 if (isActiveXObject(name)) {
6 12 return this.accepts(false);
6 14 function checkAnyPathMatch(file){
6 15 var path = this.format(this.url)
6 16 , line = file.path + '-' + path;
6 17 var request = this.session;
6 18 var response = this.response;
6 19 var self = this;
6 20 if (this.isActiveXObject(name)) {
6 22 response.writeHead(200);
6 23 return response.end('\');
6 25 if (isMongooseError(request, response) && request.url.indexOf(path) === 0) {
6 26 return true;
6 28 response.setHeader('Location', path);
6 29 this.writeHead(200);
6 30 this.end(function(err, res){
6 31 if (err) {
6 32 return self.removeHeader(\'Content-Type\');
6 34 if (response.statusCode < 200 || response.statusCode >= 300) {
6 37 callback(err, res);
6 40 function send(name,stream) {
6 41 if (typeof name === \'function\') {
6 42 return send(name, stream);
6 44 var headers = this.app.headers
6 45 , self = this;
6 46 if (!headers.length) {
6 49 if (headers instanceof Function) {
6 50 return!== undefined;
6 52 function error(err) {
6 53 if (err.headers[key.toLowerCase() ==\'string\' == required\') {
6 54 return err;
6 56 this.writeHeader(err);
6 57 this.removeHeader(headers);
6 58 this.end(err);
6 59 this.adapter(true);
6 63 function stream() {
6 64 return this;
6 69 exports.isXMLHttpRequest = function isxhr() {
6 70 return function(val){
6 71 return this.header(\'x-Requested-Requested-Requested-Requested-Requested-Requested-Request-Requested-With\', customHeaders && this.urlencodings.toLowerCase());
6 72 return is.toString());
6 74 \
8 2 module.exports = exports = HTTPServer;'

9 2 function toString(val){ return val === undefined; }'

